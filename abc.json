{
  "db": [
    {
      "meta": {
        "exported_on": 1567310389660,
        "version": "2.23.1"
      },
      "data": {
        "actions": [
          {
            "id": "5cf3b9ef6e5789135f7785ba",
            "resource_id": "5cf3b8ef6e5789135f77849c",
            "resource_type": "post",
            "actor_id": "1",
            "actor_type": "user",
            "event": "deleted",
            "context": null,
            "created_at": "2019-06-02T11:58:39.000Z"
          },
          {
            "id": "5cf3b9f56e5789135f7785bb",
            "resource_id": "5cf3b8ef6e5789135f77849a",
            "resource_type": "post",
            "actor_id": "1",
            "actor_type": "user",
            "event": "deleted",
            "context": null,
            "created_at": "2019-06-02T11:58:45.000Z"
          },
          {
            "id": "5cf3b9fb6e5789135f7785bc",
            "resource_id": "5cf3b8ef6e5789135f778498",
            "resource_type": "post",
            "actor_id": "1",
            "actor_type": "user",
            "event": "deleted",
            "context": null,
            "created_at": "2019-06-02T11:58:51.000Z"
          },
          {
            "id": "5cf3ba006e5789135f7785bd",
            "resource_id": "5cf3b8ef6e5789135f778496",
            "resource_type": "post",
            "actor_id": "1",
            "actor_type": "user",
            "event": "deleted",
            "context": null,
            "created_at": "2019-06-02T11:58:56.000Z"
          },
          {
            "id": "5cf3ba076e5789135f7785be",
            "resource_id": "5cf3b8ef6e5789135f778494",
            "resource_type": "post",
            "actor_id": "1",
            "actor_type": "user",
            "event": "deleted",
            "context": null,
            "created_at": "2019-06-02T11:59:03.000Z"
          },
          {
            "id": "5cf3ba0d6e5789135f7785bf",
            "resource_id": "5cf3b8ef6e5789135f778492",
            "resource_type": "post",
            "actor_id": "1",
            "actor_type": "user",
            "event": "deleted",
            "context": null,
            "created_at": "2019-06-02T11:59:09.000Z"
          },
          {
            "id": "5cf3ba126e5789135f7785c0",
            "resource_id": "5cf3b8ee6e5789135f778490",
            "resource_type": "post",
            "actor_id": "1",
            "actor_type": "user",
            "event": "deleted",
            "context": null,
            "created_at": "2019-06-02T11:59:14.000Z"
          },
          {
            "id": "5cf3c24df981ff0378db3658",
            "resource_id": "5cf3b9b16e5789135f7785a7",
            "resource_type": "post",
            "actor_id": "1",
            "actor_type": "user",
            "event": "edited",
            "context": null,
            "created_at": "2019-06-02T12:34:21.000Z"
          },
          {
            "id": "5cf3df01f981ff0378db365a",
            "resource_id": "5cf3b9b16e5789135f7785a7",
            "resource_type": "post",
            "actor_id": "1",
            "actor_type": "user",
            "event": "edited",
            "context": null,
            "created_at": "2019-06-02T14:36:49.000Z"
          },
          {
            "id": "5cf3e539f981ff0378db365c",
            "resource_id": "5cf3b9b16e5789135f7785a7",
            "resource_type": "post",
            "actor_id": "1",
            "actor_type": "user",
            "event": "edited",
            "context": null,
            "created_at": "2019-06-02T15:03:21.000Z"
          },
          {
            "id": "5cf3e55af981ff0378db365e",
            "resource_id": "5cf3b9b16e5789135f7785a7",
            "resource_type": "post",
            "actor_id": "1",
            "actor_type": "user",
            "event": "edited",
            "context": null,
            "created_at": "2019-06-02T15:03:54.000Z"
          },
          {
            "id": "5cf48113f981ff0378db3660",
            "resource_id": "5cf3b9b16e5789135f7785a7",
            "resource_type": "post",
            "actor_id": "1",
            "actor_type": "user",
            "event": "edited",
            "context": null,
            "created_at": "2019-06-03T02:08:19.000Z"
          },
          {
            "id": "5cf481e5f981ff0378db3662",
            "resource_id": "5cf3b9b16e5789135f7785a7",
            "resource_type": "post",
            "actor_id": "1",
            "actor_type": "user",
            "event": "edited",
            "context": null,
            "created_at": "2019-06-03T02:11:49.000Z"
          },
          {
            "id": "5cf48211f981ff0378db3664",
            "resource_id": "5cf3b9b16e5789135f7785a7",
            "resource_type": "post",
            "actor_id": "1",
            "actor_type": "user",
            "event": "edited",
            "context": null,
            "created_at": "2019-06-03T02:12:33.000Z"
          },
          {
            "id": "5cf48247f981ff0378db3666",
            "resource_id": "5cf3b9b16e5789135f7785a7",
            "resource_type": "post",
            "actor_id": "1",
            "actor_type": "user",
            "event": "edited",
            "context": null,
            "created_at": "2019-06-03T02:13:27.000Z"
          },
          {
            "id": "5cf4826ff981ff0378db3668",
            "resource_id": "5cf3b9b16e5789135f7785a7",
            "resource_type": "post",
            "actor_id": "1",
            "actor_type": "user",
            "event": "edited",
            "context": null,
            "created_at": "2019-06-03T02:14:07.000Z"
          },
          {
            "id": "5cf4827df981ff0378db366a",
            "resource_id": "5cf3b9b16e5789135f7785a7",
            "resource_type": "post",
            "actor_id": "1",
            "actor_type": "user",
            "event": "edited",
            "context": null,
            "created_at": "2019-06-03T02:14:21.000Z"
          },
          {
            "id": "5cf491b7f981ff0378db366c",
            "resource_id": "5cf3b9b16e5789135f7785a7",
            "resource_type": "post",
            "actor_id": "1",
            "actor_type": "user",
            "event": "edited",
            "context": null,
            "created_at": "2019-06-03T03:19:19.000Z"
          },
          {
            "id": "5cf4b993f981ff0378db366e",
            "resource_id": "5cf3b9b16e5789135f7785a7",
            "resource_type": "post",
            "actor_id": "1",
            "actor_type": "user",
            "event": "edited",
            "context": null,
            "created_at": "2019-06-03T06:09:23.000Z"
          },
          {
            "id": "5cf4d416f981ff0378db3670",
            "resource_id": "5cf3b9b16e5789135f7785a7",
            "resource_type": "post",
            "actor_id": "1",
            "actor_type": "user",
            "event": "edited",
            "context": null,
            "created_at": "2019-06-03T08:02:30.000Z"
          },
          {
            "id": "5cf5c171f981ff0378db3672",
            "resource_id": "5cf3b9b16e5789135f7785a7",
            "resource_type": "post",
            "actor_id": "1",
            "actor_type": "user",
            "event": "edited",
            "context": null,
            "created_at": "2019-06-04T00:55:13.000Z"
          },
          {
            "id": "5cf5c178f981ff0378db3674",
            "resource_id": "5cf3b9b16e5789135f7785a7",
            "resource_type": "post",
            "actor_id": "1",
            "actor_type": "user",
            "event": "edited",
            "context": null,
            "created_at": "2019-06-04T00:55:20.000Z"
          },
          {
            "id": "5cf5c2a0f981ff0378db3676",
            "resource_id": "5cf3b9b16e5789135f7785a7",
            "resource_type": "post",
            "actor_id": "1",
            "actor_type": "user",
            "event": "edited",
            "context": null,
            "created_at": "2019-06-04T01:00:16.000Z"
          },
          {
            "id": "5cf5caedf981ff0378db3678",
            "resource_id": "5cf3b9b16e5789135f7785a7",
            "resource_type": "post",
            "actor_id": "1",
            "actor_type": "user",
            "event": "edited",
            "context": null,
            "created_at": "2019-06-04T01:35:41.000Z"
          },
          {
            "id": "5cf5cbb7f981ff0378db367a",
            "resource_id": "5cf3b9b16e5789135f7785a7",
            "resource_type": "post",
            "actor_id": "1",
            "actor_type": "user",
            "event": "edited",
            "context": null,
            "created_at": "2019-06-04T01:39:03.000Z"
          },
          {
            "id": "5cf5cfbaf981ff0378db367c",
            "resource_id": "5cf3b9b16e5789135f7785a7",
            "resource_type": "post",
            "actor_id": "1",
            "actor_type": "user",
            "event": "edited",
            "context": null,
            "created_at": "2019-06-04T01:56:10.000Z"
          },
          {
            "id": "5cf5d0dff981ff0378db367e",
            "resource_id": "5cf3b9b16e5789135f7785a7",
            "resource_type": "post",
            "actor_id": "1",
            "actor_type": "user",
            "event": "edited",
            "context": null,
            "created_at": "2019-06-04T02:01:03.000Z"
          },
          {
            "id": "5cf5d1c3f981ff0378db3680",
            "resource_id": "5cf3b9b16e5789135f7785a7",
            "resource_type": "post",
            "actor_id": "1",
            "actor_type": "user",
            "event": "edited",
            "context": null,
            "created_at": "2019-06-04T02:04:51.000Z"
          },
          {
            "id": "5cf5d1c6f981ff0378db3682",
            "resource_id": "5cf3b9b16e5789135f7785a7",
            "resource_type": "post",
            "actor_id": "1",
            "actor_type": "user",
            "event": "edited",
            "context": null,
            "created_at": "2019-06-04T02:04:54.000Z"
          },
          {
            "id": "5cf5d1c9f981ff0378db3684",
            "resource_id": "5cf3b9b16e5789135f7785a7",
            "resource_type": "post",
            "actor_id": "1",
            "actor_type": "user",
            "event": "edited",
            "context": null,
            "created_at": "2019-06-04T02:04:57.000Z"
          },
          {
            "id": "5cf5d1d1f981ff0378db3686",
            "resource_id": "5cf3b9b16e5789135f7785a7",
            "resource_type": "post",
            "actor_id": "1",
            "actor_type": "user",
            "event": "edited",
            "context": null,
            "created_at": "2019-06-04T02:05:05.000Z"
          },
          {
            "id": "5cf5d3faf981ff0378db3688",
            "resource_id": "5cf3b9b16e5789135f7785a7",
            "resource_type": "post",
            "actor_id": "1",
            "actor_type": "user",
            "event": "edited",
            "context": null,
            "created_at": "2019-06-04T02:14:18.000Z"
          },
          {
            "id": "5cf5d962f981ff0378db368a",
            "resource_id": "5cf3b9b16e5789135f7785a7",
            "resource_type": "post",
            "actor_id": "1",
            "actor_type": "user",
            "event": "edited",
            "context": null,
            "created_at": "2019-06-04T02:37:22.000Z"
          },
          {
            "id": "5cf5da93f981ff0378db368c",
            "resource_id": "5cf3b9b16e5789135f7785a7",
            "resource_type": "post",
            "actor_id": "1",
            "actor_type": "user",
            "event": "edited",
            "context": null,
            "created_at": "2019-06-04T02:42:27.000Z"
          },
          {
            "id": "5cf5dac8f981ff0378db368e",
            "resource_id": "5cf3b9b16e5789135f7785a7",
            "resource_type": "post",
            "actor_id": "1",
            "actor_type": "user",
            "event": "edited",
            "context": null,
            "created_at": "2019-06-04T02:43:20.000Z"
          },
          {
            "id": "5cf5e25bf981ff0378db3690",
            "resource_id": "5cf3b9b16e5789135f7785a7",
            "resource_type": "post",
            "actor_id": "1",
            "actor_type": "user",
            "event": "edited",
            "context": null,
            "created_at": "2019-06-04T03:15:39.000Z"
          },
          {
            "id": "5cf5f398f981ff0378db3691",
            "resource_id": "5cf3b9b16e5789135f7785a7",
            "resource_type": "post",
            "actor_id": "1",
            "actor_type": "user",
            "event": "edited",
            "context": null,
            "created_at": "2019-06-04T04:29:12.000Z"
          },
          {
            "id": "5cf5f3acf981ff0378db3692",
            "resource_id": "5cf3b9b16e5789135f7785a7",
            "resource_type": "post",
            "actor_id": "1",
            "actor_type": "user",
            "event": "edited",
            "context": null,
            "created_at": "2019-06-04T04:29:32.000Z"
          },
          {
            "id": "5cf60a31f981ff0378db3694",
            "resource_id": "5cf3b9b16e5789135f7785a7",
            "resource_type": "post",
            "actor_id": "1",
            "actor_type": "user",
            "event": "edited",
            "context": null,
            "created_at": "2019-06-04T06:05:37.000Z"
          },
          {
            "id": "5cf60ad1f981ff0378db3696",
            "resource_id": "5cf3b9b16e5789135f7785a7",
            "resource_type": "post",
            "actor_id": "1",
            "actor_type": "user",
            "event": "edited",
            "context": null,
            "created_at": "2019-06-04T06:08:17.000Z"
          },
          {
            "id": "5cf60b57f981ff0378db3698",
            "resource_id": "5cf3b9b16e5789135f7785a7",
            "resource_type": "post",
            "actor_id": "1",
            "actor_type": "user",
            "event": "edited",
            "context": null,
            "created_at": "2019-06-04T06:10:31.000Z"
          },
          {
            "id": "5cf61312f981ff0378db369a",
            "resource_id": "5cf3b9b16e5789135f7785a7",
            "resource_type": "post",
            "actor_id": "1",
            "actor_type": "user",
            "event": "edited",
            "context": null,
            "created_at": "2019-06-04T06:43:30.000Z"
          },
          {
            "id": "5cf6137df981ff0378db369c",
            "resource_id": "5cf3b9b16e5789135f7785a7",
            "resource_type": "post",
            "actor_id": "1",
            "actor_type": "user",
            "event": "edited",
            "context": null,
            "created_at": "2019-06-04T06:45:17.000Z"
          },
          {
            "id": "5cf6138bf981ff0378db369e",
            "resource_id": "5cf3b9b16e5789135f7785a7",
            "resource_type": "post",
            "actor_id": "1",
            "actor_type": "user",
            "event": "edited",
            "context": null,
            "created_at": "2019-06-04T06:45:31.000Z"
          },
          {
            "id": "5cf62979f981ff0378db36a1",
            "resource_id": "5cf3b9b16e5789135f7785a7",
            "resource_type": "post",
            "actor_id": "1",
            "actor_type": "user",
            "event": "edited",
            "context": null,
            "created_at": "2019-06-04T08:19:05.000Z"
          },
          {
            "id": "5cf63054f981ff0378db36a3",
            "resource_id": "5cf3b9b16e5789135f7785a7",
            "resource_type": "post",
            "actor_id": "1",
            "actor_type": "user",
            "event": "edited",
            "context": null,
            "created_at": "2019-06-04T08:48:20.000Z"
          },
          {
            "id": "5cf6305af981ff0378db36a5",
            "resource_id": "5cf3b9b16e5789135f7785a7",
            "resource_type": "post",
            "actor_id": "1",
            "actor_type": "user",
            "event": "edited",
            "context": null,
            "created_at": "2019-06-04T08:48:26.000Z"
          },
          {
            "id": "5cf76b08c199180df866a22a",
            "resource_id": "5cf3b9b16e5789135f7785a7",
            "resource_type": "post",
            "actor_id": "1",
            "actor_type": "user",
            "event": "edited",
            "context": null,
            "created_at": "2019-06-05T07:11:04.000Z"
          },
          {
            "id": "5cf76b0ac199180df866a22c",
            "resource_id": "5cf3b9b16e5789135f7785a7",
            "resource_type": "post",
            "actor_id": "1",
            "actor_type": "user",
            "event": "edited",
            "context": null,
            "created_at": "2019-06-05T07:11:06.000Z"
          },
          {
            "id": "5cf76d79c199180df866a22e",
            "resource_id": "5cf3b9b16e5789135f7785a7",
            "resource_type": "post",
            "actor_id": "1",
            "actor_type": "user",
            "event": "edited",
            "context": null,
            "created_at": "2019-06-05T07:21:29.000Z"
          },
          {
            "id": "5cf76de1c199180df866a230",
            "resource_id": "5cf3b9b16e5789135f7785a7",
            "resource_type": "post",
            "actor_id": "1",
            "actor_type": "user",
            "event": "edited",
            "context": null,
            "created_at": "2019-06-05T07:23:13.000Z"
          },
          {
            "id": "5cf771bec199180df866a232",
            "resource_id": "5cf3b9b16e5789135f7785a7",
            "resource_type": "post",
            "actor_id": "1",
            "actor_type": "user",
            "event": "edited",
            "context": null,
            "created_at": "2019-06-05T07:39:42.000Z"
          },
          {
            "id": "5cf77304c199180df866a234",
            "resource_id": "5cf3b9b16e5789135f7785a7",
            "resource_type": "post",
            "actor_id": "1",
            "actor_type": "user",
            "event": "edited",
            "context": null,
            "created_at": "2019-06-05T07:45:08.000Z"
          },
          {
            "id": "5cf774cbc199180df866a236",
            "resource_id": "5cf3b9b16e5789135f7785a7",
            "resource_type": "post",
            "actor_id": "1",
            "actor_type": "user",
            "event": "edited",
            "context": null,
            "created_at": "2019-06-05T07:52:43.000Z"
          },
          {
            "id": "5cf774d1c199180df866a238",
            "resource_id": "5cf3b9b16e5789135f7785a7",
            "resource_type": "post",
            "actor_id": "1",
            "actor_type": "user",
            "event": "edited",
            "context": null,
            "created_at": "2019-06-05T07:52:49.000Z"
          },
          {
            "id": "5cf774f8c199180df866a23a",
            "resource_id": "5cf3b9b16e5789135f7785a7",
            "resource_type": "post",
            "actor_id": "1",
            "actor_type": "user",
            "event": "edited",
            "context": null,
            "created_at": "2019-06-05T07:53:28.000Z"
          },
          {
            "id": "5cf776a8c199180df866a23c",
            "resource_id": "5cf3b9b16e5789135f7785a7",
            "resource_type": "post",
            "actor_id": "1",
            "actor_type": "user",
            "event": "edited",
            "context": null,
            "created_at": "2019-06-05T08:00:40.000Z"
          },
          {
            "id": "5cf776aac199180df866a23e",
            "resource_id": "5cf3b9b16e5789135f7785a7",
            "resource_type": "post",
            "actor_id": "1",
            "actor_type": "user",
            "event": "edited",
            "context": null,
            "created_at": "2019-06-05T08:00:42.000Z"
          },
          {
            "id": "5cf78abdc199180df866a240",
            "resource_id": "5cf3b9b16e5789135f7785a7",
            "resource_type": "post",
            "actor_id": "1",
            "actor_type": "user",
            "event": "edited",
            "context": null,
            "created_at": "2019-06-05T09:26:21.000Z"
          },
          {
            "id": "5cf78e9bc199180df866a242",
            "resource_id": "5cf3b9b16e5789135f7785a7",
            "resource_type": "post",
            "actor_id": "1",
            "actor_type": "user",
            "event": "edited",
            "context": null,
            "created_at": "2019-06-05T09:42:51.000Z"
          },
          {
            "id": "5cf78eeac199180df866a244",
            "resource_id": "5cf3b9b16e5789135f7785a7",
            "resource_type": "post",
            "actor_id": "1",
            "actor_type": "user",
            "event": "edited",
            "context": null,
            "created_at": "2019-06-05T09:44:10.000Z"
          },
          {
            "id": "5cf894d2c199180df866a248",
            "resource_id": "5cf3b9b16e5789135f7785a7",
            "resource_type": "post",
            "actor_id": "1",
            "actor_type": "user",
            "event": "edited",
            "context": null,
            "created_at": "2019-06-06T04:21:38.000Z"
          },
          {
            "id": "5cfa53f8c199180df866a24a",
            "resource_id": "5cf3b9b16e5789135f7785a7",
            "resource_type": "post",
            "actor_id": "1",
            "actor_type": "user",
            "event": "edited",
            "context": null,
            "created_at": "2019-06-07T12:09:28.000Z"
          },
          {
            "id": "5cfa563fc199180df866a24c",
            "resource_id": "5cf3b9b16e5789135f7785a7",
            "resource_type": "post",
            "actor_id": "1",
            "actor_type": "user",
            "event": "edited",
            "context": null,
            "created_at": "2019-06-07T12:19:11.000Z"
          },
          {
            "id": "5cfb9783c199180df866a251",
            "resource_id": "5cfb9783c199180df866a24e",
            "resource_type": "post",
            "actor_id": "1",
            "actor_type": "user",
            "event": "added",
            "context": null,
            "created_at": "2019-06-08T11:09:55.000Z"
          },
          {
            "id": "5cfb9789c199180df866a253",
            "resource_id": "5cfb9783c199180df866a24e",
            "resource_type": "post",
            "actor_id": "1",
            "actor_type": "user",
            "event": "edited",
            "context": null,
            "created_at": "2019-06-08T11:10:01.000Z"
          },
          {
            "id": "5cfb978ec199180df866a255",
            "resource_id": "5cfb9783c199180df866a24e",
            "resource_type": "post",
            "actor_id": "1",
            "actor_type": "user",
            "event": "edited",
            "context": null,
            "created_at": "2019-06-08T11:10:06.000Z"
          },
          {
            "id": "5cfb979dc199180df866a257",
            "resource_id": "5cfb9783c199180df866a24e",
            "resource_type": "post",
            "actor_id": "1",
            "actor_type": "user",
            "event": "edited",
            "context": null,
            "created_at": "2019-06-08T11:10:21.000Z"
          },
          {
            "id": "5cfb97a4c199180df866a259",
            "resource_id": "5cfb9783c199180df866a24e",
            "resource_type": "post",
            "actor_id": "1",
            "actor_type": "user",
            "event": "edited",
            "context": null,
            "created_at": "2019-06-08T11:10:28.000Z"
          },
          {
            "id": "5cfb97b7c199180df866a25a",
            "resource_id": "5cfb9783c199180df866a24e",
            "resource_type": "post",
            "actor_id": "1",
            "actor_type": "user",
            "event": "edited",
            "context": null,
            "created_at": "2019-06-08T11:10:47.000Z"
          },
          {
            "id": "5cfb97bdc199180df866a25b",
            "resource_id": "5cfb9783c199180df866a24e",
            "resource_type": "post",
            "actor_id": "1",
            "actor_type": "user",
            "event": "edited",
            "context": null,
            "created_at": "2019-06-08T11:10:53.000Z"
          },
          {
            "id": "5cfb97bfc199180df866a25c",
            "resource_id": "5cfb9783c199180df866a24e",
            "resource_type": "post",
            "actor_id": "1",
            "actor_type": "user",
            "event": "edited",
            "context": null,
            "created_at": "2019-06-08T11:10:55.000Z"
          },
          {
            "id": "5d38474ec199180df866a268",
            "resource_id": "5d38474ec199180df866a265",
            "resource_type": "post",
            "actor_id": "1",
            "actor_type": "user",
            "event": "added",
            "context": null,
            "created_at": "2019-07-24T11:55:58.000Z"
          },
          {
            "id": "5d384764c199180df866a269",
            "resource_id": "5d38474ec199180df866a265",
            "resource_type": "post",
            "actor_id": "1",
            "actor_type": "user",
            "event": "edited",
            "context": null,
            "created_at": "2019-07-24T11:56:20.000Z"
          },
          {
            "id": "5d38479dc199180df866a26a",
            "resource_id": "5d38474ec199180df866a265",
            "resource_type": "post",
            "actor_id": "1",
            "actor_type": "user",
            "event": "edited",
            "context": null,
            "created_at": "2019-07-24T11:57:17.000Z"
          },
          {
            "id": "5d3847b4c199180df866a26b",
            "resource_id": "5d38474ec199180df866a265",
            "resource_type": "post",
            "actor_id": "1",
            "actor_type": "user",
            "event": "edited",
            "context": null,
            "created_at": "2019-07-24T11:57:40.000Z"
          },
          {
            "id": "5d3847c7c199180df866a26c",
            "resource_id": "5d38474ec199180df866a265",
            "resource_type": "post",
            "actor_id": "1",
            "actor_type": "user",
            "event": "edited",
            "context": null,
            "created_at": "2019-07-24T11:57:59.000Z"
          },
          {
            "id": "5d3847d4c199180df866a26d",
            "resource_id": "5d38474ec199180df866a265",
            "resource_type": "post",
            "actor_id": "1",
            "actor_type": "user",
            "event": "edited",
            "context": null,
            "created_at": "2019-07-24T11:58:12.000Z"
          },
          {
            "id": "5d3847d8c199180df866a26e",
            "resource_id": "5d38474ec199180df866a265",
            "resource_type": "post",
            "actor_id": "1",
            "actor_type": "user",
            "event": "edited",
            "context": null,
            "created_at": "2019-07-24T11:58:16.000Z"
          },
          {
            "id": "5d3847f0c199180df866a26f",
            "resource_id": "5d38474ec199180df866a265",
            "resource_type": "post",
            "actor_id": "1",
            "actor_type": "user",
            "event": "edited",
            "context": null,
            "created_at": "2019-07-24T11:58:40.000Z"
          },
          {
            "id": "5d3847f6c199180df866a271",
            "resource_id": "5d38474ec199180df866a265",
            "resource_type": "post",
            "actor_id": "1",
            "actor_type": "user",
            "event": "edited",
            "context": null,
            "created_at": "2019-07-24T11:58:46.000Z"
          }
        ],
        "api_keys": [
          {
            "id": "5cf3b8ef6e5789135f77849f",
            "type": "admin",
            "secret": "c891ca521b229aecd0264fab316a0ec6e6cdbf1d584d454271103331b3b75d7b",
            "role_id": "5cf3b8ed6e5789135f778448",
            "integration_id": "5cf3b8ef6e5789135f77849e",
            "last_seen_at": null,
            "last_seen_version": null,
            "created_at": "2019-06-02T11:54:23.000Z",
            "updated_at": "2019-06-02T11:54:23.000Z"
          },
          {
            "id": "5cf3babc6e5789135f7785c2",
            "type": "content",
            "secret": "68be4d1f19454d3e5ab9fa696e",
            "role_id": null,
            "integration_id": "5cf3babc6e5789135f7785c1",
            "last_seen_at": null,
            "last_seen_version": null,
            "created_at": "2019-06-02T12:02:04.000Z",
            "updated_at": "2019-06-02T12:02:04.000Z"
          },
          {
            "id": "5cf3babc6e5789135f7785c3",
            "type": "admin",
            "secret": "4d9f4360d38a384d39c262ae0afdf2359267cf1e039210201ecdf718ab0ebc06",
            "role_id": "5cf3b8ed6e5789135f778448",
            "integration_id": "5cf3babc6e5789135f7785c1",
            "last_seen_at": null,
            "last_seen_version": null,
            "created_at": "2019-06-02T12:02:04.000Z",
            "updated_at": "2019-06-02T12:02:04.000Z"
          }
        ],
        "app_fields": [],
        "app_settings": [],
        "apps": [],
        "brute": [
          {
            "key": "hlRDlWIfVbcgUI7kQ1sQLN/yCDQ8/5WodUFzeB2P2Cs=",
            "firstRequest": 1564281508413,
            "lastRequest": 1564281526938,
            "lifetime": 1576982326941,
            "count": 3
          },
          {
            "key": "cMihHroQOEbnV3LAy9aQlvKkuK3UOsCPUuktn6opGC4=",
            "firstRequest": 1564281535409,
            "lastRequest": 1564281709596,
            "lifetime": 1576982509597,
            "count": 5
          },
          {
            "key": "rlcfhvtulFYhJZ8630+5wfNdtMEwPavwIP7dZ5beiAw=",
            "firstRequest": 1564281736329,
            "lastRequest": 1564281740781,
            "lifetime": 1576982540784,
            "count": 3
          },
          {
            "key": "TsLiEMmmKVvbPYuRvPz9KUVuXOdOcQsgA2X+I8N2Ey8=",
            "firstRequest": 1567310370009,
            "lastRequest": 1567310370009,
            "lifetime": 1567313970015,
            "count": 1
          }
        ],
        "integrations": [
          {
            "id": "5cf3b8ef6e5789135f77849e",
            "type": "builtin",
            "name": "Zapier",
            "slug": "zapier",
            "icon_image": null,
            "description": "Built-in Zapier integration",
            "created_at": "2019-06-02T11:54:23.000Z",
            "updated_at": "2019-06-02T11:54:23.000Z"
          },
          {
            "id": "5cf3babc6e5789135f7785c1",
            "type": "custom",
            "name": "Search",
            "slug": "search",
            "icon_image": null,
            "description": null,
            "created_at": "2019-06-02T12:02:04.000Z",
            "updated_at": "2019-06-02T12:02:04.000Z"
          }
        ],
        "invites": [],
        "members": [],
        "migrations": [
          {
            "id": 1,
            "name": "1-create-tables.js",
            "version": "init",
            "currentVersion": "2.23"
          },
          {
            "id": 2,
            "name": "2-create-fixtures.js",
            "version": "init",
            "currentVersion": "2.23"
          },
          {
            "id": 3,
            "name": "1-post-excerpt.js",
            "version": "1.3",
            "currentVersion": "2.23"
          },
          {
            "id": 4,
            "name": "1-codeinjection-post.js",
            "version": "1.4",
            "currentVersion": "2.23"
          },
          {
            "id": 5,
            "name": "1-og-twitter-post.js",
            "version": "1.5",
            "currentVersion": "2.23"
          },
          {
            "id": 6,
            "name": "1-add-backup-client.js",
            "version": "1.7",
            "currentVersion": "2.23"
          },
          {
            "id": 7,
            "name": "1-add-permissions-redirect.js",
            "version": "1.9",
            "currentVersion": "2.23"
          },
          {
            "id": 8,
            "name": "1-custom-template-post.js",
            "version": "1.13",
            "currentVersion": "2.23"
          },
          {
            "id": 9,
            "name": "2-theme-permissions.js",
            "version": "1.13",
            "currentVersion": "2.23"
          },
          {
            "id": 10,
            "name": "1-add-webhooks-table.js",
            "version": "1.18",
            "currentVersion": "2.23"
          },
          {
            "id": 11,
            "name": "1-webhook-permissions.js",
            "version": "1.19",
            "currentVersion": "2.23"
          },
          {
            "id": 12,
            "name": "1-remove-settings-keys.js",
            "version": "1.20",
            "currentVersion": "2.23"
          },
          {
            "id": 13,
            "name": "1-add-contributor-role.js",
            "version": "1.21",
            "currentVersion": "2.23"
          },
          {
            "id": 14,
            "name": "1-multiple-authors-DDL.js",
            "version": "1.22",
            "currentVersion": "2.23"
          },
          {
            "id": 15,
            "name": "1-multiple-authors-DML.js",
            "version": "1.22",
            "currentVersion": "2.23"
          },
          {
            "id": 16,
            "name": "1-update-koenig-beta-html.js",
            "version": "1.25",
            "currentVersion": "2.23"
          },
          {
            "id": 17,
            "name": "2-demo-post.js",
            "version": "1.25",
            "currentVersion": "2.23"
          },
          {
            "id": 18,
            "name": "1-rename-amp-column.js",
            "version": "2.0",
            "currentVersion": "2.23"
          },
          {
            "id": 19,
            "name": "2-update-posts.js",
            "version": "2.0",
            "currentVersion": "2.23"
          },
          {
            "id": 20,
            "name": "3-remove-koenig-labs.js",
            "version": "2.0",
            "currentVersion": "2.23"
          },
          {
            "id": 21,
            "name": "4-permalink-setting.js",
            "version": "2.0",
            "currentVersion": "2.23"
          },
          {
            "id": 22,
            "name": "5-remove-demo-post.js",
            "version": "2.0",
            "currentVersion": "2.23"
          },
          {
            "id": 23,
            "name": "6-replace-fixture-posts.js",
            "version": "2.0",
            "currentVersion": "2.23"
          },
          {
            "id": 24,
            "name": "1-add-sessions-table.js",
            "version": "2.2",
            "currentVersion": "2.23"
          },
          {
            "id": 25,
            "name": "2-add-integrations-and-api-key-tables.js",
            "version": "2.2",
            "currentVersion": "2.23"
          },
          {
            "id": 26,
            "name": "3-insert-admin-integration-role.js",
            "version": "2.2",
            "currentVersion": "2.23"
          },
          {
            "id": 27,
            "name": "4-insert-integration-and-api-key-permissions.js",
            "version": "2.2",
            "currentVersion": "2.23"
          },
          {
            "id": 28,
            "name": "5-add-mobiledoc-revisions-table.js",
            "version": "2.2",
            "currentVersion": "2.23"
          },
          {
            "id": 29,
            "name": "1-add-webhook-columns.js",
            "version": "2.3",
            "currentVersion": "2.23"
          },
          {
            "id": 30,
            "name": "2-add-webhook-edit-permission.js",
            "version": "2.3",
            "currentVersion": "2.23"
          },
          {
            "id": 31,
            "name": "1-add-webhook-permission-roles.js",
            "version": "2.6",
            "currentVersion": "2.23"
          },
          {
            "id": 32,
            "name": "1-add-members-table.js",
            "version": "2.8",
            "currentVersion": "2.23"
          },
          {
            "id": 33,
            "name": "1-remove-empty-strings.js",
            "version": "2.13",
            "currentVersion": "2.23"
          },
          {
            "id": 34,
            "name": "1-add-actions-table.js",
            "version": "2.14",
            "currentVersion": "2.23"
          },
          {
            "id": 35,
            "name": "2-add-actions-permissions.js",
            "version": "2.14",
            "currentVersion": "2.23"
          },
          {
            "id": 36,
            "name": "1-add-type-column-to-integrations.js",
            "version": "2.15",
            "currentVersion": "2.23"
          },
          {
            "id": 37,
            "name": "2-insert-zapier-integration.js",
            "version": "2.15",
            "currentVersion": "2.23"
          },
          {
            "id": 38,
            "name": "1-add-members-perrmissions.js",
            "version": "2.16",
            "currentVersion": "2.23"
          },
          {
            "id": 39,
            "name": "1-normalize-settings.js",
            "version": "2.17",
            "currentVersion": "2.23"
          },
          {
            "id": 40,
            "name": "2-posts-add-canonical-url.js",
            "version": "2.17",
            "currentVersion": "2.23"
          },
          {
            "id": 41,
            "name": "1-restore-settings-from-backup.js",
            "version": "2.18",
            "currentVersion": "2.23"
          },
          {
            "id": 42,
            "name": "1-update-editor-permissions.js",
            "version": "2.21",
            "currentVersion": "2.23"
          },
          {
            "id": 43,
            "name": "1-add-member-permissions-to-roles.js",
            "version": "2.22",
            "currentVersion": "2.23"
          }
        ],
        "migrations_lock": [
          {
            "lock_key": "km01",
            "locked": 0,
            "acquired_at": "2019-06-02T11:54:19.000Z",
            "released_at": "2019-06-02T11:54:23.000Z"
          }
        ],
        "mobiledoc_revisions": [
          {
            "id": "5cf774d1c199180df866a237",
            "post_id": "5cf3b9b16e5789135f7785a7",
            "mobiledoc": "{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"记得很久以前爬过评论的API，请求参数是加密过的，调用过程好像有点复杂，后来直接用PyV8调用javascript加密得到参数，但是加密的过程不是很清楚，刚好想找个理由学一学Python，这次就用纯Python写吧。\\n\\n### 1.获取评论 ###\\n\\n进入Chrome开发者模式可以看到\\n\\n![avatar](https://s2.ax1x.com/2019/06/02/VGR8Yj.png)\\n![avatar](https://s2.ax1x.com/2019/06/02/VGWc5Q.png)\\n\\n这个就是获取评论的接口，请求方式是POST，请求体有两个参数params和encSecKey，在请求的Initiator可以看到发出请求的代码在core_xxxx.js这个文件，代码肯定经过混淆，先下载到本地格式化一下。在js文件中搜索encSecKey，找到生成参数的相关代码段，可以看到参数由asrsea这个函数生成。\\n\\n```\\nvar bYc0x = window.asrsea(JSON.stringify(i8a), bkY9P([\\\"流泪\\\", \\\"强\\\"]), bkY9P(VM5R.md), bkY9P([\\\"爱心\\\", \\\"女孩\\\", \\\"惊恐\\\", \\\"大笑\\\"]));\\ne8e.data = k8c.cz9q({\\n    params: bYc0x.encText,\\n    encSecKey: bYc0x.encSecKey\\n})\\n```\\n\\n继续在js文件中搜索这个函数，可以看到生成参数的相关函数\\n\\n```\\nfunction a(a) {\\n    var d, e, b = \\\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\\\",\\n        c = \\\"\\\";\\n    for (d = 0; a > d; d += 1) e = Math.random() * b.length,\\n    e = Math.floor(e),\\n    c += b.charAt(e);\\n    return c\\n}\\n//生成encText，即params\\nfunction b(a, b) {\\n    var c = CryptoJS.enc.Utf8.parse(b),                     //密钥\\n        d = CryptoJS.enc.Utf8.parse(\\\"0102030405060708\\\"),    //初始化向量\\n        e = CryptoJS.enc.Utf8.parse(a),                     //数据\\n        f = CryptoJS.AES.encrypt(e, c, {\\n            iv: d,\\n            mode: CryptoJS.mode.CBC\\n        });\\n    return f.toString()\\n}\\n//生成encSecKey\\nfunction c(a, b, c) {\\n    var d, e;\\n    return setMaxDigits(131),\\n    d = new RSAKeyPair(b, \\\"\\\", c),\\n    e = encryptedString(d, a)\\n}\\n//spider 加密函数\\nfunction d(d, e, f, g) {\\n    var h = {},\\n        i = a(16);  //随机生成一个由a~z,A~Z,0~9组成的长度为a的字符串（AES密钥）\\n    return h.encText = b(d, g),\\n    h.encText = b(h.encText, i),\\n    h.encSecKey = c(i, e, f),\\n    h\\n}\\nfunction e(a, b, d, e) {\\n    var f = {};\\n    return f.encText = c(a + e, b, d),\\n    f\\n}\\nwindow.asrsea = d,\\nwindow.ecnonasr = e\\n```\\n\\nparams的生成过程比较简单，在函数d中可以看到params由两次调用函数b得到：函数b是AES加密的过程，参数a是要加密的数据，参数b是密钥，params经过两次AES加密得到，通过调试可以看到第一次加密：\\n\\n```\\nh.encText = b(d, g)\\n```\\n\\n参数g是固定的：\\n\\n> 0CoJUm6Qyw8W8jud\\n\\n而参数d则是请求参数构成的json字符串，在上面的请求中是：\\n\\n> {\\\"rid\\\":\\\"R_SO_4_1361988914\\\",\\\"offset\\\":\\\"0\\\",\\\"total\\\":\\\"true\\\",\\\"limit\\\":\\\"20\\\",\\\"csrf_token\\\":\\\"\\\"}\\n\\noffset代表获取的第一条评论的偏移量，limit是获取的评论数。\\n\\n第二次加密是使用随机生成的密钥（长度为16）加密第一次加密生成的数据。为了方便测试，在原网页获取随机生成的某密钥以及用这个密钥加密得到的params和encSecKey：\\n\\nkey:\\n\\n> 6lauqIqaJelwkFKM\\n\\nparams:\\n\\n> 1NGJ2rghqo1ToCy5r27rEDqRCNEZxxKk2BvmOQoud6GTNfPZKGRJVFmqfJWeAXYQi4V/++6HKpDjFDfB+TZZ+cmDQF2ywgL9w5Ow8r+mtLG95D7rfUfRkT7GiTn4KMCt+mIM9dtgtIoKXSZ77407F/ZI/GCfslievQ0IfnBAR8SoKQmz8XaQgC1Lxo93VxQ4\\n\\nencSecKey:\\n\\n> 2d1a892a0d7b3101eb00936c4915b2541bc378b58a5ccf6ab3ca939da1fd1fcee7b7456feef0a0d9115c1b5aad8aa64674df8249597e9e74ab66cb5fa84a624f174ed59e786fef748528fff098fa749c11aa06d7d86b7a41d917277efb3f14f8b974ddb2cb5df638ec36d3de8c2f02335cb1990b150a8deafc186c2007dea21c\\n\\n其中AES加密的填充方式是pkcs#7padding，块大小是16 Bytes，加密后的数据默认使用base64编码，根据pkcs#7padding的规则，需要在数据后面添加(16 - n%16)个byte（无论n的长度是否是16的整数倍），且byte的值也为(16 - n%16)。\\n\\n```\\nfrom Crypto.Cipher import AES\\nimport base64\\n\\ndef pkcs7_padding(data):\\n\\tn = 16 - len(data) % 16\\n\\tdata += (chr(n) * n).encode()\\n\\treturn data\\n\\nkey = '0CoJUm6Qyw8W8jud'.encode('utf-8')\\nmode = AES.MODE_CBC\\niv = '0102030405060708'.encode('utf-8')\\n\\naes = AES.new(key, mode, iv)\\n\\ndata = '{\\\"rid\\\":\\\"R_SO_4_1361988914\\\",\\\"offset\\\":\\\"0\\\",\\\"total\\\":\\\"true\\\",\\\"limit\\\":\\\"20\\\",\\\"csrf_token\\\":\\\"\\\"}'.encode('utf-8')\\ndata = pkcs7_padding(data)\\n\\nendata = aes.encrypt(data)\\nendata = base64.b64encode(endata)\\n\\nkey = '6lauqIqaJelwkFKM'.encode('utf-8')\\n\\naes = AES.new(key, mode, iv)\\n\\ndata = pkcs7_padding(endata)\\n\\nendata = aes.encrypt(data)\\nendata = base64.b64encode(endata)\\n\\nprint(endata)\\n```\\n\\n得到的数据与请求中的一致。\\n\\n再分析一下encSecKey的生成过程，在函数d中可以看到encSecKey由函数c生成：函数c将随机生成的密钥（就是上面生成params时AES加密的密钥）经过RSA加密得到encSecKey。\\n关于RSA加密的过程，源代码在这里可以看到:http://www.ohdave.com/rsa\\n\\nRSAKeyPair包括encryptionExponent,decryptionExponent,modulus（分别对应代码中RSAKeyPair函数的三个参数，根据RSA加密的过程：公钥包含两个大整数，n和e，假设要加密的数据是m，则加密后的数据$c ≡ m^e \\\\ (mod \\\\ n)$,这里的e就是encryptionExponent，n就是modulus。\\n\\ne和n两个数应该是固定的（公钥应该不会频繁更换吧），在RSAKeyPair函数打断点得到e和n的值分别是：\\n\\n> 010001\\n\\n和\\n\\n> 00e0b509f6259df8642dbc35662901477df22677ec152b5ff68ace615bb7b725152b3ab17a876aea8a5aa76d2e417629ec4ee341f56135fccf695280104e0312ecbda92557c93870114af6c9d05c4f7f0c3685b7a46bee255932575cce10b424d813cfe4875d3e82047b97ddef52741d546b8e289dc6935b3ece0462db0a22b8e7\\n\\n一开始我尝试直接对数据进行加密：\\n\\n```\\nimport rsa\\nimport binascii\\n\\nrsa_n = int(\\\"00e0b509f6259df8642dbc35662901477df22677ec152b5ff68ace615bb7b725152b3ab17a876aea8a5aa76d2e417629ec4ee341f56135fccf695280104e0312ecbda92557c93870114af6c9d05c4f7f0c3685b7a46bee255932575cce10b424d813cfe4875d3e82047b97ddef52741d546b8e289dc6935b3ece0462db0a22b8e7\\\", 16)\\nrsa_e = int(\\\"010001\\\", 16)\\n\\nkey = rsa.PublicKey(rsa_n, rsa_e)\\ndata = \\\"6lauqIqaJelwkFKM\\\".encode()\\n\\nencrypted_data = rsa.encrypt(data, key)\\nhex_str = binascii.b2a_hex(encrypted_data)\\n\\nprint(hex_str)\\n```\\n\\n尝试请求接口，但是没有返回数据，猜测跟数据转换成的整数有关，回到js代码中加密的代码段看看：\\n\\n```\\nfunction encryptedString(a, b) {\\n    for (var f, g, h, i, j, k, l, c = new Array, d = b.length, e = 0; d > e;) c[e] = b.charCodeAt(e),\\n    e++;\\n    for (; 0 != c.length % a.chunkSize;) c[e++] = 0;\\n    for (f = c.length, g = \\\"\\\", e = 0; f > e; e += a.chunkSize) {\\n        for (j = new BigInt, h = 0, i = e; i < e + a.chunkSize; ++h) {\\n            j.digits[h] = c[i++]\\n            j.digits[h] += c[i++] << 8\\n        }\\n        //j是待加密数据转换后的整数\\n        k = a.barrett.powMod(j, a.e),\\n        l = 16 == a.radix ? biToHex(k) : biToString(k, a.radix),\\n        g += l + \\\" \\\"\\n    }\\n    return g.substring(0, g.length - 1)\\n}\\n```\\n\\n在本地测试输出j的值：\\n\\n```\\nconsole.log(biToHex(j))\\n```\\n\\n对这个值进行加密：\\n\\n```\\nhex_str = '4d4b466b776c654a6171497175616c36'\\nrsa_m = int(hex_str, 16)\\n\\nrsa_c = rsa.core.encrypt_int(rsa_m, rsa_e, rsa_n)\\n\\nprint(hex(rsa_c))\\n```\\n\\n这次得到的数据跟请求中的参数一致（RSA加密生成的数据可能每次都不一样，跟填充方式有关），查阅RSA相关的资料知道算法是在固定长度的块上面进行操作，如果数据长度大于块大小要分割，小于要填充，根据上面的代码，这里的填充方式是直接在后面补'\\\\0'，加密时对每块进行加密，生成的数据之间用空格隔开，至于块大小怎么确定暂时不知道，先不管。\\n为了了解数据是怎么转换成整数的，需要了解BigInt的结构，通过调试可以知道BigInt包含一个数组，观察上面的代码可以知道数据转换成BigInt的过程是把每两个的字符的ascii码值逆序存放到数组的一个元素中，例如字符串：\\\"cd\\\",写成二进制的形式是：\\n\\n> 0110 0011 / 0010 0100\\n\\n放到BigInt中是：\\n\\n> 0010 0100 0110 0011\\n\\n接下来看看BigInt是怎么转换成整数的，找到BigInt转Hex的函数（因为这个函数最简单2333）：\\n\\n```\\nfunction reverseStr(a) {\\n    var c, b = \\\"\\\";\\n    for (c = a.length - 1; c > -1; --c) b += a.charAt(c);\\n    return b\\n}\\nfunction digitToHex(a) {\\n    var b = 15,\\n        c = \\\"\\\";\\n    for (i = 0; 4 > i; ++i) c += hexToChar[a & b],\\n    a >>>= 4;\\n    return reverseStr(c)\\n}\\nfunction biToHex(a) {\\n    var d, b = \\\"\\\";\\n    for (biHighIndex(a), d = biHighIndex(a); d > -1; --d) b += digitToHex(a.digits[d]);\\n    return\\n```\\n\\n这个函数逆序对BigInt的数组元素进行如下操作：从低位开始每4个二进制位转对应的16进制，并逆序输出。\\n所以数据转整数的整个过程其实就是把数据以小端方式存储（跟直接加密的区别就在于大端和小端），例如字符串\\\"cdef\\\"：\\n\\n0110 0011 / 0010 0100 / 0110 0101 / 0110 0110\\n\\n转换成小端：\\n\\n0110 0110 / 0110 0101 / 0010 0100 / 0110 0011\\n\\n转换成16进制就是：\\n\\n0x66656463\\n\\n测试一下：\\n\\n```\\ntable = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f']\\n\\ndata = \\\"6lauqIqaJelwkFKM\\\".encode()\\nhex_str = ''\\n\\nfor i in range(len(data) - 1, -1, -1):\\n\\thex_str += table[(data[i] & 0xf0) >> 4]\\n\\thex_str += table[data[i] & 0xf]\\n\\nrsa_m = int(hex_str, 16)\\n\\nrsa_c = rsa.core.encrypt_int(rsa_m, rsa_e, rsa_n)\\n\\nprint(hex(rsa_c))\\n```\\n\\n这次得到的结果与请求参数的一致，再次发送请求已经可以获取到数据了。\\n\\n![avatar](https://s2.ax1x.com/2019/06/04/VYLrZQ.png)\\n\\n（看了文档才知道白折腾了。。。文档里面有说明是逆序的）\\n![avatar](https://s2.ax1x.com/2019/06/04/VYxdHO.png)\\n\\n经过上面的分析可以大概得出请求的流程：前端先把请求的参数包装成json字符串，使用一个固定的密钥加密得到第一次加密的数据，再使用随机生成的密钥加密第一次加密生成的数据最终得到传递给服务器的参数，接着加密随机生成的密钥传递给服务器。服务器端用私钥解密得到前端随机生成的密钥，再用这个密钥对加密过的参数解密，经过两次解密最终得到参数。\\n\\n关于csrf_token参数，这个是用户登录以后才会有的，之后可能会补充更新一下这部分的接口，另外如果用postman之类的工具请求接口好像直接把参数放在query部分才行，一开始放到post body获取不到数据。\\n\\n最后把获取评论的接口贴一下：\\n\\nurl: https://music.163.com/weapi/v1/resource/comments/ID\\nmethod: POST\\nquery: csrf_token\\nparams: ID(string), offset(int), limit(int), total(boolean), csrf_token(string)\\n\\n当请求歌曲评论时，ID的格式是R_SO_4_ + 歌曲ID。\\n歌单：A_PL_0 + 歌单ID。\\n电台：A_DJ_1 + 电台ID\\n\\n其他类型的评论ID可以在开发者模式下获取相应请求url得到。\\n\\n### 2.获取歌词 ###\\n\\n通过上面的分析已经得到参数加密的方法，所以我们只需要知道请求这个接口都有什么参数就可以了。\\n\\nexample:\\n\\n> {\\\"id\\\":\\\"1361988914\\\",\\\"lv\\\":-1,\\\"tv\\\":-1,\\\"csrf_token\\\":\\\"\\\"}\\n\\nurl: https://music.163.com/weapi/song/lyric\\nmethod: POST\\nquery: csrf_token\\nparams: ID(int), lv(int), lv(int), csrf_token(string)\\n\\n### 3.获取播放列表 ###\\n\\n\\n\\n### 4.搜索 ###\\n\\n#### 4.1 推荐 ####\\n\\nexample：\\n\\n> {\\\"s\\\":\\\"陈奕迅\\\",\\\"limit\\\":\\\"8\\\",\\\"csrf_token\\\":\\\"\\\"}\\n\\nurl: https://music.163.com/weapi/cloudsearch/get/web\\nmethod: POST\\nquery: csrf_token\\nparams: s(string), limit(int), csrf_token(string)\\n\\n#### 4.2 各种搜索 ####\\n\\nexample:\\n\\n> {\\\"hlpretag\\\":\\\"<span class=\\\\\\\"s-fc7\\\\\\\">\\\",\\\"hlposttag\\\":\\\"</span>\\\",\\\"s\\\":\\\"陈奕迅\\\",\\\"type\\\":\\\"1\\\",\\\"offset\\\":\\\"0\\\",\\\"total\\\":\\\"true\\\",\\\"limit\\\":\\\"30\\\",\\\"csrf_token\\\":\\\"\\\"}\\n\\n前面hlpretag和hlposttag暂时不知道作用是什么，可以不加进去，如果要加进去加密的时候记得要把转义符号也当成字符串的一部分，在python中可以在字符串前面加r表示raw string。\\n其中type是搜索的类型：\\n1 歌曲\\n10 专辑\\n100 歌手\\n1000 歌单\\n1002 用户\\n1006 歌词\\n1009 电台\\n1014 视频\\n其他的参数比较明显就不细说了。\\n\\nurl: https://music.163.com/weapi/cloudsearch/get/web\\nmethod: POST\\nquery: csrf_token\\nparams: s(string), type(int), offset(int), total(int), limit(int), csrf_token(string)\\n\\n<script src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/latest.js?config=TeX-MML-AM_CHTML' async>\\n</script>\\n<script type=\\\"text/x-mathjax-config\\\">\\n    MathJax.Hub.Config({\\n    tex2jax: {inlineMath: [['$','$'], ['\\\\\\\\(','\\\\\\\\)']]}\\n    });\\n</script>\\n\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]]}",
            "created_at_ts": 1559721169732,
            "created_at": "2019-06-05T07:52:49.000Z"
          },
          {
            "id": "5cf774f8c199180df866a239",
            "post_id": "5cf3b9b16e5789135f7785a7",
            "mobiledoc": "{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"记得很久以前爬过评论的API，请求参数是加密过的，调用过程好像有点复杂，后来直接用PyV8调用javascript加密得到参数，但是加密的过程不是很清楚，刚好想找个理由学一学Python，这次就用纯Python写吧。\\n\\n先随便选一个接口分析一下，就选评论接口吧。\\n\\n### 1.获取评论 ###\\n\\n进入Chrome开发者模式可以看到\\n\\n![avatar](https://s2.ax1x.com/2019/06/02/VGR8Yj.png)\\n![avatar](https://s2.ax1x.com/2019/06/02/VGWc5Q.png)\\n\\n这个就是获取评论的接口，请求方式是POST，请求体有两个参数params和encSecKey，在请求的Initiator可以看到发出请求的代码在core_xxxx.js这个文件，代码肯定经过混淆，先下载到本地格式化一下。在js文件中搜索encSecKey，找到生成参数的相关代码段，可以看到参数由asrsea这个函数生成。\\n\\n```\\nvar bYc0x = window.asrsea(JSON.stringify(i8a), bkY9P([\\\"流泪\\\", \\\"强\\\"]), bkY9P(VM5R.md), bkY9P([\\\"爱心\\\", \\\"女孩\\\", \\\"惊恐\\\", \\\"大笑\\\"]));\\ne8e.data = k8c.cz9q({\\n    params: bYc0x.encText,\\n    encSecKey: bYc0x.encSecKey\\n})\\n```\\n\\n继续在js文件中搜索这个函数，可以看到生成参数的相关函数\\n\\n```\\nfunction a(a) {\\n    var d, e, b = \\\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\\\",\\n        c = \\\"\\\";\\n    for (d = 0; a > d; d += 1) e = Math.random() * b.length,\\n    e = Math.floor(e),\\n    c += b.charAt(e);\\n    return c\\n}\\n//生成encText，即params\\nfunction b(a, b) {\\n    var c = CryptoJS.enc.Utf8.parse(b),                     //密钥\\n        d = CryptoJS.enc.Utf8.parse(\\\"0102030405060708\\\"),    //初始化向量\\n        e = CryptoJS.enc.Utf8.parse(a),                     //数据\\n        f = CryptoJS.AES.encrypt(e, c, {\\n            iv: d,\\n            mode: CryptoJS.mode.CBC\\n        });\\n    return f.toString()\\n}\\n//生成encSecKey\\nfunction c(a, b, c) {\\n    var d, e;\\n    return setMaxDigits(131),\\n    d = new RSAKeyPair(b, \\\"\\\", c),\\n    e = encryptedString(d, a)\\n}\\n//spider 加密函数\\nfunction d(d, e, f, g) {\\n    var h = {},\\n        i = a(16);  //随机生成一个由a~z,A~Z,0~9组成的长度为a的字符串（AES密钥）\\n    return h.encText = b(d, g),\\n    h.encText = b(h.encText, i),\\n    h.encSecKey = c(i, e, f),\\n    h\\n}\\nfunction e(a, b, d, e) {\\n    var f = {};\\n    return f.encText = c(a + e, b, d),\\n    f\\n}\\nwindow.asrsea = d,\\nwindow.ecnonasr = e\\n```\\n\\nparams的生成过程比较简单，在函数d中可以看到params由两次调用函数b得到：函数b是AES加密的过程，参数a是要加密的数据，参数b是密钥，params经过两次AES加密得到，通过调试可以看到第一次加密：\\n\\n```\\nh.encText = b(d, g)\\n```\\n\\n参数g是固定的：\\n\\n> 0CoJUm6Qyw8W8jud\\n\\n而参数d则是请求参数构成的json字符串，在上面的请求中是：\\n\\n> {\\\"rid\\\":\\\"R_SO_4_1361988914\\\",\\\"offset\\\":\\\"0\\\",\\\"total\\\":\\\"true\\\",\\\"limit\\\":\\\"20\\\",\\\"csrf_token\\\":\\\"\\\"}\\n\\noffset代表获取的第一条评论的偏移量，limit是获取的评论数。\\n\\n第二次加密是使用随机生成的密钥（长度为16）加密第一次加密生成的数据。为了方便测试，在原网页获取随机生成的某密钥以及用这个密钥加密得到的params和encSecKey：\\n\\nkey:\\n\\n> 6lauqIqaJelwkFKM\\n\\nparams:\\n\\n> 1NGJ2rghqo1ToCy5r27rEDqRCNEZxxKk2BvmOQoud6GTNfPZKGRJVFmqfJWeAXYQi4V/++6HKpDjFDfB+TZZ+cmDQF2ywgL9w5Ow8r+mtLG95D7rfUfRkT7GiTn4KMCt+mIM9dtgtIoKXSZ77407F/ZI/GCfslievQ0IfnBAR8SoKQmz8XaQgC1Lxo93VxQ4\\n\\nencSecKey:\\n\\n> 2d1a892a0d7b3101eb00936c4915b2541bc378b58a5ccf6ab3ca939da1fd1fcee7b7456feef0a0d9115c1b5aad8aa64674df8249597e9e74ab66cb5fa84a624f174ed59e786fef748528fff098fa749c11aa06d7d86b7a41d917277efb3f14f8b974ddb2cb5df638ec36d3de8c2f02335cb1990b150a8deafc186c2007dea21c\\n\\n其中AES加密的填充方式是pkcs#7padding，块大小是16 Bytes，加密后的数据默认使用base64编码，根据pkcs#7padding的规则，需要在数据后面添加(16 - n%16)个byte（无论n的长度是否是16的整数倍），且byte的值也为(16 - n%16)。\\n\\n```\\nfrom Crypto.Cipher import AES\\nimport base64\\n\\ndef pkcs7_padding(data):\\n\\tn = 16 - len(data) % 16\\n\\tdata += (chr(n) * n).encode()\\n\\treturn data\\n\\nkey = '0CoJUm6Qyw8W8jud'.encode('utf-8')\\nmode = AES.MODE_CBC\\niv = '0102030405060708'.encode('utf-8')\\n\\naes = AES.new(key, mode, iv)\\n\\ndata = '{\\\"rid\\\":\\\"R_SO_4_1361988914\\\",\\\"offset\\\":\\\"0\\\",\\\"total\\\":\\\"true\\\",\\\"limit\\\":\\\"20\\\",\\\"csrf_token\\\":\\\"\\\"}'.encode('utf-8')\\ndata = pkcs7_padding(data)\\n\\nendata = aes.encrypt(data)\\nendata = base64.b64encode(endata)\\n\\nkey = '6lauqIqaJelwkFKM'.encode('utf-8')\\n\\naes = AES.new(key, mode, iv)\\n\\ndata = pkcs7_padding(endata)\\n\\nendata = aes.encrypt(data)\\nendata = base64.b64encode(endata)\\n\\nprint(endata)\\n```\\n\\n得到的数据与请求中的一致。\\n\\n再分析一下encSecKey的生成过程，在函数d中可以看到encSecKey由函数c生成：函数c将随机生成的密钥（就是上面生成params时AES加密的密钥）经过RSA加密得到encSecKey。\\n关于RSA加密的过程，源代码在这里可以看到:http://www.ohdave.com/rsa\\n\\nRSAKeyPair包括encryptionExponent,decryptionExponent,modulus（分别对应代码中RSAKeyPair函数的三个参数，根据RSA加密的过程：公钥包含两个大整数，n和e，假设要加密的数据是m，则加密后的数据$c ≡ m^e \\\\ (mod \\\\ n)$,这里的e就是encryptionExponent，n就是modulus。\\n\\ne和n两个数应该是固定的（公钥应该不会频繁更换吧），在RSAKeyPair函数打断点得到e和n的值分别是：\\n\\n> 010001\\n\\n和\\n\\n> 00e0b509f6259df8642dbc35662901477df22677ec152b5ff68ace615bb7b725152b3ab17a876aea8a5aa76d2e417629ec4ee341f56135fccf695280104e0312ecbda92557c93870114af6c9d05c4f7f0c3685b7a46bee255932575cce10b424d813cfe4875d3e82047b97ddef52741d546b8e289dc6935b3ece0462db0a22b8e7\\n\\n一开始我尝试直接对数据进行加密：\\n\\n```\\nimport rsa\\nimport binascii\\n\\nrsa_n = int(\\\"00e0b509f6259df8642dbc35662901477df22677ec152b5ff68ace615bb7b725152b3ab17a876aea8a5aa76d2e417629ec4ee341f56135fccf695280104e0312ecbda92557c93870114af6c9d05c4f7f0c3685b7a46bee255932575cce10b424d813cfe4875d3e82047b97ddef52741d546b8e289dc6935b3ece0462db0a22b8e7\\\", 16)\\nrsa_e = int(\\\"010001\\\", 16)\\n\\nkey = rsa.PublicKey(rsa_n, rsa_e)\\ndata = \\\"6lauqIqaJelwkFKM\\\".encode()\\n\\nencrypted_data = rsa.encrypt(data, key)\\nhex_str = binascii.b2a_hex(encrypted_data)\\n\\nprint(hex_str)\\n```\\n\\n尝试请求接口，但是没有返回数据，猜测跟数据转换成的整数有关，回到js代码中加密的代码段看看：\\n\\n```\\nfunction encryptedString(a, b) {\\n    for (var f, g, h, i, j, k, l, c = new Array, d = b.length, e = 0; d > e;) c[e] = b.charCodeAt(e),\\n    e++;\\n    for (; 0 != c.length % a.chunkSize;) c[e++] = 0;\\n    for (f = c.length, g = \\\"\\\", e = 0; f > e; e += a.chunkSize) {\\n        for (j = new BigInt, h = 0, i = e; i < e + a.chunkSize; ++h) {\\n            j.digits[h] = c[i++]\\n            j.digits[h] += c[i++] << 8\\n        }\\n        //j是待加密数据转换后的整数\\n        k = a.barrett.powMod(j, a.e),\\n        l = 16 == a.radix ? biToHex(k) : biToString(k, a.radix),\\n        g += l + \\\" \\\"\\n    }\\n    return g.substring(0, g.length - 1)\\n}\\n```\\n\\n在本地测试输出j的值：\\n\\n```\\nconsole.log(biToHex(j))\\n```\\n\\n对这个值进行加密：\\n\\n```\\nhex_str = '4d4b466b776c654a6171497175616c36'\\nrsa_m = int(hex_str, 16)\\n\\nrsa_c = rsa.core.encrypt_int(rsa_m, rsa_e, rsa_n)\\n\\nprint(hex(rsa_c))\\n```\\n\\n这次得到的数据跟请求中的参数一致（RSA加密生成的数据可能每次都不一样，跟填充方式有关），查阅RSA相关的资料知道算法是在固定长度的块上面进行操作，如果数据长度大于块大小要分割，小于要填充，根据上面的代码，这里的填充方式是直接在后面补'\\\\0'，加密时对每块进行加密，生成的数据之间用空格隔开，至于块大小怎么确定暂时不知道，先不管。\\n为了了解数据是怎么转换成整数的，需要了解BigInt的结构，通过调试可以知道BigInt包含一个数组，观察上面的代码可以知道数据转换成BigInt的过程是把每两个的字符的ascii码值逆序存放到数组的一个元素中，例如字符串：\\\"cd\\\",写成二进制的形式是：\\n\\n> 0110 0011 / 0010 0100\\n\\n放到BigInt中是：\\n\\n> 0010 0100 0110 0011\\n\\n接下来看看BigInt是怎么转换成整数的，找到BigInt转Hex的函数（因为这个函数最简单2333）：\\n\\n```\\nfunction reverseStr(a) {\\n    var c, b = \\\"\\\";\\n    for (c = a.length - 1; c > -1; --c) b += a.charAt(c);\\n    return b\\n}\\nfunction digitToHex(a) {\\n    var b = 15,\\n        c = \\\"\\\";\\n    for (i = 0; 4 > i; ++i) c += hexToChar[a & b],\\n    a >>>= 4;\\n    return reverseStr(c)\\n}\\nfunction biToHex(a) {\\n    var d, b = \\\"\\\";\\n    for (biHighIndex(a), d = biHighIndex(a); d > -1; --d) b += digitToHex(a.digits[d]);\\n    return\\n```\\n\\n这个函数逆序对BigInt的数组元素进行如下操作：从低位开始每4个二进制位转对应的16进制，并逆序输出。\\n所以数据转整数的整个过程其实就是把数据以小端方式存储（跟直接加密的区别就在于大端和小端），例如字符串\\\"cdef\\\"：\\n\\n0110 0011 / 0010 0100 / 0110 0101 / 0110 0110\\n\\n转换成小端：\\n\\n0110 0110 / 0110 0101 / 0010 0100 / 0110 0011\\n\\n转换成16进制就是：\\n\\n0x66656463\\n\\n测试一下：\\n\\n```\\ntable = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f']\\n\\ndata = \\\"6lauqIqaJelwkFKM\\\".encode()\\nhex_str = ''\\n\\nfor i in range(len(data) - 1, -1, -1):\\n\\thex_str += table[(data[i] & 0xf0) >> 4]\\n\\thex_str += table[data[i] & 0xf]\\n\\nrsa_m = int(hex_str, 16)\\n\\nrsa_c = rsa.core.encrypt_int(rsa_m, rsa_e, rsa_n)\\n\\nprint(hex(rsa_c))\\n```\\n\\n这次得到的结果与请求参数的一致，再次发送请求已经可以获取到数据了。\\n\\n![avatar](https://s2.ax1x.com/2019/06/04/VYLrZQ.png)\\n\\n（看了文档才知道白折腾了。。。文档里面有说明是逆序的）\\n![avatar](https://s2.ax1x.com/2019/06/04/VYxdHO.png)\\n\\n经过上面的分析可以大概得出请求的流程：前端先把请求的参数包装成json字符串，使用一个固定的密钥加密得到第一次加密的数据，再使用随机生成的密钥加密第一次加密生成的数据最终得到传递给服务器的参数，接着加密随机生成的密钥传递给服务器。服务器端用私钥解密得到前端随机生成的密钥，再用这个密钥对加密过的参数解密，经过两次解密最终得到参数。\\n\\n关于csrf_token参数，这个是用户登录以后才会有的，之后可能会补充更新一下这部分的接口，另外如果用postman之类的工具请求接口好像直接把参数放在query部分才行，一开始放到post body获取不到数据。\\n\\n最后把获取评论的接口贴一下：\\n\\nurl: https://music.163.com/weapi/v1/resource/comments/ID\\nmethod: POST\\nquery: csrf_token\\nparams: ID(string), offset(int), limit(int), total(boolean), csrf_token(string)\\n\\n当请求歌曲评论时，ID的格式是R_SO_4_ + 歌曲ID。\\n歌单：A_PL_0 + 歌单ID。\\n电台：A_DJ_1 + 电台ID\\n\\n其他类型的评论ID可以在开发者模式下获取相应请求url得到。\\n\\n### 2.获取歌词 ###\\n\\n通过上面的分析已经得到参数加密的方法，所以我们只需要知道请求这个接口都有什么参数就可以了。\\n\\nexample:\\n\\n> {\\\"id\\\":\\\"1361988914\\\",\\\"lv\\\":-1,\\\"tv\\\":-1,\\\"csrf_token\\\":\\\"\\\"}\\n\\nurl: https://music.163.com/weapi/song/lyric\\nmethod: POST\\nquery: csrf_token\\nparams: ID(int), lv(int), lv(int), csrf_token(string)\\n\\n### 3.获取播放列表 ###\\n\\n\\n\\n### 4.搜索 ###\\n\\n#### 4.1 推荐 ####\\n\\nexample：\\n\\n> {\\\"s\\\":\\\"陈奕迅\\\",\\\"limit\\\":\\\"8\\\",\\\"csrf_token\\\":\\\"\\\"}\\n\\nurl: https://music.163.com/weapi/cloudsearch/get/web\\nmethod: POST\\nquery: csrf_token\\nparams: s(string), limit(int), csrf_token(string)\\n\\n#### 4.2 各种搜索 ####\\n\\nexample:\\n\\n> {\\\"hlpretag\\\":\\\"<span class=\\\\\\\"s-fc7\\\\\\\">\\\",\\\"hlposttag\\\":\\\"</span>\\\",\\\"s\\\":\\\"陈奕迅\\\",\\\"type\\\":\\\"1\\\",\\\"offset\\\":\\\"0\\\",\\\"total\\\":\\\"true\\\",\\\"limit\\\":\\\"30\\\",\\\"csrf_token\\\":\\\"\\\"}\\n\\n前面hlpretag和hlposttag暂时不知道作用是什么，可以不加进去，如果要加进去加密的时候记得要把转义符号也当成字符串的一部分，在python中可以在字符串前面加r表示raw string。\\n其中type是搜索的类型：\\n1 歌曲\\n10 专辑\\n100 歌手\\n1000 歌单\\n1002 用户\\n1006 歌词\\n1009 电台\\n1014 视频\\n其他的参数比较明显就不细说了。\\n\\nurl: https://music.163.com/weapi/cloudsearch/get/web\\nmethod: POST\\nquery: csrf_token\\nparams: s(string), type(int), offset(int), total(int), limit(int), csrf_token(string)\\n\\n<script src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/latest.js?config=TeX-MML-AM_CHTML' async>\\n</script>\\n<script type=\\\"text/x-mathjax-config\\\">\\n    MathJax.Hub.Config({\\n    tex2jax: {inlineMath: [['$','$'], ['\\\\\\\\(','\\\\\\\\)']]}\\n    });\\n</script>\\n\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]]}",
            "created_at_ts": 1559721208253,
            "created_at": "2019-06-05T07:53:28.000Z"
          },
          {
            "id": "5cf776a8c199180df866a23b",
            "post_id": "5cf3b9b16e5789135f7785a7",
            "mobiledoc": "{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"记得很久以前爬过评论的API，请求参数是加密过的，调用过程好像有点复杂，后来直接用PyV8调用javascript加密得到参数，但是加密的过程不是很清楚，刚好想找个理由学一学Python，这次就用纯Python写吧。\\n\\n先随便选一个接口分析一下，就选评论接口吧。\\n\\n### 1.获取评论 ###\\n\\n进入Chrome开发者模式可以看到\\n\\n![avatar](https://s2.ax1x.com/2019/06/02/VGR8Yj.png)\\n![avatar](https://s2.ax1x.com/2019/06/02/VGWc5Q.png)\\n\\n这个就是获取评论的接口，请求方式是POST，请求体有两个参数params和encSecKey，在请求的Initiator可以看到发出请求的代码在core_xxxx.js这个文件，代码肯定经过混淆，先下载到本地格式化一下。在js文件中搜索encSecKey，找到生成参数的相关代码段，可以看到参数由asrsea这个函数生成。\\n\\n```\\nvar bYc0x = window.asrsea(JSON.stringify(i8a), bkY9P([\\\"流泪\\\", \\\"强\\\"]), bkY9P(VM5R.md), bkY9P([\\\"爱心\\\", \\\"女孩\\\", \\\"惊恐\\\", \\\"大笑\\\"]));\\ne8e.data = k8c.cz9q({\\n    params: bYc0x.encText,\\n    encSecKey: bYc0x.encSecKey\\n})\\n```\\n\\n继续在js文件中搜索这个函数，可以看到生成参数的相关函数\\n\\n```\\nfunction a(a) {\\n    var d, e, b = \\\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\\\",\\n        c = \\\"\\\";\\n    for (d = 0; a > d; d += 1) e = Math.random() * b.length,\\n    e = Math.floor(e),\\n    c += b.charAt(e);\\n    return c\\n}\\n//生成encText，即params\\nfunction b(a, b) {\\n    var c = CryptoJS.enc.Utf8.parse(b),                     //密钥\\n        d = CryptoJS.enc.Utf8.parse(\\\"0102030405060708\\\"),    //初始化向量\\n        e = CryptoJS.enc.Utf8.parse(a),                     //数据\\n        f = CryptoJS.AES.encrypt(e, c, {\\n            iv: d,\\n            mode: CryptoJS.mode.CBC\\n        });\\n    return f.toString()\\n}\\n//生成encSecKey\\nfunction c(a, b, c) {\\n    var d, e;\\n    return setMaxDigits(131),\\n    d = new RSAKeyPair(b, \\\"\\\", c),\\n    e = encryptedString(d, a)\\n}\\n//spider 加密函数\\nfunction d(d, e, f, g) {\\n    var h = {},\\n        i = a(16);  //随机生成一个由a~z,A~Z,0~9组成的长度为a的字符串（AES密钥）\\n    return h.encText = b(d, g),\\n    h.encText = b(h.encText, i),\\n    h.encSecKey = c(i, e, f),\\n    h\\n}\\nfunction e(a, b, d, e) {\\n    var f = {};\\n    return f.encText = c(a + e, b, d),\\n    f\\n}\\nwindow.asrsea = d,\\nwindow.ecnonasr = e\\n```\\n\\nparams的生成过程比较简单，在函数d中可以看到params由两次调用函数b得到：函数b是AES加密的过程，参数a是要加密的数据，参数b是密钥，params经过两次AES加密得到，通过调试可以看到第一次加密：\\n\\n```\\nh.encText = b(d, g)\\n```\\n\\n参数g是固定的：\\n\\n> 0CoJUm6Qyw8W8jud\\n\\n而参数d则是请求参数构成的json字符串，在上面的请求中是：\\n\\n> {\\\"rid\\\":\\\"R_SO_4_1361988914\\\",\\\"offset\\\":\\\"0\\\",\\\"total\\\":\\\"true\\\",\\\"limit\\\":\\\"20\\\",\\\"csrf_token\\\":\\\"\\\"}\\n\\noffset代表获取的第一条评论的偏移量，limit是获取的评论数。\\n\\n第二次加密是使用随机生成的密钥（长度为16）加密第一次加密生成的数据。为了方便测试，在原网页获取随机生成的某密钥以及用这个密钥加密得到的params和encSecKey：\\n\\nkey:\\n\\n> 6lauqIqaJelwkFKM\\n\\nparams:\\n\\n> 1NGJ2rghqo1ToCy5r27rEDqRCNEZxxKk2BvmOQoud6GTNfPZKGRJVFmqfJWeAXYQi4V/++6HKpDjFDfB+TZZ+cmDQF2ywgL9w5Ow8r+mtLG95D7rfUfRkT7GiTn4KMCt+mIM9dtgtIoKXSZ77407F/ZI/GCfslievQ0IfnBAR8SoKQmz8XaQgC1Lxo93VxQ4\\n\\nencSecKey:\\n\\n> 2d1a892a0d7b3101eb00936c4915b2541bc378b58a5ccf6ab3ca939da1fd1fcee7b7456feef0a0d9115c1b5aad8aa64674df8249597e9e74ab66cb5fa84a624f174ed59e786fef748528fff098fa749c11aa06d7d86b7a41d917277efb3f14f8b974ddb2cb5df638ec36d3de8c2f02335cb1990b150a8deafc186c2007dea21c\\n\\n其中AES加密的填充方式是pkcs#7padding，块大小是16 Bytes，加密后的数据默认使用base64编码，根据pkcs#7padding的规则，需要在数据后面添加(16 - n%16)个byte（无论n的长度是否是16的整数倍），且byte的值也为(16 - n%16)。\\n\\n```\\nfrom Crypto.Cipher import AES\\nimport base64\\n\\ndef pkcs7_padding(data):\\n\\tn = 16 - len(data) % 16\\n\\tdata += (chr(n) * n).encode()\\n\\treturn data\\n\\nkey = '0CoJUm6Qyw8W8jud'.encode('utf-8')\\nmode = AES.MODE_CBC\\niv = '0102030405060708'.encode('utf-8')\\n\\naes = AES.new(key, mode, iv)\\n\\ndata = '{\\\"rid\\\":\\\"R_SO_4_1361988914\\\",\\\"offset\\\":\\\"0\\\",\\\"total\\\":\\\"true\\\",\\\"limit\\\":\\\"20\\\",\\\"csrf_token\\\":\\\"\\\"}'.encode('utf-8')\\ndata = pkcs7_padding(data)\\n\\nendata = aes.encrypt(data)\\nendata = base64.b64encode(endata)\\n\\nkey = '6lauqIqaJelwkFKM'.encode('utf-8')\\n\\naes = AES.new(key, mode, iv)\\n\\ndata = pkcs7_padding(endata)\\n\\nendata = aes.encrypt(data)\\nendata = base64.b64encode(endata)\\n\\nprint(endata)\\n```\\n\\n得到的数据与请求中的一致。\\n\\n再分析一下encSecKey的生成过程，在函数d中可以看到encSecKey由函数c生成：函数c将随机生成的密钥（就是上面生成params时AES加密的密钥）经过RSA加密得到encSecKey。\\n关于RSA加密的过程，源代码在这里可以看到:http://www.ohdave.com/rsa\\n\\nRSAKeyPair包括encryptionExponent,decryptionExponent,modulus（分别对应代码中RSAKeyPair函数的三个参数，根据RSA加密的过程：公钥包含两个大整数，n和e，假设要加密的数据是m，则加密后的数据$c ≡ m^e \\\\ (mod \\\\ n)$,这里的e就是encryptionExponent，n就是modulus。\\n\\ne和n两个数应该是固定的（公钥应该不会频繁更换吧），在RSAKeyPair函数打断点得到e和n的值分别是：\\n\\n> 010001\\n\\n和\\n\\n> 00e0b509f6259df8642dbc35662901477df22677ec152b5ff68ace615bb7b725152b3ab17a876aea8a5aa76d2e417629ec4ee341f56135fccf695280104e0312ecbda92557c93870114af6c9d05c4f7f0c3685b7a46bee255932575cce10b424d813cfe4875d3e82047b97ddef52741d546b8e289dc6935b3ece0462db0a22b8e7\\n\\n一开始我尝试直接对数据进行加密：\\n\\n```\\nimport rsa\\nimport binascii\\n\\nrsa_n = int(\\\"00e0b509f6259df8642dbc35662901477df22677ec152b5ff68ace615bb7b725152b3ab17a876aea8a5aa76d2e417629ec4ee341f56135fccf695280104e0312ecbda92557c93870114af6c9d05c4f7f0c3685b7a46bee255932575cce10b424d813cfe4875d3e82047b97ddef52741d546b8e289dc6935b3ece0462db0a22b8e7\\\", 16)\\nrsa_e = int(\\\"010001\\\", 16)\\n\\nkey = rsa.PublicKey(rsa_n, rsa_e)\\ndata = \\\"6lauqIqaJelwkFKM\\\".encode()\\n\\nencrypted_data = rsa.encrypt(data, key)\\nhex_str = binascii.b2a_hex(encrypted_data)\\n\\nprint(hex_str)\\n```\\n\\n尝试请求接口，但是没有返回数据，猜测跟数据转换成的整数有关，回到js代码中加密的代码段看看：\\n\\n```\\nfunction encryptedString(a, b) {\\n    for (var f, g, h, i, j, k, l, c = new Array, d = b.length, e = 0; d > e;) c[e] = b.charCodeAt(e),\\n    e++;\\n    for (; 0 != c.length % a.chunkSize;) c[e++] = 0;\\n    for (f = c.length, g = \\\"\\\", e = 0; f > e; e += a.chunkSize) {\\n        for (j = new BigInt, h = 0, i = e; i < e + a.chunkSize; ++h) {\\n            j.digits[h] = c[i++]\\n            j.digits[h] += c[i++] << 8\\n        }\\n        //j是待加密数据转换后的整数\\n        k = a.barrett.powMod(j, a.e),\\n        l = 16 == a.radix ? biToHex(k) : biToString(k, a.radix),\\n        g += l + \\\" \\\"\\n    }\\n    return g.substring(0, g.length - 1)\\n}\\n```\\n\\n在本地测试输出j的值：\\n\\n```\\nconsole.log(biToHex(j))\\n```\\n\\n对这个值进行加密：\\n\\n```\\nhex_str = '4d4b466b776c654a6171497175616c36'\\nrsa_m = int(hex_str, 16)\\n\\nrsa_c = rsa.core.encrypt_int(rsa_m, rsa_e, rsa_n)\\n\\nprint(hex(rsa_c))\\n```\\n\\n这次得到的数据跟请求中的参数一致（RSA加密生成的数据可能每次都不一样，跟填充方式有关），查阅RSA相关的资料知道算法是在固定长度的块上面进行操作，如果数据长度大于块大小要分割，小于要填充，根据上面的代码，这里的填充方式是直接在后面补'\\\\0'，加密时对每块进行加密，生成的数据之间用空格隔开，至于块大小怎么确定暂时不知道，先不管。\\n为了了解数据是怎么转换成整数的，需要了解BigInt的结构，通过调试可以知道BigInt包含一个数组，观察上面的代码可以知道数据转换成BigInt的过程是把每两个的字符的ascii码值逆序存放到数组的一个元素中，例如字符串：\\\"cd\\\",写成二进制的形式是：\\n\\n> 0110 0011 / 0010 0100\\n\\n放到BigInt中是：\\n\\n> 0010 0100 0110 0011\\n\\n接下来看看BigInt是怎么转换成整数的，找到BigInt转Hex的函数（因为这个函数最简单2333）：\\n\\n```\\nfunction reverseStr(a) {\\n    var c, b = \\\"\\\";\\n    for (c = a.length - 1; c > -1; --c) b += a.charAt(c);\\n    return b\\n}\\nfunction digitToHex(a) {\\n    var b = 15,\\n        c = \\\"\\\";\\n    for (i = 0; 4 > i; ++i) c += hexToChar[a & b],\\n    a >>>= 4;\\n    return reverseStr(c)\\n}\\nfunction biToHex(a) {\\n    var d, b = \\\"\\\";\\n    for (biHighIndex(a), d = biHighIndex(a); d > -1; --d) b += digitToHex(a.digits[d]);\\n    return\\n```\\n\\n这个函数逆序对BigInt的数组元素进行如下操作：从低位开始每4个二进制位转对应的16进制，并逆序输出。\\n所以数据转整数的整个过程其实就是把数据以小端方式存储（跟直接加密的区别就在于大端和小端），例如字符串\\\"cdef\\\"：\\n\\n0110 0011 / 0010 0100 / 0110 0101 / 0110 0110\\n\\n转换成小端：\\n\\n0110 0110 / 0110 0101 / 0010 0100 / 0110 0011\\n\\n转换成16进制就是：\\n\\n0x66656463\\n\\n测试一下：\\n\\n```\\ntable = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f']\\n\\ndata = \\\"6lauqIqaJelwkFKM\\\".encode()\\nhex_str = ''\\n\\nfor i in range(len(data) - 1, -1, -1):\\n\\thex_str += table[(data[i] & 0xf0) >> 4]\\n\\thex_str += table[data[i] & 0xf]\\n\\nrsa_m = int(hex_str, 16)\\n\\nrsa_c = rsa.core.encrypt_int(rsa_m, rsa_e, rsa_n)\\n\\nprint(hex(rsa_c))\\n```\\n\\n这次得到的结果与请求参数的一致，再次发送请求已经可以获取到数据了。\\n\\n![avatar](https://s2.ax1x.com/2019/06/04/VYLrZQ.png)\\n\\n（看了文档才知道白折腾了。。。文档里面有说明是逆序的）\\n![avatar](https://s2.ax1x.com/2019/06/04/VYxdHO.png)\\n\\n经过上面的分析可以大概得出请求的流程：前端先把请求的参数包装成json字符串，使用一个固定的密钥加密得到第一次加密的数据，再使用随机生成的密钥加密第一次加密生成的数据最终得到传递给服务器的参数，接着加密随机生成的密钥传递给服务器。服务器端用私钥解密得到前端随机生成的密钥，再用这个密钥对加密过的参数解密，经过两次解密最终得到参数。\\n\\n关于csrf_token参数，这个是用户登录以后才会有的，之后可能会补充更新一下这部分的接口，另外如果用postman之类的工具请求接口好像直接把参数放在query部分才行，一开始放到post body获取不到数据。\\n\\n最后把获取评论的接口贴一下：\\n\\nurl: https://music.163.com/weapi/v1/resource/comments/ID\\nmethod: POST\\nquery: csrf_token\\nparams: ID(string), offset(int), limit(int), total(boolean), csrf_token(string)\\n\\n当请求歌曲评论时，ID的格式是R_SO_4_ + 歌曲ID。\\n歌单：A_PL_0 + 歌单ID。\\n电台：A_DJ_1 + 电台ID\\n\\n其他类型的评论ID可以在开发者模式下获取相应请求url得到。\\n\\n### 2.获取歌词 ###\\n\\n通过上面的分析已经得到参数加密的方法，所以我们只需要知道请求这个接口都有什么参数就可以了。\\n\\nexample:\\n\\n> {\\\"id\\\":\\\"1361988914\\\",\\\"lv\\\":-1,\\\"tv\\\":-1,\\\"csrf_token\\\":\\\"\\\"}\\n\\nlv,tv这几个参数暂时不知道作用是什么，有兴趣的可以自己研究研究\\n\\nurl: https://music.163.com/weapi/song/lyric\\nmethod: POST\\nquery: csrf_token\\nparams: ID(int), lv(int), lv(int), csrf_token(string)\\n\\n### 3.获取播放列表 ###\\n\\n\\n\\n### 4.搜索 ###\\n\\n#### 4.1 推荐 ####\\n\\nexample：\\n\\n> {\\\"s\\\":\\\"陈奕迅\\\",\\\"limit\\\":\\\"8\\\",\\\"csrf_token\\\":\\\"\\\"}\\n\\nurl: https://music.163.com/weapi/cloudsearch/get/web\\nmethod: POST\\nquery: csrf_token\\nparams: s(string), limit(int), csrf_token(string)\\n\\n#### 4.2 各种搜索 ####\\n\\nexample:\\n\\n> {\\\"hlpretag\\\":\\\"<span class=\\\\\\\"s-fc7\\\\\\\">\\\",\\\"hlposttag\\\":\\\"</span>\\\",\\\"s\\\":\\\"陈奕迅\\\",\\\"type\\\":\\\"1\\\",\\\"offset\\\":\\\"0\\\",\\\"total\\\":\\\"true\\\",\\\"limit\\\":\\\"30\\\",\\\"csrf_token\\\":\\\"\\\"}\\n\\n前面hlpretag和hlposttag暂时不知道作用是什么，可以不加进去，如果要加进去加密的时候记得要把转义符号也当成字符串的一部分，在python中可以在字符串前面加r表示raw string。\\n其中type是搜索的类型：\\n1 歌曲\\n10 专辑\\n100 歌手\\n1000 歌单\\n1002 用户\\n1006 歌词\\n1009 电台\\n1014 视频\\n其他的参数比较明显就不细说了。\\n\\nurl: https://music.163.com/weapi/cloudsearch/get/web\\nmethod: POST\\nquery: csrf_token\\nparams: s(string), type(int), offset(int), total(int), limit(int), csrf_token(string)\\n\\n<script src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/latest.js?config=TeX-MML-AM_CHTML' async>\\n</script>\\n<script type=\\\"text/x-mathjax-config\\\">\\n    MathJax.Hub.Config({\\n    tex2jax: {inlineMath: [['$','$'], ['\\\\\\\\(','\\\\\\\\)']]}\\n    });\\n</script>\\n\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]]}",
            "created_at_ts": 1559721640562,
            "created_at": "2019-06-05T08:00:40.000Z"
          },
          {
            "id": "5cf776aac199180df866a23d",
            "post_id": "5cf3b9b16e5789135f7785a7",
            "mobiledoc": "{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"记得很久以前爬过评论的API，请求参数是加密过的，调用过程好像有点复杂，后来直接用PyV8调用javascript加密得到参数，但是加密的过程不是很清楚，刚好想找个理由学一学Python，这次就用纯Python写吧。\\n\\n先随便选一个接口分析一下，就选评论接口吧。\\n\\n### 1.获取评论 ###\\n\\n进入Chrome开发者模式可以看到\\n\\n![avatar](https://s2.ax1x.com/2019/06/02/VGR8Yj.png)\\n![avatar](https://s2.ax1x.com/2019/06/02/VGWc5Q.png)\\n\\n这个就是获取评论的接口，请求方式是POST，请求体有两个参数params和encSecKey，在请求的Initiator可以看到发出请求的代码在core_xxxx.js这个文件，代码肯定经过混淆，先下载到本地格式化一下。在js文件中搜索encSecKey，找到生成参数的相关代码段，可以看到参数由asrsea这个函数生成。\\n\\n```\\nvar bYc0x = window.asrsea(JSON.stringify(i8a), bkY9P([\\\"流泪\\\", \\\"强\\\"]), bkY9P(VM5R.md), bkY9P([\\\"爱心\\\", \\\"女孩\\\", \\\"惊恐\\\", \\\"大笑\\\"]));\\ne8e.data = k8c.cz9q({\\n    params: bYc0x.encText,\\n    encSecKey: bYc0x.encSecKey\\n})\\n```\\n\\n继续在js文件中搜索这个函数，可以看到生成参数的相关函数\\n\\n```\\nfunction a(a) {\\n    var d, e, b = \\\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\\\",\\n        c = \\\"\\\";\\n    for (d = 0; a > d; d += 1) e = Math.random() * b.length,\\n    e = Math.floor(e),\\n    c += b.charAt(e);\\n    return c\\n}\\n//生成encText，即params\\nfunction b(a, b) {\\n    var c = CryptoJS.enc.Utf8.parse(b),                     //密钥\\n        d = CryptoJS.enc.Utf8.parse(\\\"0102030405060708\\\"),    //初始化向量\\n        e = CryptoJS.enc.Utf8.parse(a),                     //数据\\n        f = CryptoJS.AES.encrypt(e, c, {\\n            iv: d,\\n            mode: CryptoJS.mode.CBC\\n        });\\n    return f.toString()\\n}\\n//生成encSecKey\\nfunction c(a, b, c) {\\n    var d, e;\\n    return setMaxDigits(131),\\n    d = new RSAKeyPair(b, \\\"\\\", c),\\n    e = encryptedString(d, a)\\n}\\n//spider 加密函数\\nfunction d(d, e, f, g) {\\n    var h = {},\\n        i = a(16);  //随机生成一个由a~z,A~Z,0~9组成的长度为a的字符串（AES密钥）\\n    return h.encText = b(d, g),\\n    h.encText = b(h.encText, i),\\n    h.encSecKey = c(i, e, f),\\n    h\\n}\\nfunction e(a, b, d, e) {\\n    var f = {};\\n    return f.encText = c(a + e, b, d),\\n    f\\n}\\nwindow.asrsea = d,\\nwindow.ecnonasr = e\\n```\\n\\nparams的生成过程比较简单，在函数d中可以看到params由两次调用函数b得到：函数b是AES加密的过程，参数a是要加密的数据，参数b是密钥，params经过两次AES加密得到，通过调试可以看到第一次加密：\\n\\n```\\nh.encText = b(d, g)\\n```\\n\\n参数g是固定的：\\n\\n> 0CoJUm6Qyw8W8jud\\n\\n而参数d则是请求参数构成的json字符串，在上面的请求中是：\\n\\n> {\\\"rid\\\":\\\"R_SO_4_1361988914\\\",\\\"offset\\\":\\\"0\\\",\\\"total\\\":\\\"true\\\",\\\"limit\\\":\\\"20\\\",\\\"csrf_token\\\":\\\"\\\"}\\n\\noffset代表获取的第一条评论的偏移量，limit是获取的评论数。\\n\\n第二次加密是使用随机生成的密钥（长度为16）加密第一次加密生成的数据。为了方便测试，在原网页获取随机生成的某密钥以及用这个密钥加密得到的params和encSecKey：\\n\\nkey:\\n\\n> 6lauqIqaJelwkFKM\\n\\nparams:\\n\\n> 1NGJ2rghqo1ToCy5r27rEDqRCNEZxxKk2BvmOQoud6GTNfPZKGRJVFmqfJWeAXYQi4V/++6HKpDjFDfB+TZZ+cmDQF2ywgL9w5Ow8r+mtLG95D7rfUfRkT7GiTn4KMCt+mIM9dtgtIoKXSZ77407F/ZI/GCfslievQ0IfnBAR8SoKQmz8XaQgC1Lxo93VxQ4\\n\\nencSecKey:\\n\\n> 2d1a892a0d7b3101eb00936c4915b2541bc378b58a5ccf6ab3ca939da1fd1fcee7b7456feef0a0d9115c1b5aad8aa64674df8249597e9e74ab66cb5fa84a624f174ed59e786fef748528fff098fa749c11aa06d7d86b7a41d917277efb3f14f8b974ddb2cb5df638ec36d3de8c2f02335cb1990b150a8deafc186c2007dea21c\\n\\n其中AES加密的填充方式是pkcs#7padding，块大小是16 Bytes，加密后的数据默认使用base64编码，根据pkcs#7padding的规则，需要在数据后面添加(16 - n%16)个byte（无论n的长度是否是16的整数倍），且byte的值也为(16 - n%16)。\\n\\n```\\nfrom Crypto.Cipher import AES\\nimport base64\\n\\ndef pkcs7_padding(data):\\n\\tn = 16 - len(data) % 16\\n\\tdata += (chr(n) * n).encode()\\n\\treturn data\\n\\nkey = '0CoJUm6Qyw8W8jud'.encode('utf-8')\\nmode = AES.MODE_CBC\\niv = '0102030405060708'.encode('utf-8')\\n\\naes = AES.new(key, mode, iv)\\n\\ndata = '{\\\"rid\\\":\\\"R_SO_4_1361988914\\\",\\\"offset\\\":\\\"0\\\",\\\"total\\\":\\\"true\\\",\\\"limit\\\":\\\"20\\\",\\\"csrf_token\\\":\\\"\\\"}'.encode('utf-8')\\ndata = pkcs7_padding(data)\\n\\nendata = aes.encrypt(data)\\nendata = base64.b64encode(endata)\\n\\nkey = '6lauqIqaJelwkFKM'.encode('utf-8')\\n\\naes = AES.new(key, mode, iv)\\n\\ndata = pkcs7_padding(endata)\\n\\nendata = aes.encrypt(data)\\nendata = base64.b64encode(endata)\\n\\nprint(endata)\\n```\\n\\n得到的数据与请求中的一致。\\n\\n再分析一下encSecKey的生成过程，在函数d中可以看到encSecKey由函数c生成：函数c将随机生成的密钥（就是上面生成params时AES加密的密钥）经过RSA加密得到encSecKey。\\n关于RSA加密的过程，源代码在这里可以看到:http://www.ohdave.com/rsa\\n\\nRSAKeyPair包括encryptionExponent,decryptionExponent,modulus（分别对应代码中RSAKeyPair函数的三个参数，根据RSA加密的过程：公钥包含两个大整数，n和e，假设要加密的数据是m，则加密后的数据$c ≡ m^e \\\\ (mod \\\\ n)$,这里的e就是encryptionExponent，n就是modulus。\\n\\ne和n两个数应该是固定的（公钥应该不会频繁更换吧），在RSAKeyPair函数打断点得到e和n的值分别是：\\n\\n> 010001\\n\\n和\\n\\n> 00e0b509f6259df8642dbc35662901477df22677ec152b5ff68ace615bb7b725152b3ab17a876aea8a5aa76d2e417629ec4ee341f56135fccf695280104e0312ecbda92557c93870114af6c9d05c4f7f0c3685b7a46bee255932575cce10b424d813cfe4875d3e82047b97ddef52741d546b8e289dc6935b3ece0462db0a22b8e7\\n\\n一开始我尝试直接对数据进行加密：\\n\\n```\\nimport rsa\\nimport binascii\\n\\nrsa_n = int(\\\"00e0b509f6259df8642dbc35662901477df22677ec152b5ff68ace615bb7b725152b3ab17a876aea8a5aa76d2e417629ec4ee341f56135fccf695280104e0312ecbda92557c93870114af6c9d05c4f7f0c3685b7a46bee255932575cce10b424d813cfe4875d3e82047b97ddef52741d546b8e289dc6935b3ece0462db0a22b8e7\\\", 16)\\nrsa_e = int(\\\"010001\\\", 16)\\n\\nkey = rsa.PublicKey(rsa_n, rsa_e)\\ndata = \\\"6lauqIqaJelwkFKM\\\".encode()\\n\\nencrypted_data = rsa.encrypt(data, key)\\nhex_str = binascii.b2a_hex(encrypted_data)\\n\\nprint(hex_str)\\n```\\n\\n尝试请求接口，但是没有返回数据，猜测跟数据转换成的整数有关，回到js代码中加密的代码段看看：\\n\\n```\\nfunction encryptedString(a, b) {\\n    for (var f, g, h, i, j, k, l, c = new Array, d = b.length, e = 0; d > e;) c[e] = b.charCodeAt(e),\\n    e++;\\n    for (; 0 != c.length % a.chunkSize;) c[e++] = 0;\\n    for (f = c.length, g = \\\"\\\", e = 0; f > e; e += a.chunkSize) {\\n        for (j = new BigInt, h = 0, i = e; i < e + a.chunkSize; ++h) {\\n            j.digits[h] = c[i++]\\n            j.digits[h] += c[i++] << 8\\n        }\\n        //j是待加密数据转换后的整数\\n        k = a.barrett.powMod(j, a.e),\\n        l = 16 == a.radix ? biToHex(k) : biToString(k, a.radix),\\n        g += l + \\\" \\\"\\n    }\\n    return g.substring(0, g.length - 1)\\n}\\n```\\n\\n在本地测试输出j的值：\\n\\n```\\nconsole.log(biToHex(j))\\n```\\n\\n对这个值进行加密：\\n\\n```\\nhex_str = '4d4b466b776c654a6171497175616c36'\\nrsa_m = int(hex_str, 16)\\n\\nrsa_c = rsa.core.encrypt_int(rsa_m, rsa_e, rsa_n)\\n\\nprint(hex(rsa_c))\\n```\\n\\n这次得到的数据跟请求中的参数一致（RSA加密生成的数据可能每次都不一样，跟填充方式有关），查阅RSA相关的资料知道算法是在固定长度的块上面进行操作，如果数据长度大于块大小要分割，小于要填充，根据上面的代码，这里的填充方式是直接在后面补'\\\\0'，加密时对每块进行加密，生成的数据之间用空格隔开，至于块大小怎么确定暂时不知道，先不管。\\n为了了解数据是怎么转换成整数的，需要了解BigInt的结构，通过调试可以知道BigInt包含一个数组，观察上面的代码可以知道数据转换成BigInt的过程是把每两个的字符的ascii码值逆序存放到数组的一个元素中，例如字符串：\\\"cd\\\",写成二进制的形式是：\\n\\n> 0110 0011 / 0010 0100\\n\\n放到BigInt中是：\\n\\n> 0010 0100 0110 0011\\n\\n接下来看看BigInt是怎么转换成整数的，找到BigInt转Hex的函数（因为这个函数最简单2333）：\\n\\n```\\nfunction reverseStr(a) {\\n    var c, b = \\\"\\\";\\n    for (c = a.length - 1; c > -1; --c) b += a.charAt(c);\\n    return b\\n}\\nfunction digitToHex(a) {\\n    var b = 15,\\n        c = \\\"\\\";\\n    for (i = 0; 4 > i; ++i) c += hexToChar[a & b],\\n    a >>>= 4;\\n    return reverseStr(c)\\n}\\nfunction biToHex(a) {\\n    var d, b = \\\"\\\";\\n    for (biHighIndex(a), d = biHighIndex(a); d > -1; --d) b += digitToHex(a.digits[d]);\\n    return\\n```\\n\\n这个函数逆序对BigInt的数组元素进行如下操作：从低位开始每4个二进制位转对应的16进制，并逆序输出。\\n所以数据转整数的整个过程其实就是把数据以小端方式存储（跟直接加密的区别就在于大端和小端），例如字符串\\\"cdef\\\"：\\n\\n0110 0011 / 0010 0100 / 0110 0101 / 0110 0110\\n\\n转换成小端：\\n\\n0110 0110 / 0110 0101 / 0010 0100 / 0110 0011\\n\\n转换成16进制就是：\\n\\n0x66656463\\n\\n测试一下：\\n\\n```\\ntable = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f']\\n\\ndata = \\\"6lauqIqaJelwkFKM\\\".encode()\\nhex_str = ''\\n\\nfor i in range(len(data) - 1, -1, -1):\\n\\thex_str += table[(data[i] & 0xf0) >> 4]\\n\\thex_str += table[data[i] & 0xf]\\n\\nrsa_m = int(hex_str, 16)\\n\\nrsa_c = rsa.core.encrypt_int(rsa_m, rsa_e, rsa_n)\\n\\nprint(hex(rsa_c))\\n```\\n\\n这次得到的结果与请求参数的一致，再次发送请求已经可以获取到数据了。\\n\\n![avatar](https://s2.ax1x.com/2019/06/04/VYLrZQ.png)\\n\\n（看了文档才知道白折腾了。。。文档里面有说明是逆序的）\\n![avatar](https://s2.ax1x.com/2019/06/04/VYxdHO.png)\\n\\n经过上面的分析可以大概得出请求的流程：前端先把请求的参数包装成json字符串，使用一个固定的密钥加密得到第一次加密的数据，再使用随机生成的密钥加密第一次加密生成的数据最终得到传递给服务器的参数，接着加密随机生成的密钥传递给服务器。服务器端用私钥解密得到前端随机生成的密钥，再用这个密钥对加密过的参数解密，经过两次解密最终得到参数。\\n\\n关于csrf_token参数，这个是用户登录以后才会有的，之后可能会补充更新一下这部分的接口，另外如果用postman之类的工具请求接口好像直接把参数放在query部分才行，一开始放到post body获取不到数据。\\n\\n最后把获取评论的接口贴一下：\\n\\nurl: https://music.163.com/weapi/v1/resource/comments/ID\\nmethod: POST\\nquery: csrf_token\\nparams: ID(string), offset(int), limit(int), total(boolean), csrf_token(string)\\n\\n当请求歌曲评论时，ID的格式是R_SO_4_ + 歌曲ID。\\n歌单：A_PL_0 + 歌单ID。\\n电台：A_DJ_1 + 电台ID\\n\\n其他类型的评论ID可以在开发者模式下获取相应请求url得到。\\n\\n### 2.获取歌词 ###\\n\\n通过上面的分析已经得到参数加密的方法，所以我们只需要知道请求这个接口都有什么参数就可以了。\\n\\nexample:\\n\\n> {\\\"id\\\":\\\"1361988914\\\",\\\"lv\\\":-1,\\\"tv\\\":-1,\\\"csrf_token\\\":\\\"\\\"}\\n\\nlv,tv这几个参数暂时不知道作用是什么，有兴趣的可以自己研究研究。\\n\\nurl: https://music.163.com/weapi/song/lyric\\nmethod: POST\\nquery: csrf_token\\nparams: ID(int), lv(int), lv(int), csrf_token(string)\\n\\n### 3.获取播放列表 ###\\n\\n\\n\\n### 4.搜索 ###\\n\\n#### 4.1 推荐 ####\\n\\nexample：\\n\\n> {\\\"s\\\":\\\"陈奕迅\\\",\\\"limit\\\":\\\"8\\\",\\\"csrf_token\\\":\\\"\\\"}\\n\\nurl: https://music.163.com/weapi/cloudsearch/get/web\\nmethod: POST\\nquery: csrf_token\\nparams: s(string), limit(int), csrf_token(string)\\n\\n#### 4.2 各种搜索 ####\\n\\nexample:\\n\\n> {\\\"hlpretag\\\":\\\"<span class=\\\\\\\"s-fc7\\\\\\\">\\\",\\\"hlposttag\\\":\\\"</span>\\\",\\\"s\\\":\\\"陈奕迅\\\",\\\"type\\\":\\\"1\\\",\\\"offset\\\":\\\"0\\\",\\\"total\\\":\\\"true\\\",\\\"limit\\\":\\\"30\\\",\\\"csrf_token\\\":\\\"\\\"}\\n\\n前面hlpretag和hlposttag暂时不知道作用是什么，可以不加进去，如果要加进去加密的时候记得要把转义符号也当成字符串的一部分，在python中可以在字符串前面加r表示raw string。\\n其中type是搜索的类型：\\n1 歌曲\\n10 专辑\\n100 歌手\\n1000 歌单\\n1002 用户\\n1006 歌词\\n1009 电台\\n1014 视频\\n其他的参数比较明显就不细说了。\\n\\nurl: https://music.163.com/weapi/cloudsearch/get/web\\nmethod: POST\\nquery: csrf_token\\nparams: s(string), type(int), offset(int), total(int), limit(int), csrf_token(string)\\n\\n<script src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/latest.js?config=TeX-MML-AM_CHTML' async>\\n</script>\\n<script type=\\\"text/x-mathjax-config\\\">\\n    MathJax.Hub.Config({\\n    tex2jax: {inlineMath: [['$','$'], ['\\\\\\\\(','\\\\\\\\)']]}\\n    });\\n</script>\\n\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]]}",
            "created_at_ts": 1559721642600,
            "created_at": "2019-06-05T08:00:42.000Z"
          },
          {
            "id": "5cf78abdc199180df866a23f",
            "post_id": "5cf3b9b16e5789135f7785a7",
            "mobiledoc": "{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"记得很久以前爬过评论的API，请求参数是加密过的，调用过程好像有点复杂，后来直接用PyV8调用javascript加密得到参数，但是加密的过程不是很清楚，刚好想找个理由学一学Python，这次就用纯Python写吧。\\n\\n先随便选一个接口分析一下，就选评论接口吧。\\n\\n### 1.获取评论 ###\\n\\n进入Chrome开发者模式可以看到\\n\\n![avatar](https://s2.ax1x.com/2019/06/02/VGR8Yj.png)\\n![avatar](https://s2.ax1x.com/2019/06/02/VGWc5Q.png)\\n\\n这个就是获取评论的接口，请求方式是POST，请求体有两个参数params和encSecKey，在请求的Initiator可以看到发出请求的代码在core_xxxx.js这个文件，代码肯定经过混淆，先下载到本地格式化一下。在js文件中搜索encSecKey，找到生成参数的相关代码段，可以看到参数由asrsea这个函数生成。\\n\\n```\\nvar bYc0x = window.asrsea(JSON.stringify(i8a), bkY9P([\\\"流泪\\\", \\\"强\\\"]), bkY9P(VM5R.md), bkY9P([\\\"爱心\\\", \\\"女孩\\\", \\\"惊恐\\\", \\\"大笑\\\"]));\\ne8e.data = k8c.cz9q({\\n    params: bYc0x.encText,\\n    encSecKey: bYc0x.encSecKey\\n})\\n```\\n\\n继续在js文件中搜索这个函数，可以看到生成参数的相关函数\\n\\n```\\nfunction a(a) {\\n    var d, e, b = \\\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\\\",\\n        c = \\\"\\\";\\n    for (d = 0; a > d; d += 1) e = Math.random() * b.length,\\n    e = Math.floor(e),\\n    c += b.charAt(e);\\n    return c\\n}\\n//生成encText，即params\\nfunction b(a, b) {\\n    var c = CryptoJS.enc.Utf8.parse(b),                     //密钥\\n        d = CryptoJS.enc.Utf8.parse(\\\"0102030405060708\\\"),    //初始化向量\\n        e = CryptoJS.enc.Utf8.parse(a),                     //数据\\n        f = CryptoJS.AES.encrypt(e, c, {\\n            iv: d,\\n            mode: CryptoJS.mode.CBC\\n        });\\n    return f.toString()\\n}\\n//生成encSecKey\\nfunction c(a, b, c) {\\n    var d, e;\\n    return setMaxDigits(131),\\n    d = new RSAKeyPair(b, \\\"\\\", c),\\n    e = encryptedString(d, a)\\n}\\n//spider 加密函数\\nfunction d(d, e, f, g) {\\n    var h = {},\\n        i = a(16);  //随机生成一个由a~z,A~Z,0~9组成的长度为a的字符串（AES密钥）\\n    return h.encText = b(d, g),\\n    h.encText = b(h.encText, i),\\n    h.encSecKey = c(i, e, f),\\n    h\\n}\\nfunction e(a, b, d, e) {\\n    var f = {};\\n    return f.encText = c(a + e, b, d),\\n    f\\n}\\nwindow.asrsea = d,\\nwindow.ecnonasr = e\\n```\\n\\nparams的生成过程比较简单，在函数d中可以看到params由两次调用函数b得到：函数b是AES加密的过程，参数a是要加密的数据，参数b是密钥，params经过两次AES加密得到，通过调试可以看到第一次加密：\\n\\n```\\nh.encText = b(d, g)\\n```\\n\\n参数g是固定的：\\n\\n> 0CoJUm6Qyw8W8jud\\n\\n而参数d则是请求参数构成的json字符串，在上面的请求中是：\\n\\n> {\\\"rid\\\":\\\"R_SO_4_1361988914\\\",\\\"offset\\\":\\\"0\\\",\\\"total\\\":\\\"true\\\",\\\"limit\\\":\\\"20\\\",\\\"csrf_token\\\":\\\"\\\"}\\n\\noffset代表获取的第一条评论的偏移量，limit是获取的评论数。\\n\\n第二次加密是使用随机生成的密钥（长度为16）加密第一次加密生成的数据。为了方便测试，在原网页获取随机生成的某密钥以及用这个密钥加密得到的params和encSecKey：\\n\\nkey:\\n\\n> 6lauqIqaJelwkFKM\\n\\nparams:\\n\\n> 1NGJ2rghqo1ToCy5r27rEDqRCNEZxxKk2BvmOQoud6GTNfPZKGRJVFmqfJWeAXYQi4V/++6HKpDjFDfB+TZZ+cmDQF2ywgL9w5Ow8r+mtLG95D7rfUfRkT7GiTn4KMCt+mIM9dtgtIoKXSZ77407F/ZI/GCfslievQ0IfnBAR8SoKQmz8XaQgC1Lxo93VxQ4\\n\\nencSecKey:\\n\\n> 2d1a892a0d7b3101eb00936c4915b2541bc378b58a5ccf6ab3ca939da1fd1fcee7b7456feef0a0d9115c1b5aad8aa64674df8249597e9e74ab66cb5fa84a624f174ed59e786fef748528fff098fa749c11aa06d7d86b7a41d917277efb3f14f8b974ddb2cb5df638ec36d3de8c2f02335cb1990b150a8deafc186c2007dea21c\\n\\n其中AES加密的填充方式是pkcs#7padding，块大小是16 Bytes，加密后的数据默认使用base64编码，根据pkcs#7padding的规则，需要在数据后面添加(16 - n%16)个byte（无论n的长度是否是16的整数倍），且byte的值也为(16 - n%16)。\\n\\n```\\nfrom Crypto.Cipher import AES\\nimport base64\\n\\ndef pkcs7_padding(data):\\n\\tn = 16 - len(data) % 16\\n\\tdata += (chr(n) * n).encode()\\n\\treturn data\\n\\nkey = '0CoJUm6Qyw8W8jud'.encode('utf-8')\\nmode = AES.MODE_CBC\\niv = '0102030405060708'.encode('utf-8')\\n\\naes = AES.new(key, mode, iv)\\n\\ndata = '{\\\"rid\\\":\\\"R_SO_4_1361988914\\\",\\\"offset\\\":\\\"0\\\",\\\"total\\\":\\\"true\\\",\\\"limit\\\":\\\"20\\\",\\\"csrf_token\\\":\\\"\\\"}'.encode('utf-8')\\ndata = pkcs7_padding(data)\\n\\nendata = aes.encrypt(data)\\nendata = base64.b64encode(endata)\\n\\nkey = '6lauqIqaJelwkFKM'.encode('utf-8')\\n\\naes = AES.new(key, mode, iv)\\n\\ndata = pkcs7_padding(endata)\\n\\nendata = aes.encrypt(data)\\nendata = base64.b64encode(endata)\\n\\nprint(endata)\\n```\\n\\n得到的数据与请求中的一致。\\n\\n再分析一下encSecKey的生成过程，在函数d中可以看到encSecKey由函数c生成：函数c将随机生成的密钥（就是上面生成params时AES加密的密钥）经过RSA加密得到encSecKey。\\n关于RSA加密的过程，源代码在这里可以看到:http://www.ohdave.com/rsa\\n\\nRSAKeyPair包括encryptionExponent,decryptionExponent,modulus（分别对应代码中RSAKeyPair函数的三个参数，根据RSA加密的过程：公钥包含两个大整数，n和e，假设要加密的数据是m，则加密后的数据$c ≡ m^e \\\\ (mod \\\\ n)$,这里的e就是encryptionExponent，n就是modulus。\\n\\ne和n两个数应该是固定的（公钥应该不会频繁更换吧），在RSAKeyPair函数打断点得到e和n的值分别是：\\n\\n> 010001\\n\\n和\\n\\n> 00e0b509f6259df8642dbc35662901477df22677ec152b5ff68ace615bb7b725152b3ab17a876aea8a5aa76d2e417629ec4ee341f56135fccf695280104e0312ecbda92557c93870114af6c9d05c4f7f0c3685b7a46bee255932575cce10b424d813cfe4875d3e82047b97ddef52741d546b8e289dc6935b3ece0462db0a22b8e7\\n\\n一开始我尝试直接对数据进行加密：\\n\\n```\\nimport rsa\\nimport binascii\\n\\nrsa_n = int(\\\"00e0b509f6259df8642dbc35662901477df22677ec152b5ff68ace615bb7b725152b3ab17a876aea8a5aa76d2e417629ec4ee341f56135fccf695280104e0312ecbda92557c93870114af6c9d05c4f7f0c3685b7a46bee255932575cce10b424d813cfe4875d3e82047b97ddef52741d546b8e289dc6935b3ece0462db0a22b8e7\\\", 16)\\nrsa_e = int(\\\"010001\\\", 16)\\n\\nkey = rsa.PublicKey(rsa_n, rsa_e)\\ndata = \\\"6lauqIqaJelwkFKM\\\".encode()\\n\\nencrypted_data = rsa.encrypt(data, key)\\nhex_str = binascii.b2a_hex(encrypted_data)\\n\\nprint(hex_str)\\n```\\n\\n尝试请求接口，但是没有返回数据，猜测跟数据转换成的整数有关，回到js代码中加密的代码段看看：\\n\\n```\\nfunction encryptedString(a, b) {\\n    for (var f, g, h, i, j, k, l, c = new Array, d = b.length, e = 0; d > e;) c[e] = b.charCodeAt(e),\\n    e++;\\n    for (; 0 != c.length % a.chunkSize;) c[e++] = 0;\\n    for (f = c.length, g = \\\"\\\", e = 0; f > e; e += a.chunkSize) {\\n        for (j = new BigInt, h = 0, i = e; i < e + a.chunkSize; ++h) {\\n            j.digits[h] = c[i++]\\n            j.digits[h] += c[i++] << 8\\n        }\\n        //j是待加密数据转换后的整数\\n        k = a.barrett.powMod(j, a.e),\\n        l = 16 == a.radix ? biToHex(k) : biToString(k, a.radix),\\n        g += l + \\\" \\\"\\n    }\\n    return g.substring(0, g.length - 1)\\n}\\n```\\n\\n在本地测试输出j的值：\\n\\n```\\nconsole.log(biToHex(j))\\n```\\n\\n对这个值进行加密：\\n\\n```\\nhex_str = '4d4b466b776c654a6171497175616c36'\\nrsa_m = int(hex_str, 16)\\n\\nrsa_c = rsa.core.encrypt_int(rsa_m, rsa_e, rsa_n)\\n\\nprint(hex(rsa_c))\\n```\\n\\n这次得到的数据跟请求中的参数一致（RSA加密生成的数据可能每次都不一样，跟填充方式有关），查阅RSA相关的资料知道算法是在固定长度的块上面进行操作，如果数据长度大于块大小要分割，小于要填充，根据上面的代码，这里的填充方式是直接在后面补'\\\\0'，加密时对每块进行加密，生成的数据之间用空格隔开，至于块大小怎么确定暂时不知道，先不管。\\n为了了解数据是怎么转换成整数的，需要了解BigInt的结构，通过调试可以知道BigInt包含一个数组，观察上面的代码可以知道数据转换成BigInt的过程是把每两个的字符的ascii码值逆序存放到数组的一个元素中，例如字符串：\\\"cd\\\",写成二进制的形式是：\\n\\n> 0110 0011 / 0010 0100\\n\\n放到BigInt中是：\\n\\n> 0010 0100 0110 0011\\n\\n接下来看看BigInt是怎么转换成整数的，找到BigInt转Hex的函数（因为这个函数最简单2333）：\\n\\n```\\nfunction reverseStr(a) {\\n    var c, b = \\\"\\\";\\n    for (c = a.length - 1; c > -1; --c) b += a.charAt(c);\\n    return b\\n}\\nfunction digitToHex(a) {\\n    var b = 15,\\n        c = \\\"\\\";\\n    for (i = 0; 4 > i; ++i) c += hexToChar[a & b],\\n    a >>>= 4;\\n    return reverseStr(c)\\n}\\nfunction biToHex(a) {\\n    var d, b = \\\"\\\";\\n    for (biHighIndex(a), d = biHighIndex(a); d > -1; --d) b += digitToHex(a.digits[d]);\\n    return\\n```\\n\\n这个函数逆序对BigInt的数组元素进行如下操作：从低位开始每4个二进制位转对应的16进制，并逆序输出。\\n所以数据转整数的整个过程其实就是把数据以小端方式存储（跟直接加密的区别就在于大端和小端），例如字符串\\\"cdef\\\"：\\n\\n0110 0011 / 0010 0100 / 0110 0101 / 0110 0110\\n\\n转换成小端：\\n\\n0110 0110 / 0110 0101 / 0010 0100 / 0110 0011\\n\\n转换成16进制就是：\\n\\n0x66656463\\n\\n测试一下：\\n\\n```\\ntable = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f']\\n\\ndata = \\\"6lauqIqaJelwkFKM\\\".encode()\\nhex_str = ''\\n\\nfor i in range(len(data) - 1, -1, -1):\\n\\thex_str += table[(data[i] & 0xf0) >> 4]\\n\\thex_str += table[data[i] & 0xf]\\n\\nrsa_m = int(hex_str, 16)\\n\\nrsa_c = rsa.core.encrypt_int(rsa_m, rsa_e, rsa_n)\\n\\nprint(hex(rsa_c))\\n```\\n\\n这次得到的结果与请求参数的一致，再次发送请求已经可以获取到数据了。\\n\\n![avatar](https://s2.ax1x.com/2019/06/04/VYLrZQ.png)\\n\\n（看了文档才知道白折腾了。。。文档里面有说明是逆序的）\\n![avatar](https://s2.ax1x.com/2019/06/04/VYxdHO.png)\\n\\n经过上面的分析可以大概得出请求的流程：前端先把请求的参数包装成json字符串，使用一个固定的密钥加密得到第一次加密的数据，再使用随机生成的密钥加密第一次加密生成的数据最终得到传递给服务器的参数，接着加密随机生成的密钥传递给服务器。服务器端用私钥解密得到前端随机生成的密钥，再用这个密钥对加密过的参数解密，经过两次解密最终得到参数。\\n\\n关于csrf_token参数，这个是用户登录以后才会有的，之后可能会补充更新一下这部分的接口，另外如果用postman之类的工具请求接口好像直接把参数放在query部分才行，一开始放到post body获取不到数据。\\n\\n最后把获取评论的接口贴一下：\\n\\nurl: https://music.163.com/weapi/v1/resource/comments/ID\\nmethod: POST\\nquery: csrf_token\\nparams: ID(string), offset(int), limit(int), total(boolean), csrf_token(string)\\n\\n当请求歌曲评论时，ID的格式是R_SO_4_ + 歌曲ID。\\n歌单：A_PL_0 + 歌单ID。\\n电台：A_DJ_1 + 电台ID\\n\\n其他类型的评论ID可以在开发者模式下获取相应请求url得到。\\n\\n### 2.获取歌词 ###\\n\\n通过上面的分析已经得到参数加密的方法，所以我们只需要知道请求这个接口都有什么参数就可以了。\\n\\nexample:\\n\\n> {\\\"id\\\":\\\"1361988914\\\",\\\"lv\\\":-1,\\\"tv\\\":-1,\\\"csrf_token\\\":\\\"\\\"}\\n\\nlv,tv这几个参数暂时不知道作用是什么，有兴趣的可以自己研究研究。\\n\\nurl: https://music.163.com/weapi/song/lyric\\nmethod: POST\\nquery: csrf_token\\nparams: ID(int), lv(int), lv(int), csrf_token(string)\\n\\n### 3.获取播放列表 ###\\n\\n在网页打开播放列表得到的列表详情是在后端处理过直接返回给浏览器的，没有暴露接口，但是通过官方提供的iframe插件可以得到一个接口，例如这个歌单：https://music.163.com/outchain/player?type=0&id=2821194580&auto=1&height=430 ，加密方式跟上文一样：\\n\\nexample:\\n\\n>{\\\"id\\\":\\\"2821194580\\\",\\\"ids\\\":\\\"[\\\\\\\"2821194580\\\\\\\"]\\\",\\\"limit\\\":10000,\\\"offset\\\":0,\\\"csrf_token\\\":\\\"\\\"}\\n\\nid参数是必须的，ids参数的作用暂时不知道是什么。\\n\\nurl: https://music.163.com/weapi/playlist/detail\\nmethod: POST\\nparams: id(int), ids(array), limit(int), offset(int), csrf_token(string)\\n\\n### 4.搜索 ###\\n\\n#### 4.1 推荐 ####\\n\\nexample：\\n\\n> {\\\"s\\\":\\\"陈奕迅\\\",\\\"limit\\\":\\\"8\\\",\\\"csrf_token\\\":\\\"\\\"}\\n\\nurl: https://music.163.com/weapi/cloudsearch/get/web\\nmethod: POST\\nquery: csrf_token\\nparams: s(string), limit(int), csrf_token(string)\\n\\n#### 4.2 各种搜索 ####\\n\\nexample:\\n\\n> {\\\"hlpretag\\\":\\\"<span class=\\\\\\\"s-fc7\\\\\\\">\\\",\\\"hlposttag\\\":\\\"</span>\\\",\\\"s\\\":\\\"陈奕迅\\\",\\\"type\\\":\\\"1\\\",\\\"offset\\\":\\\"0\\\",\\\"total\\\":\\\"true\\\",\\\"limit\\\":\\\"30\\\",\\\"csrf_token\\\":\\\"\\\"}\\n\\n前面hlpretag和hlposttag暂时不知道作用是什么，可以不加进去，如果要加进去加密的时候记得要把转义符号也当成字符串的一部分，在python中可以在字符串前面加r表示raw string。\\n其中type是搜索的类型：\\n1 歌曲\\n10 专辑\\n100 歌手\\n1000 歌单\\n1002 用户\\n1006 歌词\\n1009 电台\\n1014 视频\\n其他的参数比较明显就不细说了。\\n\\nurl: https://music.163.com/weapi/cloudsearch/get/web\\nmethod: POST\\nquery: csrf_token\\nparams: s(string), type(int), offset(int), total(int), limit(int), csrf_token(string)\\n\\n<script src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/latest.js?config=TeX-MML-AM_CHTML' async>\\n</script>\\n<script type=\\\"text/x-mathjax-config\\\">\\n    MathJax.Hub.Config({\\n    tex2jax: {inlineMath: [['$','$'], ['\\\\\\\\(','\\\\\\\\)']]}\\n    });\\n</script>\\n\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]]}",
            "created_at_ts": 1559726781077,
            "created_at": "2019-06-05T09:26:21.000Z"
          },
          {
            "id": "5cf78e9ac199180df866a241",
            "post_id": "5cf3b9b16e5789135f7785a7",
            "mobiledoc": "{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"记得很久以前爬过评论的API，请求参数是加密过的，调用过程好像有点复杂，后来直接用PyV8调用javascript加密得到参数，但是加密的过程不是很清楚，刚好想找个理由学一学Python，这次就用纯Python写吧。\\n\\n先随便选一个接口分析一下，就选评论接口吧。\\n\\n### 1.获取评论 ###\\n\\n进入Chrome开发者模式可以看到\\n\\n![avatar](https://s2.ax1x.com/2019/06/02/VGR8Yj.png)\\n![avatar](https://s2.ax1x.com/2019/06/02/VGWc5Q.png)\\n\\n这个就是获取评论的接口，请求方式是POST，请求体有两个参数params和encSecKey，在请求的Initiator可以看到发出请求的代码在core_xxxx.js这个文件，代码肯定经过混淆，先下载到本地格式化一下。在js文件中搜索encSecKey，找到生成参数的相关代码段，可以看到参数由asrsea这个函数生成。\\n\\n```\\nvar bYc0x = window.asrsea(JSON.stringify(i8a), bkY9P([\\\"流泪\\\", \\\"强\\\"]), bkY9P(VM5R.md), bkY9P([\\\"爱心\\\", \\\"女孩\\\", \\\"惊恐\\\", \\\"大笑\\\"]));\\ne8e.data = k8c.cz9q({\\n    params: bYc0x.encText,\\n    encSecKey: bYc0x.encSecKey\\n})\\n```\\n\\n继续在js文件中搜索这个函数，可以看到生成参数的相关函数\\n\\n```\\nfunction a(a) {\\n    var d, e, b = \\\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\\\",\\n        c = \\\"\\\";\\n    for (d = 0; a > d; d += 1) e = Math.random() * b.length,\\n    e = Math.floor(e),\\n    c += b.charAt(e);\\n    return c\\n}\\n//生成encText，即params\\nfunction b(a, b) {\\n    var c = CryptoJS.enc.Utf8.parse(b),                     //密钥\\n        d = CryptoJS.enc.Utf8.parse(\\\"0102030405060708\\\"),    //初始化向量\\n        e = CryptoJS.enc.Utf8.parse(a),                     //数据\\n        f = CryptoJS.AES.encrypt(e, c, {\\n            iv: d,\\n            mode: CryptoJS.mode.CBC\\n        });\\n    return f.toString()\\n}\\n//生成encSecKey\\nfunction c(a, b, c) {\\n    var d, e;\\n    return setMaxDigits(131),\\n    d = new RSAKeyPair(b, \\\"\\\", c),\\n    e = encryptedString(d, a)\\n}\\n//spider 加密函数\\nfunction d(d, e, f, g) {\\n    var h = {},\\n        i = a(16);  //随机生成一个由a~z,A~Z,0~9组成的长度为a的字符串（AES密钥）\\n    return h.encText = b(d, g),\\n    h.encText = b(h.encText, i),\\n    h.encSecKey = c(i, e, f),\\n    h\\n}\\nfunction e(a, b, d, e) {\\n    var f = {};\\n    return f.encText = c(a + e, b, d),\\n    f\\n}\\nwindow.asrsea = d,\\nwindow.ecnonasr = e\\n```\\n\\nparams的生成过程比较简单，在函数d中可以看到params由两次调用函数b得到：函数b是AES加密的过程，参数a是要加密的数据，参数b是密钥，params经过两次AES加密得到，通过调试可以看到第一次加密：\\n\\n```\\nh.encText = b(d, g)\\n```\\n\\n参数g是固定的：\\n\\n> 0CoJUm6Qyw8W8jud\\n\\n而参数d则是请求参数构成的json字符串，在上面的请求中是：\\n\\n> {\\\"rid\\\":\\\"R_SO_4_1361988914\\\",\\\"offset\\\":\\\"0\\\",\\\"total\\\":\\\"true\\\",\\\"limit\\\":\\\"20\\\",\\\"csrf_token\\\":\\\"\\\"}\\n\\noffset代表获取的第一条评论的偏移量，limit是获取的评论数。\\n\\n第二次加密是使用随机生成的密钥（长度为16）加密第一次加密生成的数据。为了方便测试，在原网页获取随机生成的某密钥以及用这个密钥加密得到的params和encSecKey：\\n\\nkey:\\n\\n> 6lauqIqaJelwkFKM\\n\\nparams:\\n\\n> 1NGJ2rghqo1ToCy5r27rEDqRCNEZxxKk2BvmOQoud6GTNfPZKGRJVFmqfJWeAXYQi4V/++6HKpDjFDfB+TZZ+cmDQF2ywgL9w5Ow8r+mtLG95D7rfUfRkT7GiTn4KMCt+mIM9dtgtIoKXSZ77407F/ZI/GCfslievQ0IfnBAR8SoKQmz8XaQgC1Lxo93VxQ4\\n\\nencSecKey:\\n\\n> 2d1a892a0d7b3101eb00936c4915b2541bc378b58a5ccf6ab3ca939da1fd1fcee7b7456feef0a0d9115c1b5aad8aa64674df8249597e9e74ab66cb5fa84a624f174ed59e786fef748528fff098fa749c11aa06d7d86b7a41d917277efb3f14f8b974ddb2cb5df638ec36d3de8c2f02335cb1990b150a8deafc186c2007dea21c\\n\\n其中AES加密的填充方式是pkcs#7padding，块大小是16 Bytes，加密后的数据默认使用base64编码，根据pkcs#7padding的规则，需要在数据后面添加(16 - n%16)个byte（无论n的长度是否是16的整数倍），且byte的值也为(16 - n%16)。\\n\\n```\\nfrom Crypto.Cipher import AES\\nimport base64\\n\\ndef pkcs7_padding(data):\\n\\tn = 16 - len(data) % 16\\n\\tdata += (chr(n) * n).encode()\\n\\treturn data\\n\\nkey = '0CoJUm6Qyw8W8jud'.encode('utf-8')\\nmode = AES.MODE_CBC\\niv = '0102030405060708'.encode('utf-8')\\n\\naes = AES.new(key, mode, iv)\\n\\ndata = '{\\\"rid\\\":\\\"R_SO_4_1361988914\\\",\\\"offset\\\":\\\"0\\\",\\\"total\\\":\\\"true\\\",\\\"limit\\\":\\\"20\\\",\\\"csrf_token\\\":\\\"\\\"}'.encode('utf-8')\\ndata = pkcs7_padding(data)\\n\\nendata = aes.encrypt(data)\\nendata = base64.b64encode(endata)\\n\\nkey = '6lauqIqaJelwkFKM'.encode('utf-8')\\n\\naes = AES.new(key, mode, iv)\\n\\ndata = pkcs7_padding(endata)\\n\\nendata = aes.encrypt(data)\\nendata = base64.b64encode(endata)\\n\\nprint(endata)\\n```\\n\\n得到的数据与请求中的一致。\\n\\n再分析一下encSecKey的生成过程，在函数d中可以看到encSecKey由函数c生成：函数c将随机生成的密钥（就是上面生成params时AES加密的密钥）经过RSA加密得到encSecKey。\\n关于RSA加密的过程，源代码在这里可以看到:http://www.ohdave.com/rsa\\n\\nRSAKeyPair包括encryptionExponent,decryptionExponent,modulus（分别对应代码中RSAKeyPair函数的三个参数，根据RSA加密的过程：公钥包含两个大整数，n和e，假设要加密的数据是m，则加密后的数据$c ≡ m^e \\\\ (mod \\\\ n)$,这里的e就是encryptionExponent，n就是modulus。\\n\\ne和n两个数应该是固定的（公钥应该不会频繁更换吧），在RSAKeyPair函数打断点得到e和n的值分别是：\\n\\n> 010001\\n\\n和\\n\\n> 00e0b509f6259df8642dbc35662901477df22677ec152b5ff68ace615bb7b725152b3ab17a876aea8a5aa76d2e417629ec4ee341f56135fccf695280104e0312ecbda92557c93870114af6c9d05c4f7f0c3685b7a46bee255932575cce10b424d813cfe4875d3e82047b97ddef52741d546b8e289dc6935b3ece0462db0a22b8e7\\n\\n一开始我尝试直接对数据进行加密：\\n\\n```\\nimport rsa\\nimport binascii\\n\\nrsa_n = int(\\\"00e0b509f6259df8642dbc35662901477df22677ec152b5ff68ace615bb7b725152b3ab17a876aea8a5aa76d2e417629ec4ee341f56135fccf695280104e0312ecbda92557c93870114af6c9d05c4f7f0c3685b7a46bee255932575cce10b424d813cfe4875d3e82047b97ddef52741d546b8e289dc6935b3ece0462db0a22b8e7\\\", 16)\\nrsa_e = int(\\\"010001\\\", 16)\\n\\nkey = rsa.PublicKey(rsa_n, rsa_e)\\ndata = \\\"6lauqIqaJelwkFKM\\\".encode()\\n\\nencrypted_data = rsa.encrypt(data, key)\\nhex_str = binascii.b2a_hex(encrypted_data)\\n\\nprint(hex_str)\\n```\\n\\n尝试请求接口，但是没有返回数据，猜测跟数据转换成的整数有关，回到js代码中加密的代码段看看：\\n\\n```\\nfunction encryptedString(a, b) {\\n    for (var f, g, h, i, j, k, l, c = new Array, d = b.length, e = 0; d > e;) c[e] = b.charCodeAt(e),\\n    e++;\\n    for (; 0 != c.length % a.chunkSize;) c[e++] = 0;\\n    for (f = c.length, g = \\\"\\\", e = 0; f > e; e += a.chunkSize) {\\n        for (j = new BigInt, h = 0, i = e; i < e + a.chunkSize; ++h) {\\n            j.digits[h] = c[i++]\\n            j.digits[h] += c[i++] << 8\\n        }\\n        //j是待加密数据转换后的整数\\n        k = a.barrett.powMod(j, a.e),\\n        l = 16 == a.radix ? biToHex(k) : biToString(k, a.radix),\\n        g += l + \\\" \\\"\\n    }\\n    return g.substring(0, g.length - 1)\\n}\\n```\\n\\n在本地测试输出j的值：\\n\\n```\\nconsole.log(biToHex(j))\\n```\\n\\n对这个值进行加密：\\n\\n```\\nhex_str = '4d4b466b776c654a6171497175616c36'\\nrsa_m = int(hex_str, 16)\\n\\nrsa_c = rsa.core.encrypt_int(rsa_m, rsa_e, rsa_n)\\n\\nprint(hex(rsa_c))\\n```\\n\\n这次得到的数据跟请求中的参数一致（RSA加密生成的数据可能每次都不一样，跟填充方式有关），查阅RSA相关的资料知道算法是在固定长度的块上面进行操作，如果数据长度大于块大小要分割，小于要填充，根据上面的代码，这里的填充方式是直接在后面补'\\\\0'，加密时对每块进行加密，生成的数据之间用空格隔开，至于块大小怎么确定暂时不知道，先不管。\\n为了了解数据是怎么转换成整数的，需要了解BigInt的结构，通过调试可以知道BigInt包含一个数组，观察上面的代码可以知道数据转换成BigInt的过程是把每两个的字符的ascii码值逆序存放到数组的一个元素中，例如字符串：\\\"cd\\\",写成二进制的形式是：\\n\\n> 0110 0011 / 0010 0100\\n\\n放到BigInt中是：\\n\\n> 0010 0100 0110 0011\\n\\n接下来看看BigInt是怎么转换成整数的，找到BigInt转Hex的函数（因为这个函数最简单2333）：\\n\\n```\\nfunction reverseStr(a) {\\n    var c, b = \\\"\\\";\\n    for (c = a.length - 1; c > -1; --c) b += a.charAt(c);\\n    return b\\n}\\nfunction digitToHex(a) {\\n    var b = 15,\\n        c = \\\"\\\";\\n    for (i = 0; 4 > i; ++i) c += hexToChar[a & b],\\n    a >>>= 4;\\n    return reverseStr(c)\\n}\\nfunction biToHex(a) {\\n    var d, b = \\\"\\\";\\n    for (biHighIndex(a), d = biHighIndex(a); d > -1; --d) b += digitToHex(a.digits[d]);\\n    return\\n```\\n\\n这个函数逆序对BigInt的数组元素进行如下操作：从低位开始每4个二进制位转对应的16进制，并逆序输出。\\n所以数据转整数的整个过程其实就是把数据以小端方式存储（跟直接加密的区别就在于大端和小端），例如字符串\\\"cdef\\\"：\\n\\n0110 0011 / 0010 0100 / 0110 0101 / 0110 0110\\n\\n转换成小端：\\n\\n0110 0110 / 0110 0101 / 0010 0100 / 0110 0011\\n\\n转换成16进制就是：\\n\\n0x66656463\\n\\n测试一下：\\n\\n```\\ntable = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f']\\n\\ndata = \\\"6lauqIqaJelwkFKM\\\".encode()\\nhex_str = ''\\n\\nfor i in range(len(data) - 1, -1, -1):\\n\\thex_str += table[(data[i] & 0xf0) >> 4]\\n\\thex_str += table[data[i] & 0xf]\\n\\nrsa_m = int(hex_str, 16)\\n\\nrsa_c = rsa.core.encrypt_int(rsa_m, rsa_e, rsa_n)\\n\\nprint(hex(rsa_c))\\n```\\n\\n这次得到的结果与请求参数的一致，再次发送请求已经可以获取到数据了。\\n\\n![avatar](https://s2.ax1x.com/2019/06/04/VYLrZQ.png)\\n\\n（看了文档才知道白折腾了。。。文档里面有说明是逆序的）\\n![avatar](https://s2.ax1x.com/2019/06/04/VYxdHO.png)\\n\\n经过上面的分析可以大概得出请求的流程：前端先把请求的参数包装成json字符串，使用一个固定的密钥加密得到第一次加密的数据，再使用随机生成的密钥加密第一次加密生成的数据最终得到传递给服务器的参数，接着加密随机生成的密钥传递给服务器。服务器端用私钥解密得到前端随机生成的密钥，再用这个密钥对加密过的参数解密，经过两次解密最终得到参数。\\n\\n关于csrf_token参数，这个是用户登录以后才会有的，之后可能会补充更新一下这部分的接口，另外如果用postman之类的工具请求接口好像直接把参数放在query部分才行，一开始放到post body获取不到数据。\\n\\n最后把获取评论的接口贴一下：\\n\\nurl: https://music.163.com/weapi/v1/resource/comments/ID\\nmethod: POST\\nquery: csrf_token\\nparams: ID(string), offset(int), limit(int), total(boolean), csrf_token(string)\\n\\n当请求歌曲评论时，ID的格式是R_SO_4_ + 歌曲ID。\\n歌单：A_PL_0 + 歌单ID。\\n电台：A_DJ_1 + 电台ID\\n\\n其他类型的评论ID可以在开发者模式下获取相应请求url得到。\\n\\n### 2.获取歌词 ###\\n\\n通过上面的分析已经得到参数加密的方法，所以我们只需要知道请求这个接口都有什么参数就可以了。\\n\\nexample:\\n\\n> {\\\"id\\\":\\\"1361988914\\\",\\\"lv\\\":-1,\\\"tv\\\":-1,\\\"csrf_token\\\":\\\"\\\"}\\n\\nlv,tv这几个参数暂时不知道作用是什么，有兴趣的可以自己研究研究。\\n\\nurl: https://music.163.com/weapi/song/lyric\\nmethod: POST\\nquery: csrf_token\\nparams: ID(int), lv(int), lv(int), csrf_token(string)\\n\\n### 3.获取播放列表 ###\\n\\n在网页打开播放列表得到的列表详情是在后端处理过直接返回给浏览器的，没有暴露接口，但是通过官方提供的iframe插件可以得到一个接口，例如这个歌单：https://music.163.com/outchain/player?type=0&id=2821194580&auto=1&height=430 ，加密方式跟上文一样：\\n\\nexample:\\n\\n>{\\\"id\\\":\\\"2821194580\\\",\\\"ids\\\":\\\"[\\\\\\\"2821194580\\\\\\\"]\\\",\\\"limit\\\":10000,\\\"offset\\\":0,\\\"csrf_token\\\":\\\"\\\"}\\n\\nid参数是必须的，ids参数的作用暂时不知道是什么。但是这个接口目前好像没办法正常使用，limit和offset设置是无效的，而且也无法获取订阅状态，还需要再研究研究。\\n\\nurl: https://music.163.com/weapi/playlist/detail\\nmethod: POST\\nparams: id(int), ids(array), limit(int), offset(int), csrf_token(string)\\n\\n### 4.搜索 ###\\n\\n#### 4.1 推荐 ####\\n\\nexample：\\n\\n> {\\\"s\\\":\\\"陈奕迅\\\",\\\"limit\\\":\\\"8\\\",\\\"csrf_token\\\":\\\"\\\"}\\n\\nurl: https://music.163.com/weapi/cloudsearch/get/web\\nmethod: POST\\nquery: csrf_token\\nparams: s(string), limit(int), csrf_token(string)\\n\\n#### 4.2 各种搜索 ####\\n\\nexample:\\n\\n> {\\\"hlpretag\\\":\\\"<span class=\\\\\\\"s-fc7\\\\\\\">\\\",\\\"hlposttag\\\":\\\"</span>\\\",\\\"s\\\":\\\"陈奕迅\\\",\\\"type\\\":\\\"1\\\",\\\"offset\\\":\\\"0\\\",\\\"total\\\":\\\"true\\\",\\\"limit\\\":\\\"30\\\",\\\"csrf_token\\\":\\\"\\\"}\\n\\n前面hlpretag和hlposttag暂时不知道作用是什么，可以不加进去，如果要加进去加密的时候记得要把转义符号也当成字符串的一部分，在python中可以在字符串前面加r表示raw string。\\n其中type是搜索的类型：\\n1 歌曲\\n10 专辑\\n100 歌手\\n1000 歌单\\n1002 用户\\n1006 歌词\\n1009 电台\\n1014 视频\\n其他的参数比较明显就不细说了。\\n\\nurl: https://music.163.com/weapi/cloudsearch/get/web\\nmethod: POST\\nquery: csrf_token\\nparams: s(string), type(int), offset(int), total(int), limit(int), csrf_token(string)\\n\\n<script src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/latest.js?config=TeX-MML-AM_CHTML' async>\\n</script>\\n<script type=\\\"text/x-mathjax-config\\\">\\n    MathJax.Hub.Config({\\n    tex2jax: {inlineMath: [['$','$'], ['\\\\\\\\(','\\\\\\\\)']]}\\n    });\\n</script>\\n\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]]}",
            "created_at_ts": 1559727770948,
            "created_at": "2019-06-05T09:42:50.000Z"
          },
          {
            "id": "5cf78eeac199180df866a243",
            "post_id": "5cf3b9b16e5789135f7785a7",
            "mobiledoc": "{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"记得很久以前爬过评论的API，请求参数是加密过的，调用过程好像有点复杂，后来直接用PyV8调用javascript加密得到参数，但是加密的过程不是很清楚，刚好想找个理由学一学Python，这次就用纯Python写吧。\\n\\n先随便选一个接口分析一下，就选评论接口吧。\\n\\n### 1.获取评论 ###\\n\\n进入Chrome开发者模式可以看到\\n\\n![avatar](https://s2.ax1x.com/2019/06/02/VGR8Yj.png)\\n![avatar](https://s2.ax1x.com/2019/06/02/VGWc5Q.png)\\n\\n这个就是获取评论的接口，请求方式是POST，请求体有两个参数params和encSecKey，在请求的Initiator可以看到发出请求的代码在core_xxxx.js这个文件，代码肯定经过混淆，先下载到本地格式化一下。在js文件中搜索encSecKey，找到生成参数的相关代码段，可以看到参数由asrsea这个函数生成。\\n\\n```\\nvar bYc0x = window.asrsea(JSON.stringify(i8a), bkY9P([\\\"流泪\\\", \\\"强\\\"]), bkY9P(VM5R.md), bkY9P([\\\"爱心\\\", \\\"女孩\\\", \\\"惊恐\\\", \\\"大笑\\\"]));\\ne8e.data = k8c.cz9q({\\n    params: bYc0x.encText,\\n    encSecKey: bYc0x.encSecKey\\n})\\n```\\n\\n继续在js文件中搜索这个函数，可以看到生成参数的相关函数\\n\\n```\\nfunction a(a) {\\n    var d, e, b = \\\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\\\",\\n        c = \\\"\\\";\\n    for (d = 0; a > d; d += 1) e = Math.random() * b.length,\\n    e = Math.floor(e),\\n    c += b.charAt(e);\\n    return c\\n}\\n//生成encText，即params\\nfunction b(a, b) {\\n    var c = CryptoJS.enc.Utf8.parse(b),                     //密钥\\n        d = CryptoJS.enc.Utf8.parse(\\\"0102030405060708\\\"),    //初始化向量\\n        e = CryptoJS.enc.Utf8.parse(a),                     //数据\\n        f = CryptoJS.AES.encrypt(e, c, {\\n            iv: d,\\n            mode: CryptoJS.mode.CBC\\n        });\\n    return f.toString()\\n}\\n//生成encSecKey\\nfunction c(a, b, c) {\\n    var d, e;\\n    return setMaxDigits(131),\\n    d = new RSAKeyPair(b, \\\"\\\", c),\\n    e = encryptedString(d, a)\\n}\\n//spider 加密函数\\nfunction d(d, e, f, g) {\\n    var h = {},\\n        i = a(16);  //随机生成一个由a~z,A~Z,0~9组成的长度为a的字符串（AES密钥）\\n    return h.encText = b(d, g),\\n    h.encText = b(h.encText, i),\\n    h.encSecKey = c(i, e, f),\\n    h\\n}\\nfunction e(a, b, d, e) {\\n    var f = {};\\n    return f.encText = c(a + e, b, d),\\n    f\\n}\\nwindow.asrsea = d,\\nwindow.ecnonasr = e\\n```\\n\\nparams的生成过程比较简单，在函数d中可以看到params由两次调用函数b得到：函数b是AES加密的过程，参数a是要加密的数据，参数b是密钥，params经过两次AES加密得到，通过调试可以看到第一次加密：\\n\\n```\\nh.encText = b(d, g)\\n```\\n\\n参数g是固定的：\\n\\n> 0CoJUm6Qyw8W8jud\\n\\n而参数d则是请求参数构成的json字符串，在上面的请求中是：\\n\\n> {\\\"rid\\\":\\\"R_SO_4_1361988914\\\",\\\"offset\\\":\\\"0\\\",\\\"total\\\":\\\"true\\\",\\\"limit\\\":\\\"20\\\",\\\"csrf_token\\\":\\\"\\\"}\\n\\noffset代表获取的第一条评论的偏移量，limit是获取的评论数。\\n\\n第二次加密是使用随机生成的密钥（长度为16）加密第一次加密生成的数据。为了方便测试，在原网页获取随机生成的某密钥以及用这个密钥加密得到的params和encSecKey：\\n\\nkey:\\n\\n> 6lauqIqaJelwkFKM\\n\\nparams:\\n\\n> 1NGJ2rghqo1ToCy5r27rEDqRCNEZxxKk2BvmOQoud6GTNfPZKGRJVFmqfJWeAXYQi4V/++6HKpDjFDfB+TZZ+cmDQF2ywgL9w5Ow8r+mtLG95D7rfUfRkT7GiTn4KMCt+mIM9dtgtIoKXSZ77407F/ZI/GCfslievQ0IfnBAR8SoKQmz8XaQgC1Lxo93VxQ4\\n\\nencSecKey:\\n\\n> 2d1a892a0d7b3101eb00936c4915b2541bc378b58a5ccf6ab3ca939da1fd1fcee7b7456feef0a0d9115c1b5aad8aa64674df8249597e9e74ab66cb5fa84a624f174ed59e786fef748528fff098fa749c11aa06d7d86b7a41d917277efb3f14f8b974ddb2cb5df638ec36d3de8c2f02335cb1990b150a8deafc186c2007dea21c\\n\\n其中AES加密的填充方式是pkcs#7padding，块大小是16 Bytes，加密后的数据默认使用base64编码，根据pkcs#7padding的规则，需要在数据后面添加(16 - n%16)个byte（无论n的长度是否是16的整数倍），且byte的值也为(16 - n%16)。\\n\\n```\\nfrom Crypto.Cipher import AES\\nimport base64\\n\\ndef pkcs7_padding(data):\\n\\tn = 16 - len(data) % 16\\n\\tdata += (chr(n) * n).encode()\\n\\treturn data\\n\\nkey = '0CoJUm6Qyw8W8jud'.encode('utf-8')\\nmode = AES.MODE_CBC\\niv = '0102030405060708'.encode('utf-8')\\n\\naes = AES.new(key, mode, iv)\\n\\ndata = '{\\\"rid\\\":\\\"R_SO_4_1361988914\\\",\\\"offset\\\":\\\"0\\\",\\\"total\\\":\\\"true\\\",\\\"limit\\\":\\\"20\\\",\\\"csrf_token\\\":\\\"\\\"}'.encode('utf-8')\\ndata = pkcs7_padding(data)\\n\\nendata = aes.encrypt(data)\\nendata = base64.b64encode(endata)\\n\\nkey = '6lauqIqaJelwkFKM'.encode('utf-8')\\n\\naes = AES.new(key, mode, iv)\\n\\ndata = pkcs7_padding(endata)\\n\\nendata = aes.encrypt(data)\\nendata = base64.b64encode(endata)\\n\\nprint(endata)\\n```\\n\\n得到的数据与请求中的一致。\\n\\n再分析一下encSecKey的生成过程，在函数d中可以看到encSecKey由函数c生成：函数c将随机生成的密钥（就是上面生成params时AES加密的密钥）经过RSA加密得到encSecKey。\\n关于RSA加密的过程，源代码在这里可以看到:http://www.ohdave.com/rsa\\n\\nRSAKeyPair包括encryptionExponent,decryptionExponent,modulus（分别对应代码中RSAKeyPair函数的三个参数，根据RSA加密的过程：公钥包含两个大整数，n和e，假设要加密的数据是m，则加密后的数据$c ≡ m^e \\\\ (mod \\\\ n)$,这里的e就是encryptionExponent，n就是modulus。\\n\\ne和n两个数应该是固定的（公钥应该不会频繁更换吧），在RSAKeyPair函数打断点得到e和n的值分别是：\\n\\n> 010001\\n\\n和\\n\\n> 00e0b509f6259df8642dbc35662901477df22677ec152b5ff68ace615bb7b725152b3ab17a876aea8a5aa76d2e417629ec4ee341f56135fccf695280104e0312ecbda92557c93870114af6c9d05c4f7f0c3685b7a46bee255932575cce10b424d813cfe4875d3e82047b97ddef52741d546b8e289dc6935b3ece0462db0a22b8e7\\n\\n一开始我尝试直接对数据进行加密：\\n\\n```\\nimport rsa\\nimport binascii\\n\\nrsa_n = int(\\\"00e0b509f6259df8642dbc35662901477df22677ec152b5ff68ace615bb7b725152b3ab17a876aea8a5aa76d2e417629ec4ee341f56135fccf695280104e0312ecbda92557c93870114af6c9d05c4f7f0c3685b7a46bee255932575cce10b424d813cfe4875d3e82047b97ddef52741d546b8e289dc6935b3ece0462db0a22b8e7\\\", 16)\\nrsa_e = int(\\\"010001\\\", 16)\\n\\nkey = rsa.PublicKey(rsa_n, rsa_e)\\ndata = \\\"6lauqIqaJelwkFKM\\\".encode()\\n\\nencrypted_data = rsa.encrypt(data, key)\\nhex_str = binascii.b2a_hex(encrypted_data)\\n\\nprint(hex_str)\\n```\\n\\n尝试请求接口，但是没有返回数据，猜测跟数据转换成的整数有关，回到js代码中加密的代码段看看：\\n\\n```\\nfunction encryptedString(a, b) {\\n    for (var f, g, h, i, j, k, l, c = new Array, d = b.length, e = 0; d > e;) c[e] = b.charCodeAt(e),\\n    e++;\\n    for (; 0 != c.length % a.chunkSize;) c[e++] = 0;\\n    for (f = c.length, g = \\\"\\\", e = 0; f > e; e += a.chunkSize) {\\n        for (j = new BigInt, h = 0, i = e; i < e + a.chunkSize; ++h) {\\n            j.digits[h] = c[i++]\\n            j.digits[h] += c[i++] << 8\\n        }\\n        //j是待加密数据转换后的整数\\n        k = a.barrett.powMod(j, a.e),\\n        l = 16 == a.radix ? biToHex(k) : biToString(k, a.radix),\\n        g += l + \\\" \\\"\\n    }\\n    return g.substring(0, g.length - 1)\\n}\\n```\\n\\n在本地测试输出j的值：\\n\\n```\\nconsole.log(biToHex(j))\\n```\\n\\n对这个值进行加密：\\n\\n```\\nhex_str = '4d4b466b776c654a6171497175616c36'\\nrsa_m = int(hex_str, 16)\\n\\nrsa_c = rsa.core.encrypt_int(rsa_m, rsa_e, rsa_n)\\n\\nprint(hex(rsa_c))\\n```\\n\\n这次得到的数据跟请求中的参数一致（RSA加密生成的数据可能每次都不一样，跟填充方式有关），查阅RSA相关的资料知道算法是在固定长度的块上面进行操作，如果数据长度大于块大小要分割，小于要填充，根据上面的代码，这里的填充方式是直接在后面补'\\\\0'，加密时对每块进行加密，生成的数据之间用空格隔开，至于块大小怎么确定暂时不知道，先不管。\\n为了了解数据是怎么转换成整数的，需要了解BigInt的结构，通过调试可以知道BigInt包含一个数组，观察上面的代码可以知道数据转换成BigInt的过程是把每两个的字符的ascii码值逆序存放到数组的一个元素中，例如字符串：\\\"cd\\\",写成二进制的形式是：\\n\\n> 0110 0011 / 0010 0100\\n\\n放到BigInt中是：\\n\\n> 0010 0100 0110 0011\\n\\n接下来看看BigInt是怎么转换成整数的，找到BigInt转Hex的函数（因为这个函数最简单2333）：\\n\\n```\\nfunction reverseStr(a) {\\n    var c, b = \\\"\\\";\\n    for (c = a.length - 1; c > -1; --c) b += a.charAt(c);\\n    return b\\n}\\nfunction digitToHex(a) {\\n    var b = 15,\\n        c = \\\"\\\";\\n    for (i = 0; 4 > i; ++i) c += hexToChar[a & b],\\n    a >>>= 4;\\n    return reverseStr(c)\\n}\\nfunction biToHex(a) {\\n    var d, b = \\\"\\\";\\n    for (biHighIndex(a), d = biHighIndex(a); d > -1; --d) b += digitToHex(a.digits[d]);\\n    return\\n```\\n\\n这个函数逆序对BigInt的数组元素进行如下操作：从低位开始每4个二进制位转对应的16进制，并逆序输出。\\n所以数据转整数的整个过程其实就是把数据以小端方式存储（跟直接加密的区别就在于大端和小端），例如字符串\\\"cdef\\\"：\\n\\n0110 0011 / 0010 0100 / 0110 0101 / 0110 0110\\n\\n转换成小端：\\n\\n0110 0110 / 0110 0101 / 0010 0100 / 0110 0011\\n\\n转换成16进制就是：\\n\\n0x66656463\\n\\n测试一下：\\n\\n```\\ntable = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f']\\n\\ndata = \\\"6lauqIqaJelwkFKM\\\".encode()\\nhex_str = ''\\n\\nfor i in range(len(data) - 1, -1, -1):\\n\\thex_str += table[(data[i] & 0xf0) >> 4]\\n\\thex_str += table[data[i] & 0xf]\\n\\nrsa_m = int(hex_str, 16)\\n\\nrsa_c = rsa.core.encrypt_int(rsa_m, rsa_e, rsa_n)\\n\\nprint(hex(rsa_c))\\n```\\n\\n这次得到的结果与请求参数的一致，再次发送请求已经可以获取到数据了。\\n\\n![avatar](https://s2.ax1x.com/2019/06/04/VYLrZQ.png)\\n\\n（看了文档才知道白折腾了。。。文档里面有说明是逆序的）\\n![avatar](https://s2.ax1x.com/2019/06/04/VYxdHO.png)\\n\\n经过上面的分析可以大概得出请求的流程：前端先把请求的参数包装成json字符串，使用一个固定的密钥加密得到第一次加密的数据，再使用随机生成的密钥加密第一次加密生成的数据最终得到传递给服务器的参数，接着加密随机生成的密钥传递给服务器。服务器端用私钥解密得到前端随机生成的密钥，再用这个密钥对加密过的参数解密，经过两次解密最终得到参数。\\n\\n关于csrf_token参数，这个是用户登录以后才会有的，之后可能会补充更新一下这部分的接口，另外如果用postman之类的工具请求接口好像直接把参数放在query部分才行，一开始放到post body获取不到数据。\\n\\n最后把获取评论的接口贴一下：\\n\\nurl: https://music.163.com/weapi/v1/resource/comments/ID\\nmethod: POST\\nquery: csrf_token\\nparams: ID(string), offset(int), limit(int), total(boolean), csrf_token(string)\\n\\n当请求歌曲评论时，ID的格式是R_SO_4_ + 歌曲ID。\\n歌单：A_PL_0 + 歌单ID。\\n电台：A_DJ_1 + 电台ID\\n\\n其他类型的评论ID可以在开发者模式下获取相应请求url得到。\\n\\n### 2.获取歌词 ###\\n\\n通过上面的分析已经得到参数加密的方法，所以我们只需要知道请求这个接口都有什么参数就可以了。\\n\\nexample:\\n\\n> {\\\"id\\\":\\\"1361988914\\\",\\\"lv\\\":-1,\\\"tv\\\":-1,\\\"csrf_token\\\":\\\"\\\"}\\n\\nlv,tv这几个参数暂时不知道作用是什么，有兴趣的可以自己研究研究。\\n\\nurl: https://music.163.com/weapi/song/lyric\\nmethod: POST\\nquery: csrf_token\\nparams: ID(int), lv(int), lv(int), csrf_token(string)\\n\\n### 3.获取播放列表 ###\\n\\n在网页打开播放列表得到的列表详情是在后端处理过直接返回给浏览器的，没有暴露接口，但是通过官方提供的iframe插件可以得到一个接口，例如这个歌单：https://music.163.com/outchain/player?type=0&id=2821194580&auto=1&height=430 ，加密方式跟上文一样：\\n\\nexample:\\n\\n>{\\\"id\\\":\\\"2821194580\\\",\\\"ids\\\":\\\"[\\\\\\\"2821194580\\\\\\\"]\\\",\\\"limit\\\":10000,\\\"offset\\\":0,\\\"csrf_token\\\":\\\"\\\"}\\n\\nid参数是必须的，ids参数的作用暂时不知道是什么。但是这个接口目前好像没办法正常使用，limit和offset设置是无效的，一次最多获取1000条歌曲数据，而且也无法获取订阅状态，还需要再研究研究。\\n\\nurl: https://music.163.com/weapi/playlist/detail\\nmethod: POST\\nparams: id(int), ids(array), limit(int), offset(int), csrf_token(string)\\n\\n### 4.搜索 ###\\n\\n#### 4.1 推荐 ####\\n\\nexample：\\n\\n> {\\\"s\\\":\\\"陈奕迅\\\",\\\"limit\\\":\\\"8\\\",\\\"csrf_token\\\":\\\"\\\"}\\n\\nurl: https://music.163.com/weapi/cloudsearch/get/web\\nmethod: POST\\nquery: csrf_token\\nparams: s(string), limit(int), csrf_token(string)\\n\\n#### 4.2 各种搜索 ####\\n\\nexample:\\n\\n> {\\\"hlpretag\\\":\\\"<span class=\\\\\\\"s-fc7\\\\\\\">\\\",\\\"hlposttag\\\":\\\"</span>\\\",\\\"s\\\":\\\"陈奕迅\\\",\\\"type\\\":\\\"1\\\",\\\"offset\\\":\\\"0\\\",\\\"total\\\":\\\"true\\\",\\\"limit\\\":\\\"30\\\",\\\"csrf_token\\\":\\\"\\\"}\\n\\n前面hlpretag和hlposttag暂时不知道作用是什么，可以不加进去，如果要加进去加密的时候记得要把转义符号也当成字符串的一部分，在python中可以在字符串前面加r表示raw string。\\n其中type是搜索的类型：\\n1 歌曲\\n10 专辑\\n100 歌手\\n1000 歌单\\n1002 用户\\n1006 歌词\\n1009 电台\\n1014 视频\\n其他的参数比较明显就不细说了。\\n\\nurl: https://music.163.com/weapi/cloudsearch/get/web\\nmethod: POST\\nquery: csrf_token\\nparams: s(string), type(int), offset(int), total(int), limit(int), csrf_token(string)\\n\\n<script src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/latest.js?config=TeX-MML-AM_CHTML' async>\\n</script>\\n<script type=\\\"text/x-mathjax-config\\\">\\n    MathJax.Hub.Config({\\n    tex2jax: {inlineMath: [['$','$'], ['\\\\\\\\(','\\\\\\\\)']]}\\n    });\\n</script>\\n\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]]}",
            "created_at_ts": 1559727850412,
            "created_at": "2019-06-05T09:44:10.000Z"
          },
          {
            "id": "5cf894d2c199180df866a247",
            "post_id": "5cf3b9b16e5789135f7785a7",
            "mobiledoc": "{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"记得很久以前爬过评论的API，请求参数是加密过的，调用过程好像有点复杂，后来直接用PyV8调用javascript加密得到参数，但是加密的过程不是很清楚，刚好想找个理由学一学Python，这次就用纯Python写吧。\\n\\n先随便选一个接口分析一下，就选评论接口吧。\\n\\n### 1.获取评论 ###\\n\\n进入Chrome开发者模式可以看到\\n\\n![avatar](https://s2.ax1x.com/2019/06/02/VGR8Yj.png)\\n![avatar](https://s2.ax1x.com/2019/06/02/VGWc5Q.png)\\n\\n这个就是获取评论的接口，请求方式是POST，请求体有两个参数params和encSecKey，在请求的Initiator可以看到发出请求的代码在core_xxxx.js这个文件，代码肯定经过混淆，先下载到本地格式化一下。在js文件中搜索encSecKey，找到生成参数的相关代码段，可以看到参数由asrsea这个函数生成。\\n\\n```\\nvar bYc0x = window.asrsea(JSON.stringify(i8a), bkY9P([\\\"流泪\\\", \\\"强\\\"]), bkY9P(VM5R.md), bkY9P([\\\"爱心\\\", \\\"女孩\\\", \\\"惊恐\\\", \\\"大笑\\\"]));\\ne8e.data = k8c.cz9q({\\n    params: bYc0x.encText,\\n    encSecKey: bYc0x.encSecKey\\n})\\n```\\n\\n继续在js文件中搜索这个函数，可以看到生成参数的相关函数：\\n\\n```\\nfunction a(a) {\\n    var d, e, b = \\\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\\\",\\n        c = \\\"\\\";\\n    for (d = 0; a > d; d += 1) e = Math.random() * b.length,\\n    e = Math.floor(e),\\n    c += b.charAt(e);\\n    return c\\n}\\n//生成encText，即params\\nfunction b(a, b) {\\n    var c = CryptoJS.enc.Utf8.parse(b),                     //密钥\\n        d = CryptoJS.enc.Utf8.parse(\\\"0102030405060708\\\"),    //初始化向量\\n        e = CryptoJS.enc.Utf8.parse(a),                     //数据\\n        f = CryptoJS.AES.encrypt(e, c, {\\n            iv: d,\\n            mode: CryptoJS.mode.CBC\\n        });\\n    return f.toString()\\n}\\n//生成encSecKey\\nfunction c(a, b, c) {\\n    var d, e;\\n    return setMaxDigits(131),\\n    d = new RSAKeyPair(b, \\\"\\\", c),\\n    e = encryptedString(d, a)\\n}\\n//spider 加密函数\\nfunction d(d, e, f, g) {\\n    var h = {},\\n        i = a(16);  //随机生成一个由a~z,A~Z,0~9组成的长度为a的字符串（AES密钥）\\n    return h.encText = b(d, g),\\n    h.encText = b(h.encText, i),\\n    h.encSecKey = c(i, e, f),\\n    h\\n}\\nfunction e(a, b, d, e) {\\n    var f = {};\\n    return f.encText = c(a + e, b, d),\\n    f\\n}\\nwindow.asrsea = d,\\nwindow.ecnonasr = e\\n```\\n\\nparams的生成过程比较简单，在函数d中可以看到params由两次调用函数b得到：函数b是AES加密的过程，参数a是要加密的数据，参数b是密钥，params经过两次AES加密得到，通过调试可以看到第一次加密：\\n\\n```\\nh.encText = b(d, g)\\n```\\n\\n参数g是固定的：\\n\\n> 0CoJUm6Qyw8W8jud\\n\\n而参数d则是请求参数构成的json字符串，在上面的请求中是：\\n\\n> {\\\"rid\\\":\\\"R_SO_4_1361988914\\\",\\\"offset\\\":\\\"0\\\",\\\"total\\\":\\\"true\\\",\\\"limit\\\":\\\"20\\\",\\\"csrf_token\\\":\\\"\\\"}\\n\\noffset代表获取的第一条评论的偏移量，limit是获取的评论数。\\n\\n第二次加密是使用随机生成的密钥（长度为16）加密第一次加密生成的数据。为了方便测试，在原网页获取随机生成的某密钥以及用这个密钥加密得到的params和encSecKey：\\n\\nkey:\\n\\n> 6lauqIqaJelwkFKM\\n\\nparams:\\n\\n> 1NGJ2rghqo1ToCy5r27rEDqRCNEZxxKk2BvmOQoud6GTNfPZKGRJVFmqfJWeAXYQi4V/++6HKpDjFDfB+TZZ+cmDQF2ywgL9w5Ow8r+mtLG95D7rfUfRkT7GiTn4KMCt+mIM9dtgtIoKXSZ77407F/ZI/GCfslievQ0IfnBAR8SoKQmz8XaQgC1Lxo93VxQ4\\n\\nencSecKey:\\n\\n> 2d1a892a0d7b3101eb00936c4915b2541bc378b58a5ccf6ab3ca939da1fd1fcee7b7456feef0a0d9115c1b5aad8aa64674df8249597e9e74ab66cb5fa84a624f174ed59e786fef748528fff098fa749c11aa06d7d86b7a41d917277efb3f14f8b974ddb2cb5df638ec36d3de8c2f02335cb1990b150a8deafc186c2007dea21c\\n\\n其中AES加密的填充方式是pkcs#7padding，块大小是16 Bytes，加密后的数据默认使用base64编码，根据pkcs#7padding的规则，需要在数据后面添加(16 - n%16)个byte（无论n的长度是否是16的整数倍），且byte的值也为(16 - n%16)。\\n\\n```\\nfrom Crypto.Cipher import AES\\nimport base64\\n\\ndef pkcs7_padding(data):\\n\\tn = 16 - len(data) % 16\\n\\tdata += (chr(n) * n).encode()\\n\\treturn data\\n\\nkey = '0CoJUm6Qyw8W8jud'.encode('utf-8')\\nmode = AES.MODE_CBC\\niv = '0102030405060708'.encode('utf-8')\\n\\naes = AES.new(key, mode, iv)\\n\\ndata = '{\\\"rid\\\":\\\"R_SO_4_1361988914\\\",\\\"offset\\\":\\\"0\\\",\\\"total\\\":\\\"true\\\",\\\"limit\\\":\\\"20\\\",\\\"csrf_token\\\":\\\"\\\"}'.encode('utf-8')\\ndata = pkcs7_padding(data)\\n\\nendata = aes.encrypt(data)\\nendata = base64.b64encode(endata)\\n\\nkey = '6lauqIqaJelwkFKM'.encode('utf-8')\\n\\naes = AES.new(key, mode, iv)\\n\\ndata = pkcs7_padding(endata)\\n\\nendata = aes.encrypt(data)\\nendata = base64.b64encode(endata)\\n\\nprint(endata)\\n```\\n\\n得到的数据与请求中的一致。\\n\\n再分析一下encSecKey的生成过程，在函数d中可以看到encSecKey由函数c生成：函数c将随机生成的密钥（就是上面生成params时AES加密的密钥）经过RSA加密得到encSecKey。\\n关于RSA加密的过程，源代码在这里可以看到:http://www.ohdave.com/rsa\\n\\nRSAKeyPair包括encryptionExponent,decryptionExponent,modulus（分别对应代码中RSAKeyPair函数的三个参数，根据RSA加密的过程：公钥包含两个大整数，n和e，假设要加密的数据是m，则加密后的数据$c ≡ m^e \\\\ (mod \\\\ n)$,这里的e就是encryptionExponent，n就是modulus。\\n\\ne和n两个数应该是固定的（公钥应该不会频繁更换吧），在RSAKeyPair函数打断点得到e和n的值分别是：\\n\\n> 010001\\n\\n和\\n\\n> 00e0b509f6259df8642dbc35662901477df22677ec152b5ff68ace615bb7b725152b3ab17a876aea8a5aa76d2e417629ec4ee341f56135fccf695280104e0312ecbda92557c93870114af6c9d05c4f7f0c3685b7a46bee255932575cce10b424d813cfe4875d3e82047b97ddef52741d546b8e289dc6935b3ece0462db0a22b8e7\\n\\n一开始我尝试直接对数据进行加密：\\n\\n```\\nimport rsa\\nimport binascii\\n\\nrsa_n = int(\\\"00e0b509f6259df8642dbc35662901477df22677ec152b5ff68ace615bb7b725152b3ab17a876aea8a5aa76d2e417629ec4ee341f56135fccf695280104e0312ecbda92557c93870114af6c9d05c4f7f0c3685b7a46bee255932575cce10b424d813cfe4875d3e82047b97ddef52741d546b8e289dc6935b3ece0462db0a22b8e7\\\", 16)\\nrsa_e = int(\\\"010001\\\", 16)\\n\\nkey = rsa.PublicKey(rsa_n, rsa_e)\\ndata = \\\"6lauqIqaJelwkFKM\\\".encode()\\n\\nencrypted_data = rsa.encrypt(data, key)\\nhex_str = binascii.b2a_hex(encrypted_data)\\n\\nprint(hex_str)\\n```\\n\\n尝试请求接口，但是没有返回数据，猜测跟数据转换成的整数有关，回到js代码中加密的代码段看看：\\n\\n```\\nfunction encryptedString(a, b) {\\n    for (var f, g, h, i, j, k, l, c = new Array, d = b.length, e = 0; d > e;) c[e] = b.charCodeAt(e),\\n    e++;\\n    for (; 0 != c.length % a.chunkSize;) c[e++] = 0;\\n    for (f = c.length, g = \\\"\\\", e = 0; f > e; e += a.chunkSize) {\\n        for (j = new BigInt, h = 0, i = e; i < e + a.chunkSize; ++h) {\\n            j.digits[h] = c[i++]\\n            j.digits[h] += c[i++] << 8\\n        }\\n        //j是待加密数据转换后的整数\\n        k = a.barrett.powMod(j, a.e),\\n        l = 16 == a.radix ? biToHex(k) : biToString(k, a.radix),\\n        g += l + \\\" \\\"\\n    }\\n    return g.substring(0, g.length - 1)\\n}\\n```\\n\\n在本地测试输出j的值：\\n\\n```\\nconsole.log(biToHex(j))\\n```\\n\\n对这个值进行加密：\\n\\n```\\nhex_str = '4d4b466b776c654a6171497175616c36'\\nrsa_m = int(hex_str, 16)\\n\\nrsa_c = rsa.core.encrypt_int(rsa_m, rsa_e, rsa_n)\\n\\nprint(hex(rsa_c))\\n```\\n\\n这次得到的数据跟请求中的参数一致（RSA加密生成的数据可能每次都不一样，跟填充方式有关），查阅RSA相关的资料知道算法是在固定长度的块上面进行操作，如果数据长度大于块大小要分割，小于要填充，根据上面的代码，这里的填充方式是直接在后面补'\\\\0'，加密时对每块进行加密，生成的数据之间用空格隔开，至于块大小怎么确定暂时不知道，先不管。\\n为了了解数据是怎么转换成整数的，需要了解BigInt的结构，通过调试可以知道BigInt包含一个数组，观察上面的代码可以知道数据转换成BigInt的过程是把每两个的字符的ascii码值逆序存放到数组的一个元素中，例如字符串：\\\"cd\\\",写成二进制的形式是：\\n\\n> 0110 0011 / 0010 0100\\n\\n放到BigInt中是：\\n\\n> 0010 0100 0110 0011\\n\\n接下来看看BigInt是怎么转换成整数的，找到BigInt转Hex的函数（因为这个函数最简单2333）：\\n\\n```\\nfunction reverseStr(a) {\\n    var c, b = \\\"\\\";\\n    for (c = a.length - 1; c > -1; --c) b += a.charAt(c);\\n    return b\\n}\\nfunction digitToHex(a) {\\n    var b = 15,\\n        c = \\\"\\\";\\n    for (i = 0; 4 > i; ++i) c += hexToChar[a & b],\\n    a >>>= 4;\\n    return reverseStr(c)\\n}\\nfunction biToHex(a) {\\n    var d, b = \\\"\\\";\\n    for (biHighIndex(a), d = biHighIndex(a); d > -1; --d) b += digitToHex(a.digits[d]);\\n    return\\n```\\n\\n这个函数逆序对BigInt的数组元素进行如下操作：从低位开始每4个二进制位转对应的16进制，并逆序输出。\\n所以数据转整数的整个过程其实就是把数据以小端方式存储（跟直接加密的区别就在于大端和小端），例如字符串\\\"cdef\\\"：\\n\\n0110 0011 / 0010 0100 / 0110 0101 / 0110 0110\\n\\n转换成小端：\\n\\n0110 0110 / 0110 0101 / 0010 0100 / 0110 0011\\n\\n转换成16进制就是：\\n\\n0x66656463\\n\\n测试一下：\\n\\n```\\ntable = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f']\\n\\ndata = \\\"6lauqIqaJelwkFKM\\\".encode()\\nhex_str = ''\\n\\nfor i in range(len(data) - 1, -1, -1):\\n\\thex_str += table[(data[i] & 0xf0) >> 4]\\n\\thex_str += table[data[i] & 0xf]\\n\\nrsa_m = int(hex_str, 16)\\n\\nrsa_c = rsa.core.encrypt_int(rsa_m, rsa_e, rsa_n)\\n\\nprint(hex(rsa_c))\\n```\\n\\n这次得到的结果与请求参数的一致，再次发送请求已经可以获取到数据了。\\n\\n![avatar](https://s2.ax1x.com/2019/06/04/VYLrZQ.png)\\n\\n（看了文档才知道白折腾了。。。文档里面有说明是逆序的）\\n![avatar](https://s2.ax1x.com/2019/06/04/VYxdHO.png)\\n\\n经过上面的分析可以大概得出请求的流程：前端先把请求的参数包装成json字符串，使用一个固定的密钥加密得到第一次加密的数据，再使用随机生成的密钥加密第一次加密生成的数据最终得到传递给服务器的参数，接着加密随机生成的密钥传递给服务器。服务器端用私钥解密得到前端随机生成的密钥，再用这个密钥对加密过的参数解密，经过两次解密最终得到参数。\\n\\n关于csrf_token参数，这个是用户登录以后才会有的，之后可能会补充更新一下这部分的接口，另外如果用postman之类的工具请求接口好像直接把参数放在query部分才行，一开始放到post body获取不到数据。\\n\\n最后把获取评论的接口贴一下：\\n\\nurl: https://music.163.com/weapi/v1/resource/comments/ID\\nmethod: POST\\nquery: csrf_token\\nparams: ID(string), offset(int), limit(int), total(boolean), csrf_token(string)\\n\\n当请求歌曲评论时，ID的格式是R_SO_4_ + 歌曲ID。\\n歌单：A_PL_0 + 歌单ID。\\n电台：A_DJ_1 + 电台ID\\n\\n其他类型的评论ID可以在开发者模式下获取相应请求url得到。\\n\\n### 2.获取歌词 ###\\n\\n通过上面的分析已经得到参数加密的方法，所以我们只需要知道请求这个接口都有什么参数就可以了。\\n\\nexample:\\n\\n> {\\\"id\\\":\\\"1361988914\\\",\\\"lv\\\":-1,\\\"tv\\\":-1,\\\"csrf_token\\\":\\\"\\\"}\\n\\nlv,tv这几个参数暂时不知道作用是什么，有兴趣的可以自己研究研究。\\n\\nurl: https://music.163.com/weapi/song/lyric\\nmethod: POST\\nquery: csrf_token\\nparams: ID(int), lv(int), lv(int), csrf_token(string)\\n\\n### 3.获取播放列表 ###\\n\\n在网页打开播放列表得到的列表详情是在后端处理过直接返回给浏览器的，没有暴露接口，但是通过官方提供的iframe插件可以得到一个接口，例如这个歌单：https://music.163.com/outchain/player?type=0&id=2821194580&auto=1&height=430 ，加密方式跟上文一样：\\n\\nexample:\\n\\n>{\\\"id\\\":\\\"2821194580\\\",\\\"ids\\\":\\\"[\\\\\\\"2821194580\\\\\\\"]\\\",\\\"limit\\\":10000,\\\"offset\\\":0,\\\"csrf_token\\\":\\\"\\\"}\\n\\nid参数是必须的，ids参数的作用暂时不知道是什么。但是这个接口目前好像没办法正常使用，limit和offset设置是无效的，一次最多获取1000条歌曲数据，而且也无法获取订阅状态，还需要再研究研究。\\n\\nurl: https://music.163.com/weapi/playlist/detail\\nmethod: POST\\nparams: id(int), ids(array), limit(int), offset(int), csrf_token(string)\\n\\n### 4.搜索 ###\\n\\n#### 4.1 推荐 ####\\n\\nexample：\\n\\n> {\\\"s\\\":\\\"陈奕迅\\\",\\\"limit\\\":\\\"8\\\",\\\"csrf_token\\\":\\\"\\\"}\\n\\nurl: https://music.163.com/weapi/cloudsearch/get/web\\nmethod: POST\\nquery: csrf_token\\nparams: s(string), limit(int), csrf_token(string)\\n\\n#### 4.2 各种搜索 ####\\n\\nexample:\\n\\n> {\\\"hlpretag\\\":\\\"<span class=\\\\\\\"s-fc7\\\\\\\">\\\",\\\"hlposttag\\\":\\\"</span>\\\",\\\"s\\\":\\\"陈奕迅\\\",\\\"type\\\":\\\"1\\\",\\\"offset\\\":\\\"0\\\",\\\"total\\\":\\\"true\\\",\\\"limit\\\":\\\"30\\\",\\\"csrf_token\\\":\\\"\\\"}\\n\\n前面hlpretag和hlposttag暂时不知道作用是什么，可以不加进去，如果要加进去加密的时候记得要把转义符号也当成字符串的一部分，在python中可以在字符串前面加r表示raw string。\\n其中type是搜索的类型：\\n1 歌曲\\n10 专辑\\n100 歌手\\n1000 歌单\\n1002 用户\\n1006 歌词\\n1009 电台\\n1014 视频\\n其他的参数比较明显就不细说了。\\n\\nurl: https://music.163.com/weapi/cloudsearch/get/web\\nmethod: POST\\nquery: csrf_token\\nparams: s(string), type(int), offset(int), total(int), limit(int), csrf_token(string)\\n\\n### 5.用户Token ###\\n\\n\\n\\n<script src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/latest.js?config=TeX-MML-AM_CHTML' async>\\n</script>\\n<script type=\\\"text/x-mathjax-config\\\">\\n    MathJax.Hub.Config({\\n    tex2jax: {inlineMath: [['$','$'], ['\\\\\\\\(','\\\\\\\\)']]}\\n    });\\n</script>\\n\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]]}",
            "created_at_ts": 1559794898777,
            "created_at": "2019-06-06T04:21:38.000Z"
          },
          {
            "id": "5cfa53f8c199180df866a249",
            "post_id": "5cf3b9b16e5789135f7785a7",
            "mobiledoc": "{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"记得很久以前爬过评论的API，请求参数是加密过的，调用过程好像有点复杂，后来直接用PyV8调用javascript加密得到参数，但是加密的过程不是很清楚，刚好想找个理由学一学Python，这次就用纯Python写吧。\\n\\n先随便选一个接口分析一下，就选评论接口吧。\\n\\n### 1.获取评论 ###\\n\\n进入Chrome开发者模式可以看到\\n\\n![avatar](https://s2.ax1x.com/2019/06/02/VGR8Yj.png)\\n![avatar](https://s2.ax1x.com/2019/06/02/VGWc5Q.png)\\n\\n这个就是获取评论的接口，请求方式是POST，请求体有两个参数params和encSecKey，在请求的Initiator可以看到发出请求的代码在core_xxxx.js这个文件，代码肯定经过混淆，先下载到本地格式化一下。在js文件中搜索encSecKey，找到生成参数的相关代码段，可以看到参数由asrsea这个函数生成。\\n\\n```\\nvar bYc0x = window.asrsea(JSON.stringify(i8a), bkY9P([\\\"流泪\\\", \\\"强\\\"]), bkY9P(VM5R.md), bkY9P([\\\"爱心\\\", \\\"女孩\\\", \\\"惊恐\\\", \\\"大笑\\\"]));\\ne8e.data = k8c.cz9q({\\n    params: bYc0x.encText,\\n    encSecKey: bYc0x.encSecKey\\n})\\n```\\n\\n继续在js文件中搜索这个函数，可以看到生成参数的相关函数：\\n\\n```\\nfunction a(a) {\\n    var d, e, b = \\\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\\\",\\n        c = \\\"\\\";\\n    for (d = 0; a > d; d += 1) e = Math.random() * b.length,\\n    e = Math.floor(e),\\n    c += b.charAt(e);\\n    return c\\n}\\n//生成encText，即params\\nfunction b(a, b) {\\n    var c = CryptoJS.enc.Utf8.parse(b),                     //密钥\\n        d = CryptoJS.enc.Utf8.parse(\\\"0102030405060708\\\"),    //初始化向量\\n        e = CryptoJS.enc.Utf8.parse(a),                     //数据\\n        f = CryptoJS.AES.encrypt(e, c, {\\n            iv: d,\\n            mode: CryptoJS.mode.CBC\\n        });\\n    return f.toString()\\n}\\n//生成encSecKey\\nfunction c(a, b, c) {\\n    var d, e;\\n    return setMaxDigits(131),\\n    d = new RSAKeyPair(b, \\\"\\\", c),\\n    e = encryptedString(d, a)\\n}\\n//spider 加密函数\\nfunction d(d, e, f, g) {\\n    var h = {},\\n        i = a(16);  //随机生成一个由a~z,A~Z,0~9组成的长度为a的字符串（AES密钥）\\n    return h.encText = b(d, g),\\n    h.encText = b(h.encText, i),\\n    h.encSecKey = c(i, e, f),\\n    h\\n}\\nfunction e(a, b, d, e) {\\n    var f = {};\\n    return f.encText = c(a + e, b, d),\\n    f\\n}\\nwindow.asrsea = d,\\nwindow.ecnonasr = e\\n```\\n\\nparams的生成过程比较简单，在函数d中可以看到params由两次调用函数b得到：函数b是AES加密的过程，参数a是要加密的数据，参数b是密钥，params经过两次AES加密得到，通过调试可以看到第一次加密：\\n\\n```\\nh.encText = b(d, g)\\n```\\n\\n参数g是固定的：\\n\\n> 0CoJUm6Qyw8W8jud\\n\\n而参数d则是请求参数构成的json字符串，在上面的请求中是：\\n\\n> {\\\"rid\\\":\\\"R_SO_4_1361988914\\\",\\\"offset\\\":\\\"0\\\",\\\"total\\\":\\\"true\\\",\\\"limit\\\":\\\"20\\\",\\\"csrf_token\\\":\\\"\\\"}\\n\\noffset代表获取的第一条评论的偏移量，limit是获取的评论数。\\n\\n第二次加密是使用随机生成的密钥（长度为16）加密第一次加密生成的数据。为了方便测试，在原网页获取随机生成的某密钥以及用这个密钥加密得到的params和encSecKey：\\n\\nkey:\\n\\n> 6lauqIqaJelwkFKM\\n\\nparams:\\n\\n> 1NGJ2rghqo1ToCy5r27rEDqRCNEZxxKk2BvmOQoud6GTNfPZKGRJVFmqfJWeAXYQi4V/++6HKpDjFDfB+TZZ+cmDQF2ywgL9w5Ow8r+mtLG95D7rfUfRkT7GiTn4KMCt+mIM9dtgtIoKXSZ77407F/ZI/GCfslievQ0IfnBAR8SoKQmz8XaQgC1Lxo93VxQ4\\n\\nencSecKey:\\n\\n> 2d1a892a0d7b3101eb00936c4915b2541bc378b58a5ccf6ab3ca939da1fd1fcee7b7456feef0a0d9115c1b5aad8aa64674df8249597e9e74ab66cb5fa84a624f174ed59e786fef748528fff098fa749c11aa06d7d86b7a41d917277efb3f14f8b974ddb2cb5df638ec36d3de8c2f02335cb1990b150a8deafc186c2007dea21c\\n\\n其中AES加密的填充方式是pkcs#7padding，块大小是16 Bytes，加密后的数据默认使用base64编码，根据pkcs#7padding的规则，需要在数据后面添加(16 - n%16)个byte（无论n的长度是否是16的整数倍），且byte的值也为(16 - n%16)。\\n\\n```\\nfrom Crypto.Cipher import AES\\nimport base64\\n\\ndef pkcs7_padding(data):\\n\\tn = 16 - len(data) % 16\\n\\tdata += (chr(n) * n).encode()\\n\\treturn data\\n\\nkey = '0CoJUm6Qyw8W8jud'.encode('utf-8')\\nmode = AES.MODE_CBC\\niv = '0102030405060708'.encode('utf-8')\\n\\naes = AES.new(key, mode, iv)\\n\\ndata = '{\\\"rid\\\":\\\"R_SO_4_1361988914\\\",\\\"offset\\\":\\\"0\\\",\\\"total\\\":\\\"true\\\",\\\"limit\\\":\\\"20\\\",\\\"csrf_token\\\":\\\"\\\"}'.encode('utf-8')\\ndata = pkcs7_padding(data)\\n\\nendata = aes.encrypt(data)\\nendata = base64.b64encode(endata)\\n\\nkey = '6lauqIqaJelwkFKM'.encode('utf-8')\\n\\naes = AES.new(key, mode, iv)\\n\\ndata = pkcs7_padding(endata)\\n\\nendata = aes.encrypt(data)\\nendata = base64.b64encode(endata)\\n\\nprint(endata)\\n```\\n\\n得到的数据与请求中的一致。\\n\\n再分析一下encSecKey的生成过程，在函数d中可以看到encSecKey由函数c生成：函数c将随机生成的密钥（就是上面生成params时AES加密的密钥）经过RSA加密得到encSecKey。\\n关于RSA加密的过程，源代码在这里可以看到:http://www.ohdave.com/rsa\\n\\nRSAKeyPair包括encryptionExponent,decryptionExponent,modulus（分别对应代码中RSAKeyPair函数的三个参数，根据RSA加密的过程：公钥包含两个大整数，n和e，假设要加密的数据是m，则加密后的数据$c ≡ m^e \\\\ (mod \\\\ n)$,这里的e就是encryptionExponent，n就是modulus。\\n\\ne和n两个数应该是固定的（公钥应该不会频繁更换吧），在RSAKeyPair函数打断点得到e和n的值分别是：\\n\\n> 010001\\n\\n和\\n\\n> 00e0b509f6259df8642dbc35662901477df22677ec152b5ff68ace615bb7b725152b3ab17a876aea8a5aa76d2e417629ec4ee341f56135fccf695280104e0312ecbda92557c93870114af6c9d05c4f7f0c3685b7a46bee255932575cce10b424d813cfe4875d3e82047b97ddef52741d546b8e289dc6935b3ece0462db0a22b8e7\\n\\n一开始我尝试直接对数据进行加密：\\n\\n```\\nimport rsa\\nimport binascii\\n\\nrsa_n = int(\\\"00e0b509f6259df8642dbc35662901477df22677ec152b5ff68ace615bb7b725152b3ab17a876aea8a5aa76d2e417629ec4ee341f56135fccf695280104e0312ecbda92557c93870114af6c9d05c4f7f0c3685b7a46bee255932575cce10b424d813cfe4875d3e82047b97ddef52741d546b8e289dc6935b3ece0462db0a22b8e7\\\", 16)\\nrsa_e = int(\\\"010001\\\", 16)\\n\\nkey = rsa.PublicKey(rsa_n, rsa_e)\\ndata = \\\"6lauqIqaJelwkFKM\\\".encode()\\n\\nencrypted_data = rsa.encrypt(data, key)\\nhex_str = binascii.b2a_hex(encrypted_data)\\n\\nprint(hex_str)\\n```\\n\\n尝试请求接口，但是没有返回数据，猜测跟数据转换成的整数有关，回到js代码中加密的代码段看看：\\n\\n```\\nfunction encryptedString(a, b) {\\n    for (var f, g, h, i, j, k, l, c = new Array, d = b.length, e = 0; d > e;) c[e] = b.charCodeAt(e),\\n    e++;\\n    for (; 0 != c.length % a.chunkSize;) c[e++] = 0;\\n    for (f = c.length, g = \\\"\\\", e = 0; f > e; e += a.chunkSize) {\\n        for (j = new BigInt, h = 0, i = e; i < e + a.chunkSize; ++h) {\\n            j.digits[h] = c[i++]\\n            j.digits[h] += c[i++] << 8\\n        }\\n        //j是待加密数据转换后的整数\\n        k = a.barrett.powMod(j, a.e),\\n        l = 16 == a.radix ? biToHex(k) : biToString(k, a.radix),\\n        g += l + \\\" \\\"\\n    }\\n    return g.substring(0, g.length - 1)\\n}\\n```\\n\\n在本地测试输出j的值：\\n\\n```\\nconsole.log(biToHex(j))\\n```\\n\\n对这个值进行加密：\\n\\n```\\nhex_str = '4d4b466b776c654a6171497175616c36'\\nrsa_m = int(hex_str, 16)\\n\\nrsa_c = rsa.core.encrypt_int(rsa_m, rsa_e, rsa_n)\\n\\nprint(hex(rsa_c))\\n```\\n\\n这次得到的数据跟请求中的参数一致（RSA加密生成的数据可能每次都不一样，跟填充方式有关），查阅RSA相关的资料知道算法是在固定长度的块上面进行操作，如果数据长度大于块大小要分割，小于要填充，根据上面的代码，这里的填充方式是直接在后面补'\\\\0'，加密时对每块进行加密，生成的数据之间用空格隔开，至于块大小怎么确定暂时不知道，先不管。\\n为了了解数据是怎么转换成整数的，需要了解BigInt的结构，通过调试可以知道BigInt包含一个数组，观察上面的代码可以知道数据转换成BigInt的过程是把每两个的字符的ascii码值逆序存放到数组的一个元素中，例如字符串：\\\"cd\\\",写成二进制的形式是：\\n\\n> 0110 0011 / 0010 0100\\n\\n放到BigInt中是：\\n\\n> 0010 0100 0110 0011\\n\\n接下来看看BigInt是怎么转换成整数的，找到BigInt转Hex的函数（因为这个函数最简单2333）：\\n\\n```\\nfunction reverseStr(a) {\\n    var c, b = \\\"\\\";\\n    for (c = a.length - 1; c > -1; --c) b += a.charAt(c);\\n    return b\\n}\\nfunction digitToHex(a) {\\n    var b = 15,\\n        c = \\\"\\\";\\n    for (i = 0; 4 > i; ++i) c += hexToChar[a & b],\\n    a >>>= 4;\\n    return reverseStr(c)\\n}\\nfunction biToHex(a) {\\n    var d, b = \\\"\\\";\\n    for (biHighIndex(a), d = biHighIndex(a); d > -1; --d) b += digitToHex(a.digits[d]);\\n    return\\n```\\n\\n这个函数逆序对BigInt的数组元素进行如下操作：从低位开始每4个二进制位转对应的16进制，并逆序输出。\\n所以数据转整数的整个过程其实就是把数据以小端方式存储（跟直接加密的区别就在于大端和小端），例如字符串\\\"cdef\\\"：\\n\\n0110 0011 / 0010 0100 / 0110 0101 / 0110 0110\\n\\n转换成小端：\\n\\n0110 0110 / 0110 0101 / 0010 0100 / 0110 0011\\n\\n转换成16进制就是：\\n\\n0x66656463\\n\\n测试一下：\\n\\n```\\ntable = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f']\\n\\ndata = \\\"6lauqIqaJelwkFKM\\\".encode()\\nhex_str = ''\\n\\nfor i in range(len(data) - 1, -1, -1):\\n\\thex_str += table[(data[i] & 0xf0) >> 4]\\n\\thex_str += table[data[i] & 0xf]\\n\\nrsa_m = int(hex_str, 16)\\n\\nrsa_c = rsa.core.encrypt_int(rsa_m, rsa_e, rsa_n)\\n\\nprint(hex(rsa_c))\\n```\\n\\n这次得到的结果与请求参数的一致，再次发送请求已经可以获取到数据了。\\n\\n![avatar](https://s2.ax1x.com/2019/06/04/VYLrZQ.png)\\n\\n（看了文档才知道白折腾了。。。文档里面有说明是逆序的）\\n![avatar](https://s2.ax1x.com/2019/06/04/VYxdHO.png)\\n\\n经过上面的分析可以大概得出请求的流程：前端先把请求的参数包装成json字符串，使用一个固定的密钥加密得到第一次加密的数据，再使用随机生成的密钥加密第一次加密生成的数据最终得到传递给服务器的参数，接着加密随机生成的密钥传递给服务器。服务器端用私钥解密得到前端随机生成的密钥，再用这个密钥对加密过的参数解密，经过两次解密最终得到参数。\\n\\n关于csrf_token参数，这个是用户登录以后才会有的，之后可能会补充更新一下这部分的接口，另外如果用postman之类的工具请求接口好像直接把参数放在query部分才行，一开始放到post body获取不到数据。\\n\\n最后把获取评论的接口贴一下：\\n\\nurl: https://music.163.com/weapi/v1/resource/comments/ID\\nmethod: POST\\nquery: csrf_token\\nparams: ID(string), offset(int), limit(int), total(boolean), csrf_token(string)\\n\\n当请求歌曲评论时，ID的格式是R_SO_4_ + 歌曲ID。\\n歌单：A_PL_0 + 歌单ID。\\n电台：A_DJ_1 + 电台ID\\n\\n其他类型的评论ID可以在开发者模式下获取相应请求url得到。\\n\\n### 2.获取歌词 ###\\n\\n通过上面的分析已经得到参数加密的方法，所以我们只需要知道请求这个接口都有什么参数就可以了。\\n\\nexample:\\n\\n> {\\\"id\\\":\\\"1361988914\\\",\\\"lv\\\":-1,\\\"tv\\\":-1,\\\"csrf_token\\\":\\\"\\\"}\\n\\nlv,tv这几个参数暂时不知道作用是什么，有兴趣的可以自己研究研究。\\n\\nurl: https://music.163.com/weapi/song/lyric\\nmethod: POST\\nquery: csrf_token\\nparams: ID(int), lv(int), lv(int), csrf_token(string)\\n\\n### 3.获取播放列表 ###\\n\\n在网页打开播放列表得到的列表详情是在后端处理过直接返回给浏览器的，没有暴露接口，但是通过官方提供的iframe插件可以得到一个接口，例如这个歌单：https://music.163.com/outchain/player?type=0&id=2821194580&auto=1&height=430 ，加密方式跟上文一样：\\n\\nexample:\\n\\n>{\\\"id\\\":\\\"2821194580\\\",\\\"ids\\\":\\\"[\\\\\\\"2821194580\\\\\\\"]\\\",\\\"limit\\\":10000,\\\"offset\\\":0,\\\"csrf_token\\\":\\\"\\\"}\\n\\nid参数是必须的，ids参数的作用暂时不知道是什么。但是这个接口目前好像没办法正常使用，limit和offset设置是无效的，一次最多获取1000条歌曲数据，而且也无法获取订阅状态，还需要再研究研究。\\n\\nurl: https://music.163.com/weapi/playlist/detail\\nmethod: POST\\nparams: id(int), ids(array), limit(int), offset(int), csrf_token(string)\\n\\n### 4.搜索 ###\\n\\n#### 4.1 推荐 ####\\n\\nexample：\\n\\n> {\\\"s\\\":\\\"陈奕迅\\\",\\\"limit\\\":\\\"8\\\",\\\"csrf_token\\\":\\\"\\\"}\\n\\nurl: https://music.163.com/weapi/cloudsearch/get/web\\nmethod: POST\\nquery: csrf_token\\nparams: s(string), limit(int), csrf_token(string)\\n\\n#### 4.2 各种搜索 ####\\n\\nexample:\\n\\n> {\\\"hlpretag\\\":\\\"<span class=\\\\\\\"s-fc7\\\\\\\">\\\",\\\"hlposttag\\\":\\\"</span>\\\",\\\"s\\\":\\\"陈奕迅\\\",\\\"type\\\":\\\"1\\\",\\\"offset\\\":\\\"0\\\",\\\"total\\\":\\\"true\\\",\\\"limit\\\":\\\"30\\\",\\\"csrf_token\\\":\\\"\\\"}\\n\\n前面hlpretag和hlposttag暂时不知道作用是什么，可以不加进去，如果要加进去加密的时候记得要把转义符号也当成字符串的一部分，在python中可以在字符串前面加r表示raw string。\\n其中type是搜索的类型：\\n1 歌曲\\n10 专辑\\n100 歌手\\n1000 歌单\\n1002 用户\\n1006 歌词\\n1009 电台\\n1014 视频\\n其他的参数比较明显就不细说了。\\n\\nurl: https://music.163.com/weapi/cloudsearch/get/web\\nmethod: POST\\nquery: csrf_token\\nparams: s(string), type(int), offset(int), total(int), limit(int), csrf_token(string)\\n\\n### 5.用户Token ###\\n\\n先分析怎么通过手机登录获取token。\\n这个稍微复杂点，因为传递给服务器的参数中password是经过加密的，只要找出加密的方法就可以了。首先还是找到跟加密password相关的函数，这个断点多花点时间是可以找出来的。\\n\\n在pt_frame_index.js这个文件里面发现如下代码：\\n\\n```\\nvar i9b = {\\n    countrycode: gX3x.countrycode,\\n    phone:gX3x.mobile,\\n    password:k9b.lB4F(gX3x.password),\\n    rememberLogin:this.RU4Y.checked\\n}\\n```\\n\\n其中lB4F这个函数就是加密password的函数，接着找到：\\n\\n```\\np.lB4F = function(i9b) {\\n    return XC6w(LI2x(xC8u(i9b, !0), i9b.length * nA5F), !0)\\n};\\n```\\n\\n```\\nvar xC8u = function() {\\n    var GB0x = function(i) {\\n        return i % 32\\n    },\\n    Gx0x = function(i) {\\n        return 32 - nA5F - i % 32\\n    };\\n    return function(cQ2x, Gw0x) {\\n        var Xr6l = [],\\n        lI4M = (1 << nA5F) - 1,\\n        mE5J = Gw0x ? GB0x: Gx0x;\\n        for (var i = 0,\\n        l = cQ2x.length * nA5F; i < l; i += nA5F) Xr6l[i >> 5] |= (cQ2x.charCodeAt(i / nA5F) & lI4M) << mE5J(i);\\n        return Xr6l\\n    }\\n} ();\\n```\\n\\n```\\nvar LI2x = function(x, y) {\\n    x[y >> 5] |= 128 << y % 32;\\n    x[(y + 64 >>> 9 << 4) + 14] = y;\\n    var a = 1732584193,\\n    b = -271733879,\\n    c = -1732584194,\\n    d = 271733878;\\n    for (var i = 0,\\n    l = x.length,\\n    bFW5b, bFX5c, bGc5h, bGd5i; i < l; i += 16) {\\n        bFW5b = a;\\n        bFX5c = b;\\n        bGc5h = c;\\n        bGd5i = d;\\n        a = qb5g(a, b, c, d, x[i + 0], 7, -680876936);\\n        d = qb5g(d, a, b, c, x[i + 1], 12, -389564586);\\n        c = qb5g(c, d, a, b, x[i + 2], 17, 606105819);\\n        b = qb5g(b, c, d, a, x[i + 3], 22, -1044525330);\\n        a = qb5g(a, b, c, d, x[i + 4], 7, -176418897);\\n        d = qb5g(d, a, b, c, x[i + 5], 12, 1200080426);\\n        c = qb5g(c, d, a, b, x[i + 6], 17, -1473231341);\\n        b = qb5g(b, c, d, a, x[i + 7], 22, -45705983);\\n        a = qb5g(a, b, c, d, x[i + 8], 7, 1770035416);\\n        d = qb5g(d, a, b, c, x[i + 9], 12, -1958414417);\\n        c = qb5g(c, d, a, b, x[i + 10], 17, -42063);\\n        b = qb5g(b, c, d, a, x[i + 11], 22, -1990404162);\\n        a = qb5g(a, b, c, d, x[i + 12], 7, 1804603682);\\n        d = qb5g(d, a, b, c, x[i + 13], 12, -40341101);\\n        c = qb5g(c, d, a, b, x[i + 14], 17, -1502002290);\\n        b = qb5g(b, c, d, a, x[i + 15], 22, 1236535329);\\n        a = pT5Y(a, b, c, d, x[i + 1], 5, -165796510);\\n        d = pT5Y(d, a, b, c, x[i + 6], 9, -1069501632);\\n        c = pT5Y(c, d, a, b, x[i + 11], 14, 643717713);\\n        b = pT5Y(b, c, d, a, x[i + 0], 20, -373897302);\\n        a = pT5Y(a, b, c, d, x[i + 5], 5, -701558691);\\n        d = pT5Y(d, a, b, c, x[i + 10], 9, 38016083);\\n        c = pT5Y(c, d, a, b, x[i + 15], 14, -660478335);\\n        b = pT5Y(b, c, d, a, x[i + 4], 20, -405537848);\\n        a = pT5Y(a, b, c, d, x[i + 9], 5, 568446438);\\n        d = pT5Y(d, a, b, c, x[i + 14], 9, -1019803690);\\n        c = pT5Y(c, d, a, b, x[i + 3], 14, -187363961);\\n        b = pT5Y(b, c, d, a, x[i + 8], 20, 1163531501);\\n        a = pT5Y(a, b, c, d, x[i + 13], 5, -1444681467);\\n        d = pT5Y(d, a, b, c, x[i + 2], 9, -51403784);\\n        c = pT5Y(c, d, a, b, x[i + 7], 14, 1735328473);\\n        b = pT5Y(b, c, d, a, x[i + 12], 20, -1926607734);\\n        a = pQ5V(a, b, c, d, x[i + 5], 4, -378558);\\n        d = pQ5V(d, a, b, c, x[i + 8], 11, -2022574463);\\n        c = pQ5V(c, d, a, b, x[i + 11], 16, 1839030562);\\n        b = pQ5V(b, c, d, a, x[i + 14], 23, -35309556);\\n        a = pQ5V(a, b, c, d, x[i + 1], 4, -1530992060);\\n        d = pQ5V(d, a, b, c, x[i + 4], 11, 1272893353);\\n        c = pQ5V(c, d, a, b, x[i + 7], 16, -155497632);\\n        b = pQ5V(b, c, d, a, x[i + 10], 23, -1094730640);\\n        a = pQ5V(a, b, c, d, x[i + 13], 4, 681279174);\\n        d = pQ5V(d, a, b, c, x[i + 0], 11, -358537222);\\n        c = pQ5V(c, d, a, b, x[i + 3], 16, -722521979);\\n        b = pQ5V(b, c, d, a, x[i + 6], 23, 76029189);\\n        a = pQ5V(a, b, c, d, x[i + 9], 4, -640364487);\\n        d = pQ5V(d, a, b, c, x[i + 12], 11, -421815835);\\n        c = pQ5V(c, d, a, b, x[i + 15], 16, 530742520);\\n        b = pQ5V(b, c, d, a, x[i + 2], 23, -995338651);\\n        a = pA5F(a, b, c, d, x[i + 0], 6, -198630844);\\n        d = pA5F(d, a, b, c, x[i + 7], 10, 1126891415);\\n        c = pA5F(c, d, a, b, x[i + 14], 15, -1416354905);\\n        b = pA5F(b, c, d, a, x[i + 5], 21, -57434055);\\n        a = pA5F(a, b, c, d, x[i + 12], 6, 1700485571);\\n        d = pA5F(d, a, b, c, x[i + 3], 10, -1894986606);\\n        c = pA5F(c, d, a, b, x[i + 10], 15, -1051523);\\n        b = pA5F(b, c, d, a, x[i + 1], 21, -2054922799);\\n        a = pA5F(a, b, c, d, x[i + 8], 6, 1873313359);\\n        d = pA5F(d, a, b, c, x[i + 15], 10, -30611744);\\n        c = pA5F(c, d, a, b, x[i + 6], 15, -1560198380);\\n        b = pA5F(b, c, d, a, x[i + 13], 21, 1309151649);\\n        a = pA5F(a, b, c, d, x[i + 4], 6, -145523070);\\n        d = pA5F(d, a, b, c, x[i + 11], 10, -1120210379);\\n        c = pA5F(c, d, a, b, x[i + 2], 15, 718787259);\\n        b = pA5F(b, c, d, a, x[i + 9], 21, -343485551);\\n        a = mG5L(a, bFW5b);\\n        b = mG5L(b, bFX5c);\\n        c = mG5L(c, bGc5h);\\n        d = mG5L(d, bGd5i)\\n    }\\n    return [a, b, c, d]\\n};\\n```\\n\\n```\\nvar mG5L = function(x, y) {\\n    var bFc4g = (x & 65535) + (y & 65535),\\n    cwl5q = (x >> 16) + (y >> 16) + (bFc4g >> 16);\\n    return cwl5q << 16 | bFc4g & 65535\\n};\\nvar bem8e = function(q, a, b, x, s, t) {\\n    return mG5L(beu8m(mG5L(mG5L(a, q), mG5L(x, t)), s), b)\\n};\\nvar qb5g = function(a, b, c, d, x, s, t) {\\n    return bem8e(b & c | ~b & d, a, b, x, s, t)\\n};\\nvar pT5Y = function(a, b, c, d, x, s, t) {\\n    return bem8e(b & d | c & ~d, a, b, x, s, t)\\n};\\nvar pQ5V = function(a, b, c, d, x, s, t) {\\n    return bem8e(b ^ c ^ d, a, b, x, s, t)\\n};\\nvar pA5F = function(a, b, c, d, x, s, t) {\\n    return bem8e(c ^ (b | ~d), a, b, x, s, t)\\n};\\n```\\n\\n```\\nvar XC6w = function() {\\n    var bFG5L = \\\"0123456789abcdef\\\",\\n    GB0x = function(i) {\\n        return i % 4\\n    },\\n    Gx0x = function(i) {\\n        return 3 - i % 4\\n    };\\n    return function(iL3x, Gw0x) {\\n        var bu0x = [],\\n        mE5J = Gw0x ? GB0x: Gx0x;\\n        for (var i = 0,\\n        l = iL3x.length * 4; i < l; i++) {\\n            bu0x.push(bFG5L.charAt(iL3x[i >> 2] >> mE5J(i) * 8 + 4 & 15) + bFG5L.charAt(iL3x[i >> 2] >> mE5J(i) * 8 & 15))\\n        }\\n        return bu0x.join(\\\"\\\")\\n    }\\n} ();\\n```\\n\\n<script src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/latest.js?config=TeX-MML-AM_CHTML' async>\\n</script>\\n<script type=\\\"text/x-mathjax-config\\\">\\n    MathJax.Hub.Config({\\n    tex2jax: {inlineMath: [['$','$'], ['\\\\\\\\(','\\\\\\\\)']]}\\n    });\\n</script>\\n\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]]}",
            "created_at_ts": 1559909368690,
            "created_at": "2019-06-07T12:09:28.000Z"
          },
          {
            "id": "5cfa563fc199180df866a24b",
            "post_id": "5cf3b9b16e5789135f7785a7",
            "mobiledoc": "{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"记得很久以前爬过评论的API，请求参数是加密过的，调用过程好像有点复杂，后来直接用PyV8调用javascript加密得到参数，但是加密的过程不是很清楚，刚好想找个理由学一学Python，这次就用纯Python写吧。\\n\\n先随便选一个接口分析一下，就选评论接口吧。\\n\\n### 1.获取评论 ###\\n\\n进入Chrome开发者模式可以看到\\n\\n![avatar](https://s2.ax1x.com/2019/06/02/VGR8Yj.png)\\n![avatar](https://s2.ax1x.com/2019/06/02/VGWc5Q.png)\\n\\n这个就是获取评论的接口，请求方式是POST，请求体有两个参数params和encSecKey，在请求的Initiator可以看到发出请求的代码在core_xxxx.js这个文件，代码肯定经过混淆，先下载到本地格式化一下。在js文件中搜索encSecKey，找到生成参数的相关代码段，可以看到参数由asrsea这个函数生成。\\n\\n```\\nvar bYc0x = window.asrsea(JSON.stringify(i8a), bkY9P([\\\"流泪\\\", \\\"强\\\"]), bkY9P(VM5R.md), bkY9P([\\\"爱心\\\", \\\"女孩\\\", \\\"惊恐\\\", \\\"大笑\\\"]));\\ne8e.data = k8c.cz9q({\\n    params: bYc0x.encText,\\n    encSecKey: bYc0x.encSecKey\\n})\\n```\\n\\n继续在js文件中搜索这个函数，可以看到生成参数的相关函数：\\n\\n```\\nfunction a(a) {\\n    var d, e, b = \\\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\\\",\\n        c = \\\"\\\";\\n    for (d = 0; a > d; d += 1) e = Math.random() * b.length,\\n    e = Math.floor(e),\\n    c += b.charAt(e);\\n    return c\\n}\\n//生成encText，即params\\nfunction b(a, b) {\\n    var c = CryptoJS.enc.Utf8.parse(b),                     //密钥\\n        d = CryptoJS.enc.Utf8.parse(\\\"0102030405060708\\\"),    //初始化向量\\n        e = CryptoJS.enc.Utf8.parse(a),                     //数据\\n        f = CryptoJS.AES.encrypt(e, c, {\\n            iv: d,\\n            mode: CryptoJS.mode.CBC\\n        });\\n    return f.toString()\\n}\\n//生成encSecKey\\nfunction c(a, b, c) {\\n    var d, e;\\n    return setMaxDigits(131),\\n    d = new RSAKeyPair(b, \\\"\\\", c),\\n    e = encryptedString(d, a)\\n}\\n//spider 加密函数\\nfunction d(d, e, f, g) {\\n    var h = {},\\n        i = a(16);  //随机生成一个由a~z,A~Z,0~9组成的长度为a的字符串（AES密钥）\\n    return h.encText = b(d, g),\\n    h.encText = b(h.encText, i),\\n    h.encSecKey = c(i, e, f),\\n    h\\n}\\nfunction e(a, b, d, e) {\\n    var f = {};\\n    return f.encText = c(a + e, b, d),\\n    f\\n}\\nwindow.asrsea = d,\\nwindow.ecnonasr = e\\n```\\n\\nparams的生成过程比较简单，在函数d中可以看到params由两次调用函数b得到：函数b是AES加密的过程，参数a是要加密的数据，参数b是密钥，params经过两次AES加密得到，通过调试可以看到第一次加密：\\n\\n```\\nh.encText = b(d, g)\\n```\\n\\n参数g是固定的：\\n\\n> 0CoJUm6Qyw8W8jud\\n\\n而参数d则是请求参数构成的json字符串，在上面的请求中是：\\n\\n> {\\\"rid\\\":\\\"R_SO_4_1361988914\\\",\\\"offset\\\":\\\"0\\\",\\\"total\\\":\\\"true\\\",\\\"limit\\\":\\\"20\\\",\\\"csrf_token\\\":\\\"\\\"}\\n\\noffset代表获取的第一条评论的偏移量，limit是获取的评论数。\\n\\n第二次加密是使用随机生成的密钥（长度为16）加密第一次加密生成的数据。为了方便测试，在原网页获取随机生成的某密钥以及用这个密钥加密得到的params和encSecKey：\\n\\nkey:\\n\\n> 6lauqIqaJelwkFKM\\n\\nparams:\\n\\n> 1NGJ2rghqo1ToCy5r27rEDqRCNEZxxKk2BvmOQoud6GTNfPZKGRJVFmqfJWeAXYQi4V/++6HKpDjFDfB+TZZ+cmDQF2ywgL9w5Ow8r+mtLG95D7rfUfRkT7GiTn4KMCt+mIM9dtgtIoKXSZ77407F/ZI/GCfslievQ0IfnBAR8SoKQmz8XaQgC1Lxo93VxQ4\\n\\nencSecKey:\\n\\n> 2d1a892a0d7b3101eb00936c4915b2541bc378b58a5ccf6ab3ca939da1fd1fcee7b7456feef0a0d9115c1b5aad8aa64674df8249597e9e74ab66cb5fa84a624f174ed59e786fef748528fff098fa749c11aa06d7d86b7a41d917277efb3f14f8b974ddb2cb5df638ec36d3de8c2f02335cb1990b150a8deafc186c2007dea21c\\n\\n其中AES加密的填充方式是pkcs#7padding，块大小是16 Bytes，加密后的数据默认使用base64编码，根据pkcs#7padding的规则，需要在数据后面添加(16 - n%16)个byte（无论n的长度是否是16的整数倍），且byte的值也为(16 - n%16)。\\n\\n```\\nfrom Crypto.Cipher import AES\\nimport base64\\n\\ndef pkcs7_padding(data):\\n\\tn = 16 - len(data) % 16\\n\\tdata += (chr(n) * n).encode()\\n\\treturn data\\n\\nkey = '0CoJUm6Qyw8W8jud'.encode('utf-8')\\nmode = AES.MODE_CBC\\niv = '0102030405060708'.encode('utf-8')\\n\\naes = AES.new(key, mode, iv)\\n\\ndata = '{\\\"rid\\\":\\\"R_SO_4_1361988914\\\",\\\"offset\\\":\\\"0\\\",\\\"total\\\":\\\"true\\\",\\\"limit\\\":\\\"20\\\",\\\"csrf_token\\\":\\\"\\\"}'.encode('utf-8')\\ndata = pkcs7_padding(data)\\n\\nendata = aes.encrypt(data)\\nendata = base64.b64encode(endata)\\n\\nkey = '6lauqIqaJelwkFKM'.encode('utf-8')\\n\\naes = AES.new(key, mode, iv)\\n\\ndata = pkcs7_padding(endata)\\n\\nendata = aes.encrypt(data)\\nendata = base64.b64encode(endata)\\n\\nprint(endata)\\n```\\n\\n得到的数据与请求中的一致。\\n\\n再分析一下encSecKey的生成过程，在函数d中可以看到encSecKey由函数c生成：函数c将随机生成的密钥（就是上面生成params时AES加密的密钥）经过RSA加密得到encSecKey。\\n关于RSA加密的过程，源代码在这里可以看到:http://www.ohdave.com/rsa\\n\\nRSAKeyPair包括encryptionExponent,decryptionExponent,modulus（分别对应代码中RSAKeyPair函数的三个参数，根据RSA加密的过程：公钥包含两个大整数，n和e，假设要加密的数据是m，则加密后的数据$c ≡ m^e \\\\ (mod \\\\ n)$,这里的e就是encryptionExponent，n就是modulus。\\n\\ne和n两个数应该是固定的（公钥应该不会频繁更换吧），在RSAKeyPair函数打断点得到e和n的值分别是：\\n\\n> 010001\\n\\n和\\n\\n> 00e0b509f6259df8642dbc35662901477df22677ec152b5ff68ace615bb7b725152b3ab17a876aea8a5aa76d2e417629ec4ee341f56135fccf695280104e0312ecbda92557c93870114af6c9d05c4f7f0c3685b7a46bee255932575cce10b424d813cfe4875d3e82047b97ddef52741d546b8e289dc6935b3ece0462db0a22b8e7\\n\\n一开始我尝试直接对数据进行加密：\\n\\n```\\nimport rsa\\nimport binascii\\n\\nrsa_n = int(\\\"00e0b509f6259df8642dbc35662901477df22677ec152b5ff68ace615bb7b725152b3ab17a876aea8a5aa76d2e417629ec4ee341f56135fccf695280104e0312ecbda92557c93870114af6c9d05c4f7f0c3685b7a46bee255932575cce10b424d813cfe4875d3e82047b97ddef52741d546b8e289dc6935b3ece0462db0a22b8e7\\\", 16)\\nrsa_e = int(\\\"010001\\\", 16)\\n\\nkey = rsa.PublicKey(rsa_n, rsa_e)\\ndata = \\\"6lauqIqaJelwkFKM\\\".encode()\\n\\nencrypted_data = rsa.encrypt(data, key)\\nhex_str = binascii.b2a_hex(encrypted_data)\\n\\nprint(hex_str)\\n```\\n\\n尝试请求接口，但是没有返回数据，猜测跟数据转换成的整数有关，回到js代码中加密的代码段看看：\\n\\n```\\nfunction encryptedString(a, b) {\\n    for (var f, g, h, i, j, k, l, c = new Array, d = b.length, e = 0; d > e;) c[e] = b.charCodeAt(e),\\n    e++;\\n    for (; 0 != c.length % a.chunkSize;) c[e++] = 0;\\n    for (f = c.length, g = \\\"\\\", e = 0; f > e; e += a.chunkSize) {\\n        for (j = new BigInt, h = 0, i = e; i < e + a.chunkSize; ++h) {\\n            j.digits[h] = c[i++]\\n            j.digits[h] += c[i++] << 8\\n        }\\n        //j是待加密数据转换后的整数\\n        k = a.barrett.powMod(j, a.e),\\n        l = 16 == a.radix ? biToHex(k) : biToString(k, a.radix),\\n        g += l + \\\" \\\"\\n    }\\n    return g.substring(0, g.length - 1)\\n}\\n```\\n\\n在本地测试输出j的值：\\n\\n```\\nconsole.log(biToHex(j))\\n```\\n\\n对这个值进行加密：\\n\\n```\\nhex_str = '4d4b466b776c654a6171497175616c36'\\nrsa_m = int(hex_str, 16)\\n\\nrsa_c = rsa.core.encrypt_int(rsa_m, rsa_e, rsa_n)\\n\\nprint(hex(rsa_c))\\n```\\n\\n这次得到的数据跟请求中的参数一致（RSA加密生成的数据可能每次都不一样，跟填充方式有关），查阅RSA相关的资料知道算法是在固定长度的块上面进行操作，如果数据长度大于块大小要分割，小于要填充，根据上面的代码，这里的填充方式是直接在后面补'\\\\0'，加密时对每块进行加密，生成的数据之间用空格隔开，至于块大小怎么确定暂时不知道，先不管。\\n为了了解数据是怎么转换成整数的，需要了解BigInt的结构，通过调试可以知道BigInt包含一个数组，观察上面的代码可以知道数据转换成BigInt的过程是把每两个的字符的ascii码值逆序存放到数组的一个元素中，例如字符串：\\\"cd\\\",写成二进制的形式是：\\n\\n> 0110 0011 / 0010 0100\\n\\n放到BigInt中是：\\n\\n> 0010 0100 0110 0011\\n\\n接下来看看BigInt是怎么转换成整数的，找到BigInt转Hex的函数（因为这个函数最简单2333）：\\n\\n```\\nfunction reverseStr(a) {\\n    var c, b = \\\"\\\";\\n    for (c = a.length - 1; c > -1; --c) b += a.charAt(c);\\n    return b\\n}\\nfunction digitToHex(a) {\\n    var b = 15,\\n        c = \\\"\\\";\\n    for (i = 0; 4 > i; ++i) c += hexToChar[a & b],\\n    a >>>= 4;\\n    return reverseStr(c)\\n}\\nfunction biToHex(a) {\\n    var d, b = \\\"\\\";\\n    for (biHighIndex(a), d = biHighIndex(a); d > -1; --d) b += digitToHex(a.digits[d]);\\n    return\\n```\\n\\n这个函数逆序对BigInt的数组元素进行如下操作：从低位开始每4个二进制位转对应的16进制，并逆序输出。\\n所以数据转整数的整个过程其实就是把数据以小端方式存储（跟直接加密的区别就在于大端和小端），例如字符串\\\"cdef\\\"：\\n\\n0110 0011 / 0010 0100 / 0110 0101 / 0110 0110\\n\\n转换成小端：\\n\\n0110 0110 / 0110 0101 / 0010 0100 / 0110 0011\\n\\n转换成16进制就是：\\n\\n0x66656463\\n\\n测试一下：\\n\\n```\\ntable = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f']\\n\\ndata = \\\"6lauqIqaJelwkFKM\\\".encode()\\nhex_str = ''\\n\\nfor i in range(len(data) - 1, -1, -1):\\n\\thex_str += table[(data[i] & 0xf0) >> 4]\\n\\thex_str += table[data[i] & 0xf]\\n\\nrsa_m = int(hex_str, 16)\\n\\nrsa_c = rsa.core.encrypt_int(rsa_m, rsa_e, rsa_n)\\n\\nprint(hex(rsa_c))\\n```\\n\\n这次得到的结果与请求参数的一致，再次发送请求已经可以获取到数据了。\\n\\n![avatar](https://s2.ax1x.com/2019/06/04/VYLrZQ.png)\\n\\n（看了文档才知道白折腾了。。。文档里面有说明是逆序的）\\n![avatar](https://s2.ax1x.com/2019/06/04/VYxdHO.png)\\n\\n经过上面的分析可以大概得出请求的流程：前端先把请求的参数包装成json字符串，使用一个固定的密钥加密得到第一次加密的数据，再使用随机生成的密钥加密第一次加密生成的数据最终得到传递给服务器的参数，接着加密随机生成的密钥传递给服务器。服务器端用私钥解密得到前端随机生成的密钥，再用这个密钥对加密过的参数解密，经过两次解密最终得到参数。\\n\\n关于csrf_token参数，这个是用户登录以后才会有的，之后可能会补充更新一下这部分的接口，另外如果用postman之类的工具请求接口好像直接把参数放在query部分才行，一开始放到post body获取不到数据。\\n\\n最后把获取评论的接口贴一下：\\n\\nurl: https://music.163.com/weapi/v1/resource/comments/ID\\nmethod: POST\\nquery: csrf_token\\nparams: ID(string), offset(int), limit(int), total(boolean), csrf_token(string)\\n\\n当请求歌曲评论时，ID的格式是R_SO_4_ + 歌曲ID。\\n歌单：A_PL_0 + 歌单ID。\\n电台：A_DJ_1 + 电台ID\\n\\n其他类型的评论ID可以在开发者模式下获取相应请求url得到。\\n\\n### 2.获取歌词 ###\\n\\n通过上面的分析已经得到参数加密的方法，所以我们只需要知道请求这个接口都有什么参数就可以了。\\n\\nexample:\\n\\n> {\\\"id\\\":\\\"1361988914\\\",\\\"lv\\\":-1,\\\"tv\\\":-1,\\\"csrf_token\\\":\\\"\\\"}\\n\\nlv,tv这几个参数暂时不知道作用是什么，有兴趣的可以自己研究研究。\\n\\nurl: https://music.163.com/weapi/song/lyric\\nmethod: POST\\nquery: csrf_token\\nparams: ID(int), lv(int), lv(int), csrf_token(string)\\n\\n### 3.获取播放列表 ###\\n\\n在网页打开播放列表得到的列表详情是在后端处理过直接返回给浏览器的，没有暴露接口，但是通过官方提供的iframe插件可以得到一个接口，例如这个歌单：https://music.163.com/outchain/player?type=0&id=2821194580&auto=1&height=430 ，加密方式跟上文一样：\\n\\nexample:\\n\\n>{\\\"id\\\":\\\"2821194580\\\",\\\"ids\\\":\\\"[\\\\\\\"2821194580\\\\\\\"]\\\",\\\"limit\\\":10000,\\\"offset\\\":0,\\\"csrf_token\\\":\\\"\\\"}\\n\\nid参数是必须的，ids参数的作用暂时不知道是什么。但是这个接口目前好像没办法正常使用，limit和offset设置是无效的，一次最多获取1000条歌曲数据，而且也无法获取订阅状态，还需要再研究研究。\\n\\nurl: https://music.163.com/weapi/playlist/detail\\nmethod: POST\\nparams: id(int), ids(array), limit(int), offset(int), csrf_token(string)\\n\\n### 4.搜索 ###\\n\\n#### 4.1 推荐 ####\\n\\nexample：\\n\\n> {\\\"s\\\":\\\"陈奕迅\\\",\\\"limit\\\":\\\"8\\\",\\\"csrf_token\\\":\\\"\\\"}\\n\\nurl: https://music.163.com/weapi/cloudsearch/get/web\\nmethod: POST\\nquery: csrf_token\\nparams: s(string), limit(int), csrf_token(string)\\n\\n#### 4.2 各种搜索 ####\\n\\nexample:\\n\\n> {\\\"hlpretag\\\":\\\"<span class=\\\\\\\"s-fc7\\\\\\\">\\\",\\\"hlposttag\\\":\\\"</span>\\\",\\\"s\\\":\\\"陈奕迅\\\",\\\"type\\\":\\\"1\\\",\\\"offset\\\":\\\"0\\\",\\\"total\\\":\\\"true\\\",\\\"limit\\\":\\\"30\\\",\\\"csrf_token\\\":\\\"\\\"}\\n\\n前面hlpretag和hlposttag暂时不知道作用是什么，可以不加进去，如果要加进去加密的时候记得要把转义符号也当成字符串的一部分，在python中可以在字符串前面加r表示raw string。\\n其中type是搜索的类型：\\n1 歌曲\\n10 专辑\\n100 歌手\\n1000 歌单\\n1002 用户\\n1006 歌词\\n1009 电台\\n1014 视频\\n其他的参数比较明显就不细说了。\\n\\nurl: https://music.163.com/weapi/cloudsearch/get/web\\nmethod: POST\\nquery: csrf_token\\nparams: s(string), type(int), offset(int), total(int), limit(int), csrf_token(string)\\n\\n### 5.用户Token ###\\n\\n先分析怎么通过手机登录获取token。\\n这个稍微复杂点，因为传递给服务器的参数中password是经过加密的，只要找出加密的方法就可以了。首先还是找到跟加密password相关的函数，这个断点多花点时间是可以找出来的。\\n\\n在pt_frame_index.js这个文件里面发现如下代码：\\n\\n```\\nvar i9b = {\\n    countrycode: gX3x.countrycode,\\n    phone:gX3x.mobile,\\n    password:k9b.lB4F(gX3x.password),\\n    rememberLogin:this.RU4Y.checked\\n}\\n```\\n\\n其中lB4F这个函数就是加密password的函数，接着找到：\\n\\n```\\np.lB4F = function(i9b) {\\n    return XC6w(LI2x(xC8u(i9b, !0), i9b.length * nA5F), !0)\\n};\\n```\\n\\n```\\nvar nA5F = 8;\\n\\nvar xC8u = function() {\\n    var GB0x = function(i) {\\n        return i % 32\\n    },\\n    Gx0x = function(i) {\\n        return 32 - nA5F - i % 32\\n    };\\n    return function(cQ2x, Gw0x) {\\n        var Xr6l = [],\\n        lI4M = (1 << nA5F) - 1,\\n        mE5J = Gw0x ? GB0x: Gx0x;\\n        for (var i = 0,\\n        l = cQ2x.length * nA5F; i < l; i += nA5F) Xr6l[i >> 5] |= (cQ2x.charCodeAt(i / nA5F) & lI4M) << mE5J(i);\\n        return Xr6l\\n    }\\n} ();\\n```\\n\\n```\\nvar LI2x = function(x, y) {\\n    x[y >> 5] |= 128 << y % 32;\\n    x[(y + 64 >>> 9 << 4) + 14] = y;\\n    var a = 1732584193,\\n    b = -271733879,\\n    c = -1732584194,\\n    d = 271733878;\\n    for (var i = 0,\\n    l = x.length,\\n    bFW5b, bFX5c, bGc5h, bGd5i; i < l; i += 16) {\\n        bFW5b = a;\\n        bFX5c = b;\\n        bGc5h = c;\\n        bGd5i = d;\\n        a = qb5g(a, b, c, d, x[i + 0], 7, -680876936);\\n        d = qb5g(d, a, b, c, x[i + 1], 12, -389564586);\\n        c = qb5g(c, d, a, b, x[i + 2], 17, 606105819);\\n        b = qb5g(b, c, d, a, x[i + 3], 22, -1044525330);\\n        a = qb5g(a, b, c, d, x[i + 4], 7, -176418897);\\n        d = qb5g(d, a, b, c, x[i + 5], 12, 1200080426);\\n        c = qb5g(c, d, a, b, x[i + 6], 17, -1473231341);\\n        b = qb5g(b, c, d, a, x[i + 7], 22, -45705983);\\n        a = qb5g(a, b, c, d, x[i + 8], 7, 1770035416);\\n        d = qb5g(d, a, b, c, x[i + 9], 12, -1958414417);\\n        c = qb5g(c, d, a, b, x[i + 10], 17, -42063);\\n        b = qb5g(b, c, d, a, x[i + 11], 22, -1990404162);\\n        a = qb5g(a, b, c, d, x[i + 12], 7, 1804603682);\\n        d = qb5g(d, a, b, c, x[i + 13], 12, -40341101);\\n        c = qb5g(c, d, a, b, x[i + 14], 17, -1502002290);\\n        b = qb5g(b, c, d, a, x[i + 15], 22, 1236535329);\\n        a = pT5Y(a, b, c, d, x[i + 1], 5, -165796510);\\n        d = pT5Y(d, a, b, c, x[i + 6], 9, -1069501632);\\n        c = pT5Y(c, d, a, b, x[i + 11], 14, 643717713);\\n        b = pT5Y(b, c, d, a, x[i + 0], 20, -373897302);\\n        a = pT5Y(a, b, c, d, x[i + 5], 5, -701558691);\\n        d = pT5Y(d, a, b, c, x[i + 10], 9, 38016083);\\n        c = pT5Y(c, d, a, b, x[i + 15], 14, -660478335);\\n        b = pT5Y(b, c, d, a, x[i + 4], 20, -405537848);\\n        a = pT5Y(a, b, c, d, x[i + 9], 5, 568446438);\\n        d = pT5Y(d, a, b, c, x[i + 14], 9, -1019803690);\\n        c = pT5Y(c, d, a, b, x[i + 3], 14, -187363961);\\n        b = pT5Y(b, c, d, a, x[i + 8], 20, 1163531501);\\n        a = pT5Y(a, b, c, d, x[i + 13], 5, -1444681467);\\n        d = pT5Y(d, a, b, c, x[i + 2], 9, -51403784);\\n        c = pT5Y(c, d, a, b, x[i + 7], 14, 1735328473);\\n        b = pT5Y(b, c, d, a, x[i + 12], 20, -1926607734);\\n        a = pQ5V(a, b, c, d, x[i + 5], 4, -378558);\\n        d = pQ5V(d, a, b, c, x[i + 8], 11, -2022574463);\\n        c = pQ5V(c, d, a, b, x[i + 11], 16, 1839030562);\\n        b = pQ5V(b, c, d, a, x[i + 14], 23, -35309556);\\n        a = pQ5V(a, b, c, d, x[i + 1], 4, -1530992060);\\n        d = pQ5V(d, a, b, c, x[i + 4], 11, 1272893353);\\n        c = pQ5V(c, d, a, b, x[i + 7], 16, -155497632);\\n        b = pQ5V(b, c, d, a, x[i + 10], 23, -1094730640);\\n        a = pQ5V(a, b, c, d, x[i + 13], 4, 681279174);\\n        d = pQ5V(d, a, b, c, x[i + 0], 11, -358537222);\\n        c = pQ5V(c, d, a, b, x[i + 3], 16, -722521979);\\n        b = pQ5V(b, c, d, a, x[i + 6], 23, 76029189);\\n        a = pQ5V(a, b, c, d, x[i + 9], 4, -640364487);\\n        d = pQ5V(d, a, b, c, x[i + 12], 11, -421815835);\\n        c = pQ5V(c, d, a, b, x[i + 15], 16, 530742520);\\n        b = pQ5V(b, c, d, a, x[i + 2], 23, -995338651);\\n        a = pA5F(a, b, c, d, x[i + 0], 6, -198630844);\\n        d = pA5F(d, a, b, c, x[i + 7], 10, 1126891415);\\n        c = pA5F(c, d, a, b, x[i + 14], 15, -1416354905);\\n        b = pA5F(b, c, d, a, x[i + 5], 21, -57434055);\\n        a = pA5F(a, b, c, d, x[i + 12], 6, 1700485571);\\n        d = pA5F(d, a, b, c, x[i + 3], 10, -1894986606);\\n        c = pA5F(c, d, a, b, x[i + 10], 15, -1051523);\\n        b = pA5F(b, c, d, a, x[i + 1], 21, -2054922799);\\n        a = pA5F(a, b, c, d, x[i + 8], 6, 1873313359);\\n        d = pA5F(d, a, b, c, x[i + 15], 10, -30611744);\\n        c = pA5F(c, d, a, b, x[i + 6], 15, -1560198380);\\n        b = pA5F(b, c, d, a, x[i + 13], 21, 1309151649);\\n        a = pA5F(a, b, c, d, x[i + 4], 6, -145523070);\\n        d = pA5F(d, a, b, c, x[i + 11], 10, -1120210379);\\n        c = pA5F(c, d, a, b, x[i + 2], 15, 718787259);\\n        b = pA5F(b, c, d, a, x[i + 9], 21, -343485551);\\n        a = mG5L(a, bFW5b);\\n        b = mG5L(b, bFX5c);\\n        c = mG5L(c, bGc5h);\\n        d = mG5L(d, bGd5i)\\n    }\\n    return [a, b, c, d]\\n};\\n```\\n\\n```\\nvar mG5L = function(x, y) {\\n    var bFc4g = (x & 65535) + (y & 65535),\\n    cwl5q = (x >> 16) + (y >> 16) + (bFc4g >> 16);\\n    return cwl5q << 16 | bFc4g & 65535\\n};\\nvar bem8e = function(q, a, b, x, s, t) {\\n    return mG5L(beu8m(mG5L(mG5L(a, q), mG5L(x, t)), s), b)\\n};\\nvar qb5g = function(a, b, c, d, x, s, t) {\\n    return bem8e(b & c | ~b & d, a, b, x, s, t)\\n};\\nvar pT5Y = function(a, b, c, d, x, s, t) {\\n    return bem8e(b & d | c & ~d, a, b, x, s, t)\\n};\\nvar pQ5V = function(a, b, c, d, x, s, t) {\\n    return bem8e(b ^ c ^ d, a, b, x, s, t)\\n};\\nvar pA5F = function(a, b, c, d, x, s, t) {\\n    return bem8e(c ^ (b | ~d), a, b, x, s, t)\\n};\\n```\\n\\n```\\nvar XC6w = function() {\\n    var bFG5L = \\\"0123456789abcdef\\\",\\n    GB0x = function(i) {\\n        return i % 4\\n    },\\n    Gx0x = function(i) {\\n        return 3 - i % 4\\n    };\\n    return function(iL3x, Gw0x) {\\n        var bu0x = [],\\n        mE5J = Gw0x ? GB0x: Gx0x;\\n        for (var i = 0,\\n        l = iL3x.length * 4; i < l; i++) {\\n            bu0x.push(bFG5L.charAt(iL3x[i >> 2] >> mE5J(i) * 8 + 4 & 15) + bFG5L.charAt(iL3x[i >> 2] >> mE5J(i) * 8 & 15))\\n        }\\n        return bu0x.join(\\\"\\\")\\n    }\\n} ();\\n```\\n\\n看起来眼花缭乱，但是我们并不需要知道各个函数的作用，直接用python的语法转换一下：\\n\\n\\n\\n<script src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/latest.js?config=TeX-MML-AM_CHTML' async>\\n</script>\\n<script type=\\\"text/x-mathjax-config\\\">\\n    MathJax.Hub.Config({\\n    tex2jax: {inlineMath: [['$','$'], ['\\\\\\\\(','\\\\\\\\)']]}\\n    });\\n</script>\\n\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]]}",
            "created_at_ts": 1559909951004,
            "created_at": "2019-06-07T12:19:11.000Z"
          },
          {
            "id": "5cfb9783c199180df866a250",
            "post_id": "5cfb9783c199180df866a24e",
            "mobiledoc": "{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[],\"sections\":[[1,\"p\",[[0,[],0,\"\"]]]]}",
            "created_at_ts": 1559992195931,
            "created_at": "2019-06-08T11:09:55.000Z"
          },
          {
            "id": "5cfb9789c199180df866a252",
            "post_id": "5cfb9783c199180df866a24e",
            "mobiledoc": "{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[],\"markups\":[],\"sections\":[[1,\"p\",[]]]}",
            "created_at_ts": 1559992201854,
            "created_at": "2019-06-08T11:10:01.000Z"
          },
          {
            "id": "5cfb978ec199180df866a254",
            "post_id": "5cfb9783c199180df866a24e",
            "mobiledoc": "{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]]}",
            "created_at_ts": 1559992206074,
            "created_at": "2019-06-08T11:10:06.000Z"
          },
          {
            "id": "5cfb979dc199180df866a256",
            "post_id": "5cfb9783c199180df866a24e",
            "mobiledoc": "{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"还没更新完的暂时qi'gen\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]]}",
            "created_at_ts": 1559992221248,
            "created_at": "2019-06-08T11:10:21.000Z"
          },
          {
            "id": "5cfb97a4c199180df866a258",
            "post_id": "5cfb9783c199180df866a24e",
            "mobiledoc": "{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"还没更新完的暂时弃更~\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]]}",
            "created_at_ts": 1559992228930,
            "created_at": "2019-06-08T11:10:28.000Z"
          },
          {
            "id": "5d38474ec199180df866a267",
            "post_id": "5d38474ec199180df866a265",
            "mobiledoc": "{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[],\"sections\":[[1,\"p\",[[0,[],0,\"\"]]]]}",
            "created_at_ts": 1563969358300,
            "created_at": "2019-07-24T11:55:58.000Z"
          },
          {
            "id": "5d3847f6c199180df866a270",
            "post_id": "5d38474ec199180df866a265",
            "mobiledoc": "{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[],\"markups\":[],\"sections\":[[1,\"p\",[[0,[],0,\"导入\"]]]]}",
            "created_at_ts": 1563969526072,
            "created_at": "2019-07-24T11:58:46.000Z"
          }
        ],
        "permissions": [
          {
            "id": "5cf3b8ed6e5789135f778449",
            "name": "Export database",
            "object_type": "db",
            "action_type": "exportContent",
            "object_id": null,
            "created_at": "2019-06-02T11:54:21.000Z",
            "updated_at": "2019-06-02T11:54:21.000Z"
          },
          {
            "id": "5cf3b8ed6e5789135f77844a",
            "name": "Import database",
            "object_type": "db",
            "action_type": "importContent",
            "object_id": null,
            "created_at": "2019-06-02T11:54:21.000Z",
            "updated_at": "2019-06-02T11:54:21.000Z"
          },
          {
            "id": "5cf3b8ed6e5789135f77844b",
            "name": "Delete all content",
            "object_type": "db",
            "action_type": "deleteAllContent",
            "object_id": null,
            "created_at": "2019-06-02T11:54:21.000Z",
            "updated_at": "2019-06-02T11:54:21.000Z"
          },
          {
            "id": "5cf3b8ed6e5789135f77844c",
            "name": "Send mail",
            "object_type": "mail",
            "action_type": "send",
            "object_id": null,
            "created_at": "2019-06-02T11:54:21.000Z",
            "updated_at": "2019-06-02T11:54:21.000Z"
          },
          {
            "id": "5cf3b8ed6e5789135f77844d",
            "name": "Browse notifications",
            "object_type": "notification",
            "action_type": "browse",
            "object_id": null,
            "created_at": "2019-06-02T11:54:21.000Z",
            "updated_at": "2019-06-02T11:54:21.000Z"
          },
          {
            "id": "5cf3b8ed6e5789135f77844e",
            "name": "Add notifications",
            "object_type": "notification",
            "action_type": "add",
            "object_id": null,
            "created_at": "2019-06-02T11:54:21.000Z",
            "updated_at": "2019-06-02T11:54:21.000Z"
          },
          {
            "id": "5cf3b8ed6e5789135f77844f",
            "name": "Delete notifications",
            "object_type": "notification",
            "action_type": "destroy",
            "object_id": null,
            "created_at": "2019-06-02T11:54:21.000Z",
            "updated_at": "2019-06-02T11:54:21.000Z"
          },
          {
            "id": "5cf3b8ed6e5789135f778450",
            "name": "Browse posts",
            "object_type": "post",
            "action_type": "browse",
            "object_id": null,
            "created_at": "2019-06-02T11:54:21.000Z",
            "updated_at": "2019-06-02T11:54:21.000Z"
          },
          {
            "id": "5cf3b8ed6e5789135f778451",
            "name": "Read posts",
            "object_type": "post",
            "action_type": "read",
            "object_id": null,
            "created_at": "2019-06-02T11:54:21.000Z",
            "updated_at": "2019-06-02T11:54:21.000Z"
          },
          {
            "id": "5cf3b8ed6e5789135f778452",
            "name": "Edit posts",
            "object_type": "post",
            "action_type": "edit",
            "object_id": null,
            "created_at": "2019-06-02T11:54:21.000Z",
            "updated_at": "2019-06-02T11:54:21.000Z"
          },
          {
            "id": "5cf3b8ed6e5789135f778453",
            "name": "Add posts",
            "object_type": "post",
            "action_type": "add",
            "object_id": null,
            "created_at": "2019-06-02T11:54:21.000Z",
            "updated_at": "2019-06-02T11:54:21.000Z"
          },
          {
            "id": "5cf3b8ed6e5789135f778454",
            "name": "Delete posts",
            "object_type": "post",
            "action_type": "destroy",
            "object_id": null,
            "created_at": "2019-06-02T11:54:21.000Z",
            "updated_at": "2019-06-02T11:54:21.000Z"
          },
          {
            "id": "5cf3b8ed6e5789135f778455",
            "name": "Browse settings",
            "object_type": "setting",
            "action_type": "browse",
            "object_id": null,
            "created_at": "2019-06-02T11:54:21.000Z",
            "updated_at": "2019-06-02T11:54:21.000Z"
          },
          {
            "id": "5cf3b8ed6e5789135f778456",
            "name": "Read settings",
            "object_type": "setting",
            "action_type": "read",
            "object_id": null,
            "created_at": "2019-06-02T11:54:21.000Z",
            "updated_at": "2019-06-02T11:54:21.000Z"
          },
          {
            "id": "5cf3b8ed6e5789135f778457",
            "name": "Edit settings",
            "object_type": "setting",
            "action_type": "edit",
            "object_id": null,
            "created_at": "2019-06-02T11:54:21.000Z",
            "updated_at": "2019-06-02T11:54:21.000Z"
          },
          {
            "id": "5cf3b8ed6e5789135f778458",
            "name": "Generate slugs",
            "object_type": "slug",
            "action_type": "generate",
            "object_id": null,
            "created_at": "2019-06-02T11:54:21.000Z",
            "updated_at": "2019-06-02T11:54:21.000Z"
          },
          {
            "id": "5cf3b8ed6e5789135f778459",
            "name": "Browse tags",
            "object_type": "tag",
            "action_type": "browse",
            "object_id": null,
            "created_at": "2019-06-02T11:54:21.000Z",
            "updated_at": "2019-06-02T11:54:21.000Z"
          },
          {
            "id": "5cf3b8ed6e5789135f77845a",
            "name": "Read tags",
            "object_type": "tag",
            "action_type": "read",
            "object_id": null,
            "created_at": "2019-06-02T11:54:21.000Z",
            "updated_at": "2019-06-02T11:54:21.000Z"
          },
          {
            "id": "5cf3b8ed6e5789135f77845b",
            "name": "Edit tags",
            "object_type": "tag",
            "action_type": "edit",
            "object_id": null,
            "created_at": "2019-06-02T11:54:21.000Z",
            "updated_at": "2019-06-02T11:54:21.000Z"
          },
          {
            "id": "5cf3b8ed6e5789135f77845c",
            "name": "Add tags",
            "object_type": "tag",
            "action_type": "add",
            "object_id": null,
            "created_at": "2019-06-02T11:54:21.000Z",
            "updated_at": "2019-06-02T11:54:21.000Z"
          },
          {
            "id": "5cf3b8ed6e5789135f77845d",
            "name": "Delete tags",
            "object_type": "tag",
            "action_type": "destroy",
            "object_id": null,
            "created_at": "2019-06-02T11:54:21.000Z",
            "updated_at": "2019-06-02T11:54:21.000Z"
          },
          {
            "id": "5cf3b8ed6e5789135f77845e",
            "name": "Browse themes",
            "object_type": "theme",
            "action_type": "browse",
            "object_id": null,
            "created_at": "2019-06-02T11:54:21.000Z",
            "updated_at": "2019-06-02T11:54:21.000Z"
          },
          {
            "id": "5cf3b8ed6e5789135f77845f",
            "name": "Edit themes",
            "object_type": "theme",
            "action_type": "edit",
            "object_id": null,
            "created_at": "2019-06-02T11:54:21.000Z",
            "updated_at": "2019-06-02T11:54:21.000Z"
          },
          {
            "id": "5cf3b8ed6e5789135f778460",
            "name": "Activate themes",
            "object_type": "theme",
            "action_type": "activate",
            "object_id": null,
            "created_at": "2019-06-02T11:54:21.000Z",
            "updated_at": "2019-06-02T11:54:21.000Z"
          },
          {
            "id": "5cf3b8ed6e5789135f778461",
            "name": "Upload themes",
            "object_type": "theme",
            "action_type": "add",
            "object_id": null,
            "created_at": "2019-06-02T11:54:21.000Z",
            "updated_at": "2019-06-02T11:54:21.000Z"
          },
          {
            "id": "5cf3b8ed6e5789135f778462",
            "name": "Download themes",
            "object_type": "theme",
            "action_type": "read",
            "object_id": null,
            "created_at": "2019-06-02T11:54:21.000Z",
            "updated_at": "2019-06-02T11:54:21.000Z"
          },
          {
            "id": "5cf3b8ed6e5789135f778463",
            "name": "Delete themes",
            "object_type": "theme",
            "action_type": "destroy",
            "object_id": null,
            "created_at": "2019-06-02T11:54:21.000Z",
            "updated_at": "2019-06-02T11:54:21.000Z"
          },
          {
            "id": "5cf3b8ed6e5789135f778464",
            "name": "Browse users",
            "object_type": "user",
            "action_type": "browse",
            "object_id": null,
            "created_at": "2019-06-02T11:54:21.000Z",
            "updated_at": "2019-06-02T11:54:21.000Z"
          },
          {
            "id": "5cf3b8ed6e5789135f778465",
            "name": "Read users",
            "object_type": "user",
            "action_type": "read",
            "object_id": null,
            "created_at": "2019-06-02T11:54:21.000Z",
            "updated_at": "2019-06-02T11:54:21.000Z"
          },
          {
            "id": "5cf3b8ed6e5789135f778466",
            "name": "Edit users",
            "object_type": "user",
            "action_type": "edit",
            "object_id": null,
            "created_at": "2019-06-02T11:54:21.000Z",
            "updated_at": "2019-06-02T11:54:21.000Z"
          },
          {
            "id": "5cf3b8ed6e5789135f778467",
            "name": "Add users",
            "object_type": "user",
            "action_type": "add",
            "object_id": null,
            "created_at": "2019-06-02T11:54:21.000Z",
            "updated_at": "2019-06-02T11:54:21.000Z"
          },
          {
            "id": "5cf3b8ed6e5789135f778468",
            "name": "Delete users",
            "object_type": "user",
            "action_type": "destroy",
            "object_id": null,
            "created_at": "2019-06-02T11:54:21.000Z",
            "updated_at": "2019-06-02T11:54:21.000Z"
          },
          {
            "id": "5cf3b8ed6e5789135f778469",
            "name": "Assign a role",
            "object_type": "role",
            "action_type": "assign",
            "object_id": null,
            "created_at": "2019-06-02T11:54:21.000Z",
            "updated_at": "2019-06-02T11:54:21.000Z"
          },
          {
            "id": "5cf3b8ed6e5789135f77846a",
            "name": "Browse roles",
            "object_type": "role",
            "action_type": "browse",
            "object_id": null,
            "created_at": "2019-06-02T11:54:21.000Z",
            "updated_at": "2019-06-02T11:54:21.000Z"
          },
          {
            "id": "5cf3b8ed6e5789135f77846b",
            "name": "Browse clients",
            "object_type": "client",
            "action_type": "browse",
            "object_id": null,
            "created_at": "2019-06-02T11:54:21.000Z",
            "updated_at": "2019-06-02T11:54:21.000Z"
          },
          {
            "id": "5cf3b8ed6e5789135f77846c",
            "name": "Read clients",
            "object_type": "client",
            "action_type": "read",
            "object_id": null,
            "created_at": "2019-06-02T11:54:21.000Z",
            "updated_at": "2019-06-02T11:54:21.000Z"
          },
          {
            "id": "5cf3b8ee6e5789135f77846d",
            "name": "Edit clients",
            "object_type": "client",
            "action_type": "edit",
            "object_id": null,
            "created_at": "2019-06-02T11:54:22.000Z",
            "updated_at": "2019-06-02T11:54:22.000Z"
          },
          {
            "id": "5cf3b8ee6e5789135f77846e",
            "name": "Add clients",
            "object_type": "client",
            "action_type": "add",
            "object_id": null,
            "created_at": "2019-06-02T11:54:22.000Z",
            "updated_at": "2019-06-02T11:54:22.000Z"
          },
          {
            "id": "5cf3b8ee6e5789135f77846f",
            "name": "Delete clients",
            "object_type": "client",
            "action_type": "destroy",
            "object_id": null,
            "created_at": "2019-06-02T11:54:22.000Z",
            "updated_at": "2019-06-02T11:54:22.000Z"
          },
          {
            "id": "5cf3b8ee6e5789135f778470",
            "name": "Browse subscribers",
            "object_type": "subscriber",
            "action_type": "browse",
            "object_id": null,
            "created_at": "2019-06-02T11:54:22.000Z",
            "updated_at": "2019-06-02T11:54:22.000Z"
          },
          {
            "id": "5cf3b8ee6e5789135f778471",
            "name": "Read subscribers",
            "object_type": "subscriber",
            "action_type": "read",
            "object_id": null,
            "created_at": "2019-06-02T11:54:22.000Z",
            "updated_at": "2019-06-02T11:54:22.000Z"
          },
          {
            "id": "5cf3b8ee6e5789135f778472",
            "name": "Edit subscribers",
            "object_type": "subscriber",
            "action_type": "edit",
            "object_id": null,
            "created_at": "2019-06-02T11:54:22.000Z",
            "updated_at": "2019-06-02T11:54:22.000Z"
          },
          {
            "id": "5cf3b8ee6e5789135f778473",
            "name": "Add subscribers",
            "object_type": "subscriber",
            "action_type": "add",
            "object_id": null,
            "created_at": "2019-06-02T11:54:22.000Z",
            "updated_at": "2019-06-02T11:54:22.000Z"
          },
          {
            "id": "5cf3b8ee6e5789135f778474",
            "name": "Delete subscribers",
            "object_type": "subscriber",
            "action_type": "destroy",
            "object_id": null,
            "created_at": "2019-06-02T11:54:22.000Z",
            "updated_at": "2019-06-02T11:54:22.000Z"
          },
          {
            "id": "5cf3b8ee6e5789135f778475",
            "name": "Browse invites",
            "object_type": "invite",
            "action_type": "browse",
            "object_id": null,
            "created_at": "2019-06-02T11:54:22.000Z",
            "updated_at": "2019-06-02T11:54:22.000Z"
          },
          {
            "id": "5cf3b8ee6e5789135f778476",
            "name": "Read invites",
            "object_type": "invite",
            "action_type": "read",
            "object_id": null,
            "created_at": "2019-06-02T11:54:22.000Z",
            "updated_at": "2019-06-02T11:54:22.000Z"
          },
          {
            "id": "5cf3b8ee6e5789135f778477",
            "name": "Edit invites",
            "object_type": "invite",
            "action_type": "edit",
            "object_id": null,
            "created_at": "2019-06-02T11:54:22.000Z",
            "updated_at": "2019-06-02T11:54:22.000Z"
          },
          {
            "id": "5cf3b8ee6e5789135f778478",
            "name": "Add invites",
            "object_type": "invite",
            "action_type": "add",
            "object_id": null,
            "created_at": "2019-06-02T11:54:22.000Z",
            "updated_at": "2019-06-02T11:54:22.000Z"
          },
          {
            "id": "5cf3b8ee6e5789135f778479",
            "name": "Delete invites",
            "object_type": "invite",
            "action_type": "destroy",
            "object_id": null,
            "created_at": "2019-06-02T11:54:22.000Z",
            "updated_at": "2019-06-02T11:54:22.000Z"
          },
          {
            "id": "5cf3b8ee6e5789135f77847a",
            "name": "Download redirects",
            "object_type": "redirect",
            "action_type": "download",
            "object_id": null,
            "created_at": "2019-06-02T11:54:22.000Z",
            "updated_at": "2019-06-02T11:54:22.000Z"
          },
          {
            "id": "5cf3b8ee6e5789135f77847b",
            "name": "Upload redirects",
            "object_type": "redirect",
            "action_type": "upload",
            "object_id": null,
            "created_at": "2019-06-02T11:54:22.000Z",
            "updated_at": "2019-06-02T11:54:22.000Z"
          },
          {
            "id": "5cf3b8ee6e5789135f77847c",
            "name": "Add webhooks",
            "object_type": "webhook",
            "action_type": "add",
            "object_id": null,
            "created_at": "2019-06-02T11:54:22.000Z",
            "updated_at": "2019-06-02T11:54:22.000Z"
          },
          {
            "id": "5cf3b8ee6e5789135f77847d",
            "name": "Edit webhooks",
            "object_type": "webhook",
            "action_type": "edit",
            "object_id": null,
            "created_at": "2019-06-02T11:54:22.000Z",
            "updated_at": "2019-06-02T11:54:22.000Z"
          },
          {
            "id": "5cf3b8ee6e5789135f77847e",
            "name": "Delete webhooks",
            "object_type": "webhook",
            "action_type": "destroy",
            "object_id": null,
            "created_at": "2019-06-02T11:54:22.000Z",
            "updated_at": "2019-06-02T11:54:22.000Z"
          },
          {
            "id": "5cf3b8ee6e5789135f77847f",
            "name": "Browse integrations",
            "object_type": "integration",
            "action_type": "browse",
            "object_id": null,
            "created_at": "2019-06-02T11:54:22.000Z",
            "updated_at": "2019-06-02T11:54:22.000Z"
          },
          {
            "id": "5cf3b8ee6e5789135f778480",
            "name": "Read integrations",
            "object_type": "integration",
            "action_type": "read",
            "object_id": null,
            "created_at": "2019-06-02T11:54:22.000Z",
            "updated_at": "2019-06-02T11:54:22.000Z"
          },
          {
            "id": "5cf3b8ee6e5789135f778481",
            "name": "Edit integrations",
            "object_type": "integration",
            "action_type": "edit",
            "object_id": null,
            "created_at": "2019-06-02T11:54:22.000Z",
            "updated_at": "2019-06-02T11:54:22.000Z"
          },
          {
            "id": "5cf3b8ee6e5789135f778482",
            "name": "Add integrations",
            "object_type": "integration",
            "action_type": "add",
            "object_id": null,
            "created_at": "2019-06-02T11:54:22.000Z",
            "updated_at": "2019-06-02T11:54:22.000Z"
          },
          {
            "id": "5cf3b8ee6e5789135f778483",
            "name": "Delete integrations",
            "object_type": "integration",
            "action_type": "destroy",
            "object_id": null,
            "created_at": "2019-06-02T11:54:22.000Z",
            "updated_at": "2019-06-02T11:54:22.000Z"
          },
          {
            "id": "5cf3b8ee6e5789135f778484",
            "name": "Browse API keys",
            "object_type": "api_key",
            "action_type": "browse",
            "object_id": null,
            "created_at": "2019-06-02T11:54:22.000Z",
            "updated_at": "2019-06-02T11:54:22.000Z"
          },
          {
            "id": "5cf3b8ee6e5789135f778485",
            "name": "Read API keys",
            "object_type": "api_key",
            "action_type": "read",
            "object_id": null,
            "created_at": "2019-06-02T11:54:22.000Z",
            "updated_at": "2019-06-02T11:54:22.000Z"
          },
          {
            "id": "5cf3b8ee6e5789135f778486",
            "name": "Edit API keys",
            "object_type": "api_key",
            "action_type": "edit",
            "object_id": null,
            "created_at": "2019-06-02T11:54:22.000Z",
            "updated_at": "2019-06-02T11:54:22.000Z"
          },
          {
            "id": "5cf3b8ee6e5789135f778487",
            "name": "Add API keys",
            "object_type": "api_key",
            "action_type": "add",
            "object_id": null,
            "created_at": "2019-06-02T11:54:22.000Z",
            "updated_at": "2019-06-02T11:54:22.000Z"
          },
          {
            "id": "5cf3b8ee6e5789135f778488",
            "name": "Delete API keys",
            "object_type": "api_key",
            "action_type": "destroy",
            "object_id": null,
            "created_at": "2019-06-02T11:54:22.000Z",
            "updated_at": "2019-06-02T11:54:22.000Z"
          },
          {
            "id": "5cf3b8ee6e5789135f778489",
            "name": "Browse Actions",
            "object_type": "action",
            "action_type": "browse",
            "object_id": null,
            "created_at": "2019-06-02T11:54:22.000Z",
            "updated_at": "2019-06-02T11:54:22.000Z"
          },
          {
            "id": "5cf3b8ee6e5789135f77848a",
            "name": "Browse Members",
            "object_type": "member",
            "action_type": "browse",
            "object_id": null,
            "created_at": "2019-06-02T11:54:22.000Z",
            "updated_at": "2019-06-02T11:54:22.000Z"
          },
          {
            "id": "5cf3b8ee6e5789135f77848b",
            "name": "Read Members",
            "object_type": "member",
            "action_type": "read",
            "object_id": null,
            "created_at": "2019-06-02T11:54:22.000Z",
            "updated_at": "2019-06-02T11:54:22.000Z"
          },
          {
            "id": "5cf3b8ee6e5789135f77848c",
            "name": "Edit Members",
            "object_type": "member",
            "action_type": "edit",
            "object_id": null,
            "created_at": "2019-06-02T11:54:22.000Z",
            "updated_at": "2019-06-02T11:54:22.000Z"
          },
          {
            "id": "5cf3b8ee6e5789135f77848d",
            "name": "Add Members",
            "object_type": "member",
            "action_type": "add",
            "object_id": null,
            "created_at": "2019-06-02T11:54:22.000Z",
            "updated_at": "2019-06-02T11:54:22.000Z"
          },
          {
            "id": "5cf3b8ee6e5789135f77848e",
            "name": "Delete Members",
            "object_type": "member",
            "action_type": "destroy",
            "object_id": null,
            "created_at": "2019-06-02T11:54:22.000Z",
            "updated_at": "2019-06-02T11:54:22.000Z"
          }
        ],
        "permissions_apps": [],
        "permissions_roles": [
          {
            "id": "5cf3b8ef6e5789135f7784a0",
            "role_id": "5cf3b8ed6e5789135f778443",
            "permission_id": "5cf3b8ed6e5789135f778449"
          },
          {
            "id": "5cf3b8ef6e5789135f7784a1",
            "role_id": "5cf3b8ed6e5789135f778443",
            "permission_id": "5cf3b8ed6e5789135f77844a"
          },
          {
            "id": "5cf3b8ef6e5789135f7784a2",
            "role_id": "5cf3b8ed6e5789135f778443",
            "permission_id": "5cf3b8ed6e5789135f77844b"
          },
          {
            "id": "5cf3b8ef6e5789135f7784a3",
            "role_id": "5cf3b8ed6e5789135f778443",
            "permission_id": "5cf3b8ed6e5789135f77844c"
          },
          {
            "id": "5cf3b8ef6e5789135f7784a4",
            "role_id": "5cf3b8ed6e5789135f778443",
            "permission_id": "5cf3b8ed6e5789135f77844d"
          },
          {
            "id": "5cf3b8ef6e5789135f7784a5",
            "role_id": "5cf3b8ed6e5789135f778443",
            "permission_id": "5cf3b8ed6e5789135f77844e"
          },
          {
            "id": "5cf3b8ef6e5789135f7784a6",
            "role_id": "5cf3b8ed6e5789135f778443",
            "permission_id": "5cf3b8ed6e5789135f77844f"
          },
          {
            "id": "5cf3b8ef6e5789135f7784a7",
            "role_id": "5cf3b8ed6e5789135f778443",
            "permission_id": "5cf3b8ed6e5789135f778450"
          },
          {
            "id": "5cf3b8ef6e5789135f7784a8",
            "role_id": "5cf3b8ed6e5789135f778443",
            "permission_id": "5cf3b8ed6e5789135f778451"
          },
          {
            "id": "5cf3b8ef6e5789135f7784a9",
            "role_id": "5cf3b8ed6e5789135f778443",
            "permission_id": "5cf3b8ed6e5789135f778452"
          },
          {
            "id": "5cf3b8ef6e5789135f7784aa",
            "role_id": "5cf3b8ed6e5789135f778443",
            "permission_id": "5cf3b8ed6e5789135f778453"
          },
          {
            "id": "5cf3b8ef6e5789135f7784ab",
            "role_id": "5cf3b8ed6e5789135f778443",
            "permission_id": "5cf3b8ed6e5789135f778454"
          },
          {
            "id": "5cf3b8ef6e5789135f7784ac",
            "role_id": "5cf3b8ed6e5789135f778443",
            "permission_id": "5cf3b8ed6e5789135f778455"
          },
          {
            "id": "5cf3b8ef6e5789135f7784ad",
            "role_id": "5cf3b8ed6e5789135f778443",
            "permission_id": "5cf3b8ed6e5789135f778456"
          },
          {
            "id": "5cf3b8ef6e5789135f7784ae",
            "role_id": "5cf3b8ed6e5789135f778443",
            "permission_id": "5cf3b8ed6e5789135f778457"
          },
          {
            "id": "5cf3b8ef6e5789135f7784af",
            "role_id": "5cf3b8ed6e5789135f778443",
            "permission_id": "5cf3b8ed6e5789135f778458"
          },
          {
            "id": "5cf3b8ef6e5789135f7784b0",
            "role_id": "5cf3b8ed6e5789135f778443",
            "permission_id": "5cf3b8ed6e5789135f778459"
          },
          {
            "id": "5cf3b8ef6e5789135f7784b1",
            "role_id": "5cf3b8ed6e5789135f778443",
            "permission_id": "5cf3b8ed6e5789135f77845a"
          },
          {
            "id": "5cf3b8ef6e5789135f7784b2",
            "role_id": "5cf3b8ed6e5789135f778443",
            "permission_id": "5cf3b8ed6e5789135f77845b"
          },
          {
            "id": "5cf3b8ef6e5789135f7784b3",
            "role_id": "5cf3b8ed6e5789135f778443",
            "permission_id": "5cf3b8ed6e5789135f77845c"
          },
          {
            "id": "5cf3b8ef6e5789135f7784b4",
            "role_id": "5cf3b8ed6e5789135f778443",
            "permission_id": "5cf3b8ed6e5789135f77845d"
          },
          {
            "id": "5cf3b8ef6e5789135f7784b5",
            "role_id": "5cf3b8ed6e5789135f778443",
            "permission_id": "5cf3b8ed6e5789135f77845e"
          },
          {
            "id": "5cf3b8ef6e5789135f7784b6",
            "role_id": "5cf3b8ed6e5789135f778443",
            "permission_id": "5cf3b8ed6e5789135f77845f"
          },
          {
            "id": "5cf3b8ef6e5789135f7784b7",
            "role_id": "5cf3b8ed6e5789135f778443",
            "permission_id": "5cf3b8ed6e5789135f778460"
          },
          {
            "id": "5cf3b8ef6e5789135f7784b8",
            "role_id": "5cf3b8ed6e5789135f778443",
            "permission_id": "5cf3b8ed6e5789135f778461"
          },
          {
            "id": "5cf3b8ef6e5789135f7784b9",
            "role_id": "5cf3b8ed6e5789135f778443",
            "permission_id": "5cf3b8ed6e5789135f778462"
          },
          {
            "id": "5cf3b8ef6e5789135f7784ba",
            "role_id": "5cf3b8ed6e5789135f778443",
            "permission_id": "5cf3b8ed6e5789135f778463"
          },
          {
            "id": "5cf3b8ef6e5789135f7784bb",
            "role_id": "5cf3b8ed6e5789135f778443",
            "permission_id": "5cf3b8ed6e5789135f778464"
          },
          {
            "id": "5cf3b8ef6e5789135f7784bc",
            "role_id": "5cf3b8ed6e5789135f778443",
            "permission_id": "5cf3b8ed6e5789135f778465"
          },
          {
            "id": "5cf3b8ef6e5789135f7784bd",
            "role_id": "5cf3b8ed6e5789135f778443",
            "permission_id": "5cf3b8ed6e5789135f778466"
          },
          {
            "id": "5cf3b8ef6e5789135f7784be",
            "role_id": "5cf3b8ed6e5789135f778443",
            "permission_id": "5cf3b8ed6e5789135f778467"
          },
          {
            "id": "5cf3b8ef6e5789135f7784bf",
            "role_id": "5cf3b8ed6e5789135f778443",
            "permission_id": "5cf3b8ed6e5789135f778468"
          },
          {
            "id": "5cf3b8ef6e5789135f7784c0",
            "role_id": "5cf3b8ed6e5789135f778443",
            "permission_id": "5cf3b8ed6e5789135f778469"
          },
          {
            "id": "5cf3b8ef6e5789135f7784c1",
            "role_id": "5cf3b8ed6e5789135f778443",
            "permission_id": "5cf3b8ed6e5789135f77846a"
          },
          {
            "id": "5cf3b8ef6e5789135f7784c2",
            "role_id": "5cf3b8ed6e5789135f778443",
            "permission_id": "5cf3b8ed6e5789135f77846b"
          },
          {
            "id": "5cf3b8ef6e5789135f7784c3",
            "role_id": "5cf3b8ed6e5789135f778443",
            "permission_id": "5cf3b8ed6e5789135f77846c"
          },
          {
            "id": "5cf3b8ef6e5789135f7784c4",
            "role_id": "5cf3b8ed6e5789135f778443",
            "permission_id": "5cf3b8ee6e5789135f77846d"
          },
          {
            "id": "5cf3b8ef6e5789135f7784c5",
            "role_id": "5cf3b8ed6e5789135f778443",
            "permission_id": "5cf3b8ee6e5789135f77846e"
          },
          {
            "id": "5cf3b8ef6e5789135f7784c6",
            "role_id": "5cf3b8ed6e5789135f778443",
            "permission_id": "5cf3b8ee6e5789135f77846f"
          },
          {
            "id": "5cf3b8ef6e5789135f7784c7",
            "role_id": "5cf3b8ed6e5789135f778443",
            "permission_id": "5cf3b8ee6e5789135f778470"
          },
          {
            "id": "5cf3b8ef6e5789135f7784c8",
            "role_id": "5cf3b8ed6e5789135f778443",
            "permission_id": "5cf3b8ee6e5789135f778471"
          },
          {
            "id": "5cf3b8ef6e5789135f7784c9",
            "role_id": "5cf3b8ed6e5789135f778443",
            "permission_id": "5cf3b8ee6e5789135f778472"
          },
          {
            "id": "5cf3b8ef6e5789135f7784ca",
            "role_id": "5cf3b8ed6e5789135f778443",
            "permission_id": "5cf3b8ee6e5789135f778473"
          },
          {
            "id": "5cf3b8ef6e5789135f7784cb",
            "role_id": "5cf3b8ed6e5789135f778443",
            "permission_id": "5cf3b8ee6e5789135f778474"
          },
          {
            "id": "5cf3b8ef6e5789135f7784cc",
            "role_id": "5cf3b8ed6e5789135f778443",
            "permission_id": "5cf3b8ee6e5789135f778475"
          },
          {
            "id": "5cf3b8ef6e5789135f7784cd",
            "role_id": "5cf3b8ed6e5789135f778443",
            "permission_id": "5cf3b8ee6e5789135f778476"
          },
          {
            "id": "5cf3b8ef6e5789135f7784ce",
            "role_id": "5cf3b8ed6e5789135f778443",
            "permission_id": "5cf3b8ee6e5789135f778477"
          },
          {
            "id": "5cf3b8ef6e5789135f7784cf",
            "role_id": "5cf3b8ed6e5789135f778443",
            "permission_id": "5cf3b8ee6e5789135f778478"
          },
          {
            "id": "5cf3b8ef6e5789135f7784d0",
            "role_id": "5cf3b8ed6e5789135f778443",
            "permission_id": "5cf3b8ee6e5789135f778479"
          },
          {
            "id": "5cf3b8ef6e5789135f7784d1",
            "role_id": "5cf3b8ed6e5789135f778443",
            "permission_id": "5cf3b8ee6e5789135f77847a"
          },
          {
            "id": "5cf3b8ef6e5789135f7784d2",
            "role_id": "5cf3b8ed6e5789135f778443",
            "permission_id": "5cf3b8ee6e5789135f77847b"
          },
          {
            "id": "5cf3b8ef6e5789135f7784d3",
            "role_id": "5cf3b8ed6e5789135f778443",
            "permission_id": "5cf3b8ee6e5789135f77847c"
          },
          {
            "id": "5cf3b8ef6e5789135f7784d4",
            "role_id": "5cf3b8ed6e5789135f778443",
            "permission_id": "5cf3b8ee6e5789135f77847d"
          },
          {
            "id": "5cf3b8ef6e5789135f7784d5",
            "role_id": "5cf3b8ed6e5789135f778443",
            "permission_id": "5cf3b8ee6e5789135f77847e"
          },
          {
            "id": "5cf3b8ef6e5789135f7784d6",
            "role_id": "5cf3b8ed6e5789135f778443",
            "permission_id": "5cf3b8ee6e5789135f77847f"
          },
          {
            "id": "5cf3b8ef6e5789135f7784d7",
            "role_id": "5cf3b8ed6e5789135f778443",
            "permission_id": "5cf3b8ee6e5789135f778480"
          },
          {
            "id": "5cf3b8ef6e5789135f7784d8",
            "role_id": "5cf3b8ed6e5789135f778443",
            "permission_id": "5cf3b8ee6e5789135f778481"
          },
          {
            "id": "5cf3b8ef6e5789135f7784d9",
            "role_id": "5cf3b8ed6e5789135f778443",
            "permission_id": "5cf3b8ee6e5789135f778482"
          },
          {
            "id": "5cf3b8ef6e5789135f7784da",
            "role_id": "5cf3b8ed6e5789135f778443",
            "permission_id": "5cf3b8ee6e5789135f778483"
          },
          {
            "id": "5cf3b8ef6e5789135f7784db",
            "role_id": "5cf3b8ed6e5789135f778443",
            "permission_id": "5cf3b8ee6e5789135f778484"
          },
          {
            "id": "5cf3b8ef6e5789135f7784dc",
            "role_id": "5cf3b8ed6e5789135f778443",
            "permission_id": "5cf3b8ee6e5789135f778485"
          },
          {
            "id": "5cf3b8ef6e5789135f7784dd",
            "role_id": "5cf3b8ed6e5789135f778443",
            "permission_id": "5cf3b8ee6e5789135f778486"
          },
          {
            "id": "5cf3b8ef6e5789135f7784de",
            "role_id": "5cf3b8ed6e5789135f778443",
            "permission_id": "5cf3b8ee6e5789135f778487"
          },
          {
            "id": "5cf3b8ef6e5789135f7784df",
            "role_id": "5cf3b8ed6e5789135f778443",
            "permission_id": "5cf3b8ee6e5789135f778488"
          },
          {
            "id": "5cf3b8ef6e5789135f7784e0",
            "role_id": "5cf3b8ed6e5789135f778443",
            "permission_id": "5cf3b8ee6e5789135f778489"
          },
          {
            "id": "5cf3b8ef6e5789135f7784e1",
            "role_id": "5cf3b8ed6e5789135f778443",
            "permission_id": "5cf3b8ee6e5789135f77848a"
          },
          {
            "id": "5cf3b8ef6e5789135f7784e2",
            "role_id": "5cf3b8ed6e5789135f778443",
            "permission_id": "5cf3b8ee6e5789135f77848b"
          },
          {
            "id": "5cf3b8ef6e5789135f7784e3",
            "role_id": "5cf3b8ed6e5789135f778443",
            "permission_id": "5cf3b8ee6e5789135f77848c"
          },
          {
            "id": "5cf3b8ef6e5789135f7784e4",
            "role_id": "5cf3b8ed6e5789135f778443",
            "permission_id": "5cf3b8ee6e5789135f77848d"
          },
          {
            "id": "5cf3b8ef6e5789135f7784e5",
            "role_id": "5cf3b8ed6e5789135f778443",
            "permission_id": "5cf3b8ee6e5789135f77848e"
          },
          {
            "id": "5cf3b8ef6e5789135f7784e6",
            "role_id": "5cf3b8ed6e5789135f778448",
            "permission_id": "5cf3b8ed6e5789135f77844c"
          },
          {
            "id": "5cf3b8ef6e5789135f7784e7",
            "role_id": "5cf3b8ed6e5789135f778448",
            "permission_id": "5cf3b8ed6e5789135f77844d"
          },
          {
            "id": "5cf3b8ef6e5789135f7784e8",
            "role_id": "5cf3b8ed6e5789135f778448",
            "permission_id": "5cf3b8ed6e5789135f77844e"
          },
          {
            "id": "5cf3b8ef6e5789135f7784e9",
            "role_id": "5cf3b8ed6e5789135f778448",
            "permission_id": "5cf3b8ed6e5789135f77844f"
          },
          {
            "id": "5cf3b8ef6e5789135f7784ea",
            "role_id": "5cf3b8ed6e5789135f778448",
            "permission_id": "5cf3b8ed6e5789135f778450"
          },
          {
            "id": "5cf3b8ef6e5789135f7784eb",
            "role_id": "5cf3b8ed6e5789135f778448",
            "permission_id": "5cf3b8ed6e5789135f778451"
          },
          {
            "id": "5cf3b8ef6e5789135f7784ec",
            "role_id": "5cf3b8ed6e5789135f778448",
            "permission_id": "5cf3b8ed6e5789135f778452"
          },
          {
            "id": "5cf3b8ef6e5789135f7784ed",
            "role_id": "5cf3b8ed6e5789135f778448",
            "permission_id": "5cf3b8ed6e5789135f778453"
          },
          {
            "id": "5cf3b8ef6e5789135f7784ee",
            "role_id": "5cf3b8ed6e5789135f778448",
            "permission_id": "5cf3b8ed6e5789135f778454"
          },
          {
            "id": "5cf3b8ef6e5789135f7784ef",
            "role_id": "5cf3b8ed6e5789135f778448",
            "permission_id": "5cf3b8ed6e5789135f778455"
          },
          {
            "id": "5cf3b8ef6e5789135f7784f0",
            "role_id": "5cf3b8ed6e5789135f778448",
            "permission_id": "5cf3b8ed6e5789135f778456"
          },
          {
            "id": "5cf3b8ef6e5789135f7784f1",
            "role_id": "5cf3b8ed6e5789135f778448",
            "permission_id": "5cf3b8ed6e5789135f778457"
          },
          {
            "id": "5cf3b8ef6e5789135f7784f2",
            "role_id": "5cf3b8ed6e5789135f778448",
            "permission_id": "5cf3b8ed6e5789135f778458"
          },
          {
            "id": "5cf3b8ef6e5789135f7784f3",
            "role_id": "5cf3b8ed6e5789135f778448",
            "permission_id": "5cf3b8ed6e5789135f778459"
          },
          {
            "id": "5cf3b8ef6e5789135f7784f4",
            "role_id": "5cf3b8ed6e5789135f778448",
            "permission_id": "5cf3b8ed6e5789135f77845a"
          },
          {
            "id": "5cf3b8ef6e5789135f7784f5",
            "role_id": "5cf3b8ed6e5789135f778448",
            "permission_id": "5cf3b8ed6e5789135f77845b"
          },
          {
            "id": "5cf3b8ef6e5789135f7784f6",
            "role_id": "5cf3b8ed6e5789135f778448",
            "permission_id": "5cf3b8ed6e5789135f77845c"
          },
          {
            "id": "5cf3b8ef6e5789135f7784f7",
            "role_id": "5cf3b8ed6e5789135f778448",
            "permission_id": "5cf3b8ed6e5789135f77845d"
          },
          {
            "id": "5cf3b8ef6e5789135f7784f8",
            "role_id": "5cf3b8ed6e5789135f778448",
            "permission_id": "5cf3b8ed6e5789135f77845e"
          },
          {
            "id": "5cf3b8ef6e5789135f7784f9",
            "role_id": "5cf3b8ed6e5789135f778448",
            "permission_id": "5cf3b8ed6e5789135f77845f"
          },
          {
            "id": "5cf3b8ef6e5789135f7784fa",
            "role_id": "5cf3b8ed6e5789135f778448",
            "permission_id": "5cf3b8ed6e5789135f778460"
          },
          {
            "id": "5cf3b8ef6e5789135f7784fb",
            "role_id": "5cf3b8ed6e5789135f778448",
            "permission_id": "5cf3b8ed6e5789135f778461"
          },
          {
            "id": "5cf3b8ef6e5789135f7784fc",
            "role_id": "5cf3b8ed6e5789135f778448",
            "permission_id": "5cf3b8ed6e5789135f778462"
          },
          {
            "id": "5cf3b8ef6e5789135f7784fd",
            "role_id": "5cf3b8ed6e5789135f778448",
            "permission_id": "5cf3b8ed6e5789135f778463"
          },
          {
            "id": "5cf3b8ef6e5789135f7784fe",
            "role_id": "5cf3b8ed6e5789135f778448",
            "permission_id": "5cf3b8ed6e5789135f778464"
          },
          {
            "id": "5cf3b8ef6e5789135f7784ff",
            "role_id": "5cf3b8ed6e5789135f778448",
            "permission_id": "5cf3b8ed6e5789135f778465"
          },
          {
            "id": "5cf3b8ef6e5789135f778500",
            "role_id": "5cf3b8ed6e5789135f778448",
            "permission_id": "5cf3b8ed6e5789135f778466"
          },
          {
            "id": "5cf3b8ef6e5789135f778501",
            "role_id": "5cf3b8ed6e5789135f778448",
            "permission_id": "5cf3b8ed6e5789135f778467"
          },
          {
            "id": "5cf3b8ef6e5789135f778502",
            "role_id": "5cf3b8ed6e5789135f778448",
            "permission_id": "5cf3b8ed6e5789135f778468"
          },
          {
            "id": "5cf3b8ef6e5789135f778503",
            "role_id": "5cf3b8ed6e5789135f778448",
            "permission_id": "5cf3b8ed6e5789135f778469"
          },
          {
            "id": "5cf3b8ef6e5789135f778504",
            "role_id": "5cf3b8ed6e5789135f778448",
            "permission_id": "5cf3b8ed6e5789135f77846a"
          },
          {
            "id": "5cf3b8ef6e5789135f778505",
            "role_id": "5cf3b8ed6e5789135f778448",
            "permission_id": "5cf3b8ed6e5789135f77846b"
          },
          {
            "id": "5cf3b8ef6e5789135f778506",
            "role_id": "5cf3b8ed6e5789135f778448",
            "permission_id": "5cf3b8ed6e5789135f77846c"
          },
          {
            "id": "5cf3b8ef6e5789135f778507",
            "role_id": "5cf3b8ed6e5789135f778448",
            "permission_id": "5cf3b8ee6e5789135f77846d"
          },
          {
            "id": "5cf3b8ef6e5789135f778508",
            "role_id": "5cf3b8ed6e5789135f778448",
            "permission_id": "5cf3b8ee6e5789135f77846e"
          },
          {
            "id": "5cf3b8ef6e5789135f778509",
            "role_id": "5cf3b8ed6e5789135f778448",
            "permission_id": "5cf3b8ee6e5789135f77846f"
          },
          {
            "id": "5cf3b8ef6e5789135f77850a",
            "role_id": "5cf3b8ed6e5789135f778448",
            "permission_id": "5cf3b8ee6e5789135f778470"
          },
          {
            "id": "5cf3b8ef6e5789135f77850b",
            "role_id": "5cf3b8ed6e5789135f778448",
            "permission_id": "5cf3b8ee6e5789135f778471"
          },
          {
            "id": "5cf3b8ef6e5789135f77850c",
            "role_id": "5cf3b8ed6e5789135f778448",
            "permission_id": "5cf3b8ee6e5789135f778472"
          },
          {
            "id": "5cf3b8ef6e5789135f77850d",
            "role_id": "5cf3b8ed6e5789135f778448",
            "permission_id": "5cf3b8ee6e5789135f778473"
          },
          {
            "id": "5cf3b8ef6e5789135f77850e",
            "role_id": "5cf3b8ed6e5789135f778448",
            "permission_id": "5cf3b8ee6e5789135f778474"
          },
          {
            "id": "5cf3b8ef6e5789135f77850f",
            "role_id": "5cf3b8ed6e5789135f778448",
            "permission_id": "5cf3b8ee6e5789135f778475"
          },
          {
            "id": "5cf3b8ef6e5789135f778510",
            "role_id": "5cf3b8ed6e5789135f778448",
            "permission_id": "5cf3b8ee6e5789135f778476"
          },
          {
            "id": "5cf3b8ef6e5789135f778511",
            "role_id": "5cf3b8ed6e5789135f778448",
            "permission_id": "5cf3b8ee6e5789135f778477"
          },
          {
            "id": "5cf3b8ef6e5789135f778512",
            "role_id": "5cf3b8ed6e5789135f778448",
            "permission_id": "5cf3b8ee6e5789135f778478"
          },
          {
            "id": "5cf3b8ef6e5789135f778513",
            "role_id": "5cf3b8ed6e5789135f778448",
            "permission_id": "5cf3b8ee6e5789135f778479"
          },
          {
            "id": "5cf3b8ef6e5789135f778514",
            "role_id": "5cf3b8ed6e5789135f778448",
            "permission_id": "5cf3b8ee6e5789135f77847a"
          },
          {
            "id": "5cf3b8ef6e5789135f778515",
            "role_id": "5cf3b8ed6e5789135f778448",
            "permission_id": "5cf3b8ee6e5789135f77847b"
          },
          {
            "id": "5cf3b8ef6e5789135f778516",
            "role_id": "5cf3b8ed6e5789135f778448",
            "permission_id": "5cf3b8ee6e5789135f77847c"
          },
          {
            "id": "5cf3b8ef6e5789135f778517",
            "role_id": "5cf3b8ed6e5789135f778448",
            "permission_id": "5cf3b8ee6e5789135f77847d"
          },
          {
            "id": "5cf3b8ef6e5789135f778518",
            "role_id": "5cf3b8ed6e5789135f778448",
            "permission_id": "5cf3b8ee6e5789135f77847e"
          },
          {
            "id": "5cf3b8ef6e5789135f778519",
            "role_id": "5cf3b8ed6e5789135f778448",
            "permission_id": "5cf3b8ee6e5789135f778489"
          },
          {
            "id": "5cf3b8ef6e5789135f77851a",
            "role_id": "5cf3b8ed6e5789135f778448",
            "permission_id": "5cf3b8ee6e5789135f77848a"
          },
          {
            "id": "5cf3b8ef6e5789135f77851b",
            "role_id": "5cf3b8ed6e5789135f778448",
            "permission_id": "5cf3b8ee6e5789135f77848b"
          },
          {
            "id": "5cf3b8ef6e5789135f77851c",
            "role_id": "5cf3b8ed6e5789135f778448",
            "permission_id": "5cf3b8ee6e5789135f77848c"
          },
          {
            "id": "5cf3b8ef6e5789135f77851d",
            "role_id": "5cf3b8ed6e5789135f778448",
            "permission_id": "5cf3b8ee6e5789135f77848d"
          },
          {
            "id": "5cf3b8ef6e5789135f77851e",
            "role_id": "5cf3b8ed6e5789135f778448",
            "permission_id": "5cf3b8ee6e5789135f77848e"
          },
          {
            "id": "5cf3b8ef6e5789135f77851f",
            "role_id": "5cf3b8ed6e5789135f778444",
            "permission_id": "5cf3b8ed6e5789135f77844d"
          },
          {
            "id": "5cf3b8ef6e5789135f778520",
            "role_id": "5cf3b8ed6e5789135f778444",
            "permission_id": "5cf3b8ed6e5789135f77844e"
          },
          {
            "id": "5cf3b8ef6e5789135f778521",
            "role_id": "5cf3b8ed6e5789135f778444",
            "permission_id": "5cf3b8ed6e5789135f77844f"
          },
          {
            "id": "5cf3b8ef6e5789135f778522",
            "role_id": "5cf3b8ed6e5789135f778444",
            "permission_id": "5cf3b8ed6e5789135f778450"
          },
          {
            "id": "5cf3b8ef6e5789135f778523",
            "role_id": "5cf3b8ed6e5789135f778444",
            "permission_id": "5cf3b8ed6e5789135f778451"
          },
          {
            "id": "5cf3b8ef6e5789135f778524",
            "role_id": "5cf3b8ed6e5789135f778444",
            "permission_id": "5cf3b8ed6e5789135f778452"
          },
          {
            "id": "5cf3b8ef6e5789135f778525",
            "role_id": "5cf3b8ed6e5789135f778444",
            "permission_id": "5cf3b8ed6e5789135f778453"
          },
          {
            "id": "5cf3b8ef6e5789135f778526",
            "role_id": "5cf3b8ed6e5789135f778444",
            "permission_id": "5cf3b8ed6e5789135f778454"
          },
          {
            "id": "5cf3b8ef6e5789135f778527",
            "role_id": "5cf3b8ed6e5789135f778444",
            "permission_id": "5cf3b8ed6e5789135f778455"
          },
          {
            "id": "5cf3b8ef6e5789135f778528",
            "role_id": "5cf3b8ed6e5789135f778444",
            "permission_id": "5cf3b8ed6e5789135f778456"
          },
          {
            "id": "5cf3b8ef6e5789135f778529",
            "role_id": "5cf3b8ed6e5789135f778444",
            "permission_id": "5cf3b8ed6e5789135f778458"
          },
          {
            "id": "5cf3b8ef6e5789135f77852a",
            "role_id": "5cf3b8ed6e5789135f778444",
            "permission_id": "5cf3b8ed6e5789135f778459"
          },
          {
            "id": "5cf3b8ef6e5789135f77852b",
            "role_id": "5cf3b8ed6e5789135f778444",
            "permission_id": "5cf3b8ed6e5789135f77845a"
          },
          {
            "id": "5cf3b8ef6e5789135f77852c",
            "role_id": "5cf3b8ed6e5789135f778444",
            "permission_id": "5cf3b8ed6e5789135f77845b"
          },
          {
            "id": "5cf3b8ef6e5789135f77852d",
            "role_id": "5cf3b8ed6e5789135f778444",
            "permission_id": "5cf3b8ed6e5789135f77845c"
          },
          {
            "id": "5cf3b8ef6e5789135f77852e",
            "role_id": "5cf3b8ed6e5789135f778444",
            "permission_id": "5cf3b8ed6e5789135f77845d"
          },
          {
            "id": "5cf3b8ef6e5789135f77852f",
            "role_id": "5cf3b8ed6e5789135f778444",
            "permission_id": "5cf3b8ed6e5789135f778464"
          },
          {
            "id": "5cf3b8ef6e5789135f778530",
            "role_id": "5cf3b8ed6e5789135f778444",
            "permission_id": "5cf3b8ed6e5789135f778465"
          },
          {
            "id": "5cf3b8ef6e5789135f778531",
            "role_id": "5cf3b8ed6e5789135f778444",
            "permission_id": "5cf3b8ed6e5789135f778466"
          },
          {
            "id": "5cf3b8ef6e5789135f778532",
            "role_id": "5cf3b8ed6e5789135f778444",
            "permission_id": "5cf3b8ed6e5789135f778467"
          },
          {
            "id": "5cf3b8ef6e5789135f778533",
            "role_id": "5cf3b8ed6e5789135f778444",
            "permission_id": "5cf3b8ed6e5789135f778468"
          },
          {
            "id": "5cf3b8ef6e5789135f778534",
            "role_id": "5cf3b8ed6e5789135f778444",
            "permission_id": "5cf3b8ed6e5789135f778469"
          },
          {
            "id": "5cf3b8ef6e5789135f778535",
            "role_id": "5cf3b8ed6e5789135f778444",
            "permission_id": "5cf3b8ed6e5789135f77846a"
          },
          {
            "id": "5cf3b8ef6e5789135f778536",
            "role_id": "5cf3b8ed6e5789135f778444",
            "permission_id": "5cf3b8ed6e5789135f77846b"
          },
          {
            "id": "5cf3b8ef6e5789135f778537",
            "role_id": "5cf3b8ed6e5789135f778444",
            "permission_id": "5cf3b8ed6e5789135f77846c"
          },
          {
            "id": "5cf3b8ef6e5789135f778538",
            "role_id": "5cf3b8ed6e5789135f778444",
            "permission_id": "5cf3b8ee6e5789135f77846d"
          },
          {
            "id": "5cf3b8ef6e5789135f778539",
            "role_id": "5cf3b8ed6e5789135f778444",
            "permission_id": "5cf3b8ee6e5789135f77846e"
          },
          {
            "id": "5cf3b8ef6e5789135f77853a",
            "role_id": "5cf3b8ed6e5789135f778444",
            "permission_id": "5cf3b8ee6e5789135f77846f"
          },
          {
            "id": "5cf3b8ef6e5789135f77853b",
            "role_id": "5cf3b8ed6e5789135f778444",
            "permission_id": "5cf3b8ee6e5789135f778473"
          },
          {
            "id": "5cf3b8ef6e5789135f77853c",
            "role_id": "5cf3b8ed6e5789135f778444",
            "permission_id": "5cf3b8ee6e5789135f778475"
          },
          {
            "id": "5cf3b8ef6e5789135f77853d",
            "role_id": "5cf3b8ed6e5789135f778444",
            "permission_id": "5cf3b8ee6e5789135f778476"
          },
          {
            "id": "5cf3b8ef6e5789135f77853e",
            "role_id": "5cf3b8ed6e5789135f778444",
            "permission_id": "5cf3b8ee6e5789135f778477"
          },
          {
            "id": "5cf3b8ef6e5789135f77853f",
            "role_id": "5cf3b8ed6e5789135f778444",
            "permission_id": "5cf3b8ee6e5789135f778478"
          },
          {
            "id": "5cf3b8ef6e5789135f778540",
            "role_id": "5cf3b8ed6e5789135f778444",
            "permission_id": "5cf3b8ee6e5789135f778479"
          },
          {
            "id": "5cf3b8ef6e5789135f778541",
            "role_id": "5cf3b8ed6e5789135f778444",
            "permission_id": "5cf3b8ed6e5789135f77845e"
          },
          {
            "id": "5cf3b8ef6e5789135f778542",
            "role_id": "5cf3b8ed6e5789135f778445",
            "permission_id": "5cf3b8ed6e5789135f778450"
          },
          {
            "id": "5cf3b8ef6e5789135f778543",
            "role_id": "5cf3b8ed6e5789135f778445",
            "permission_id": "5cf3b8ed6e5789135f778451"
          },
          {
            "id": "5cf3b8ef6e5789135f778544",
            "role_id": "5cf3b8ed6e5789135f778445",
            "permission_id": "5cf3b8ed6e5789135f778453"
          },
          {
            "id": "5cf3b8ef6e5789135f778545",
            "role_id": "5cf3b8ed6e5789135f778445",
            "permission_id": "5cf3b8ed6e5789135f778455"
          },
          {
            "id": "5cf3b8ef6e5789135f778546",
            "role_id": "5cf3b8ed6e5789135f778445",
            "permission_id": "5cf3b8ed6e5789135f778456"
          },
          {
            "id": "5cf3b8ef6e5789135f778547",
            "role_id": "5cf3b8ed6e5789135f778445",
            "permission_id": "5cf3b8ed6e5789135f778458"
          },
          {
            "id": "5cf3b8ef6e5789135f778548",
            "role_id": "5cf3b8ed6e5789135f778445",
            "permission_id": "5cf3b8ed6e5789135f778459"
          },
          {
            "id": "5cf3b8ef6e5789135f778549",
            "role_id": "5cf3b8ed6e5789135f778445",
            "permission_id": "5cf3b8ed6e5789135f77845a"
          },
          {
            "id": "5cf3b8ef6e5789135f77854a",
            "role_id": "5cf3b8ed6e5789135f778445",
            "permission_id": "5cf3b8ed6e5789135f77845c"
          },
          {
            "id": "5cf3b8ef6e5789135f77854b",
            "role_id": "5cf3b8ed6e5789135f778445",
            "permission_id": "5cf3b8ed6e5789135f778464"
          },
          {
            "id": "5cf3b8ef6e5789135f77854c",
            "role_id": "5cf3b8ed6e5789135f778445",
            "permission_id": "5cf3b8ed6e5789135f778465"
          },
          {
            "id": "5cf3b8ef6e5789135f77854d",
            "role_id": "5cf3b8ed6e5789135f778445",
            "permission_id": "5cf3b8ed6e5789135f77846a"
          },
          {
            "id": "5cf3b8ef6e5789135f77854e",
            "role_id": "5cf3b8ed6e5789135f778445",
            "permission_id": "5cf3b8ed6e5789135f77846b"
          },
          {
            "id": "5cf3b8ef6e5789135f77854f",
            "role_id": "5cf3b8ed6e5789135f778445",
            "permission_id": "5cf3b8ed6e5789135f77846c"
          },
          {
            "id": "5cf3b8ef6e5789135f778550",
            "role_id": "5cf3b8ed6e5789135f778445",
            "permission_id": "5cf3b8ee6e5789135f77846d"
          },
          {
            "id": "5cf3b8ef6e5789135f778551",
            "role_id": "5cf3b8ed6e5789135f778445",
            "permission_id": "5cf3b8ee6e5789135f77846e"
          },
          {
            "id": "5cf3b8ef6e5789135f778552",
            "role_id": "5cf3b8ed6e5789135f778445",
            "permission_id": "5cf3b8ee6e5789135f77846f"
          },
          {
            "id": "5cf3b8ef6e5789135f778553",
            "role_id": "5cf3b8ed6e5789135f778445",
            "permission_id": "5cf3b8ee6e5789135f778473"
          },
          {
            "id": "5cf3b8ef6e5789135f778554",
            "role_id": "5cf3b8ed6e5789135f778445",
            "permission_id": "5cf3b8ed6e5789135f77845e"
          },
          {
            "id": "5cf3b8ef6e5789135f778555",
            "role_id": "5cf3b8ed6e5789135f778446",
            "permission_id": "5cf3b8ed6e5789135f778450"
          },
          {
            "id": "5cf3b8ef6e5789135f778556",
            "role_id": "5cf3b8ed6e5789135f778446",
            "permission_id": "5cf3b8ed6e5789135f778451"
          },
          {
            "id": "5cf3b8ef6e5789135f778557",
            "role_id": "5cf3b8ed6e5789135f778446",
            "permission_id": "5cf3b8ed6e5789135f778453"
          },
          {
            "id": "5cf3b8ef6e5789135f778558",
            "role_id": "5cf3b8ed6e5789135f778446",
            "permission_id": "5cf3b8ed6e5789135f778455"
          },
          {
            "id": "5cf3b8ef6e5789135f778559",
            "role_id": "5cf3b8ed6e5789135f778446",
            "permission_id": "5cf3b8ed6e5789135f778456"
          },
          {
            "id": "5cf3b8ef6e5789135f77855a",
            "role_id": "5cf3b8ed6e5789135f778446",
            "permission_id": "5cf3b8ed6e5789135f778458"
          },
          {
            "id": "5cf3b8ef6e5789135f77855b",
            "role_id": "5cf3b8ed6e5789135f778446",
            "permission_id": "5cf3b8ed6e5789135f778459"
          },
          {
            "id": "5cf3b8ef6e5789135f77855c",
            "role_id": "5cf3b8ed6e5789135f778446",
            "permission_id": "5cf3b8ed6e5789135f77845a"
          },
          {
            "id": "5cf3b8ef6e5789135f77855d",
            "role_id": "5cf3b8ed6e5789135f778446",
            "permission_id": "5cf3b8ed6e5789135f778464"
          },
          {
            "id": "5cf3b8ef6e5789135f77855e",
            "role_id": "5cf3b8ed6e5789135f778446",
            "permission_id": "5cf3b8ed6e5789135f778465"
          },
          {
            "id": "5cf3b8ef6e5789135f77855f",
            "role_id": "5cf3b8ed6e5789135f778446",
            "permission_id": "5cf3b8ed6e5789135f77846a"
          },
          {
            "id": "5cf3b8ef6e5789135f778560",
            "role_id": "5cf3b8ed6e5789135f778446",
            "permission_id": "5cf3b8ed6e5789135f77846b"
          },
          {
            "id": "5cf3b8ef6e5789135f778561",
            "role_id": "5cf3b8ed6e5789135f778446",
            "permission_id": "5cf3b8ed6e5789135f77846c"
          },
          {
            "id": "5cf3b8ef6e5789135f778562",
            "role_id": "5cf3b8ed6e5789135f778446",
            "permission_id": "5cf3b8ee6e5789135f77846d"
          },
          {
            "id": "5cf3b8ef6e5789135f778563",
            "role_id": "5cf3b8ed6e5789135f778446",
            "permission_id": "5cf3b8ee6e5789135f77846e"
          },
          {
            "id": "5cf3b8ef6e5789135f778564",
            "role_id": "5cf3b8ed6e5789135f778446",
            "permission_id": "5cf3b8ee6e5789135f77846f"
          },
          {
            "id": "5cf3b8ef6e5789135f778565",
            "role_id": "5cf3b8ed6e5789135f778446",
            "permission_id": "5cf3b8ee6e5789135f778473"
          },
          {
            "id": "5cf3b8ef6e5789135f778566",
            "role_id": "5cf3b8ed6e5789135f778446",
            "permission_id": "5cf3b8ed6e5789135f77845e"
          }
        ],
        "permissions_users": [],
        "posts": [
          {
            "id": "5cf3b9b16e5789135f77859e",
            "uuid": "d4b4717f-35bf-4c89-94d6-5f326412ca77",
            "title": "将就一下吧",
            "slug": "jiang-jiu-yi-xia-ba",
            "mobiledoc": "{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"html\",{\"html\":\"在CentOS配置Ghost真是太麻烦了，只好把服务器系统换成Ubuntu\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]]}",
            "html": "<!--kg-card-begin: html-->在CentOS配置Ghost真是太麻烦了，只好把服务器系统换成Ubuntu<!--kg-card-end: html-->",
            "comment_id": "5cd85af46b564747be254063",
            "plaintext": "在CentOS配置Ghost真是太麻烦了，只好把服务器系统换成Ubuntu",
            "feature_image": null,
            "featured": 0,
            "page": 0,
            "status": "published",
            "locale": null,
            "visibility": "public",
            "meta_title": null,
            "meta_description": null,
            "author_id": "1",
            "created_at": "2019-05-12T17:42:12.000Z",
            "updated_at": "2019-05-12T17:44:39.000Z",
            "published_at": "2019-05-12T17:44:39.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "custom_template": null,
            "canonical_url": null
          },
          {
            "id": "5cf3b9b16e5789135f77859f",
            "uuid": "ca9d9f9d-5373-486e-be30-6cfa82b98049",
            "title": "在Ghost的Markdown编辑器中插入公式",
            "slug": "embed-equation",
            "mobiledoc": "{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"可以使用MathJax在网页显示公式，只需要在Ghost后台的Code injection加入\\n ```<script src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/latest.js?config=TeX-MML-AMCHTML' async></script>```\\n就可以在页面加载mathjax.js。\\n如果怕影响其他没有插入公式的页面的载入速度，也可以直接在编辑器中插入上面的代码。\\n但是Ghost的Markdown编辑器不能实时预览，可以借助这个网站：https://www.spaces.ac.cn/latex.html 预览公式。\\n不过好像只有使用$$才能显示公式，用$不行，暂时还不知道怎么解决。\\nmathjax的用法网上的教程写的很详细了，可以参考参考。\\n\\n-----------------------------更新-----------------------------\\n\\n原来要在当前行显示公式要用'\\\\(‘和'\\\\)'，记得转义一下，也可以配置一下MathJax\\n```\\n<script type=\\\"text/x-mathjax-config\\\">\\n    MathJax.Hub.Config({\\n    tex2jax: {inlineMath: [['$','$'], ['\\\\\\\\(','\\\\\\\\)']]}\\n    });\\n</script>\\n```\\n使用以上代码就可以在编辑器中用$插入公式了\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]],[1,\"p\",[]],[1,\"p\",[]],[1,\"p\",[]]]}",
            "html": "<!--kg-card-begin: markdown--><p>可以使用MathJax在网页显示公式，只需要在Ghost后台的Code injection加入<br>\n<code>&lt;script src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/latest.js?config=TeX-MML-AMCHTML' async&gt;&lt;/script&gt;</code><br>\n就可以在页面加载mathjax.js。<br>\n如果怕影响其他没有插入公式的页面的载入速度，也可以直接在编辑器中插入上面的代码。<br>\n但是Ghost的Markdown编辑器不能实时预览，可以借助这个网站：<a href=\"https://www.spaces.ac.cn/latex.html\">https://www.spaces.ac.cn/latex.html</a> 预览公式。<br>\n不过好像只有使用$$才能显示公式，用$不行，暂时还不知道怎么解决。<br>\nmathjax的用法网上的教程写的很详细了，可以参考参考。</p>\n<p>-----------------------------更新-----------------------------</p>\n<p>原来要在当前行显示公式要用'(‘和')'，记得转义一下，也可以配置一下MathJax</p>\n<pre><code>&lt;script type=&quot;text/x-mathjax-config&quot;&gt;\n    MathJax.Hub.Config({\n    tex2jax: {inlineMath: [['$','$'], ['\\\\(','\\\\)']]}\n    });\n&lt;/script&gt;\n</code></pre>\n<p>使用以上代码就可以在编辑器中用$插入公式了</p>\n<!--kg-card-end: markdown--><p></p><p></p><p></p>",
            "comment_id": "5cd93006df61a14e3c7d0a19",
            "plaintext": "可以使用MathJax在网页显示公式，只需要在Ghost后台的Code injection加入\n<script\nsrc='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/latest.js?config=TeX-MML-AMCHTML'\nasync></script>\n就可以在页面加载mathjax.js。\n如果怕影响其他没有插入公式的页面的载入速度，也可以直接在编辑器中插入上面的代码。\n但是Ghost的Markdown编辑器不能实时预览，可以借助这个网站：https://www.spaces.ac.cn/latex.html  预览公式。\n不过好像只有使用$$才能显示公式，用$不行，暂时还不知道怎么解决。\nmathjax的用法网上的教程写的很详细了，可以参考参考。\n\n-----------------------------更新-----------------------------\n\n原来要在当前行显示公式要用'(‘和')'，记得转义一下，也可以配置一下MathJax\n\n<script type=\"text/x-mathjax-config\">\n    MathJax.Hub.Config({\n    tex2jax: {inlineMath: [['$','$'], ['\\\\(','\\\\)']]}\n    });\n</script>\n\n\n使用以上代码就可以在编辑器中用$插入公式了",
            "feature_image": null,
            "featured": 0,
            "page": 0,
            "status": "published",
            "locale": null,
            "visibility": "public",
            "meta_title": null,
            "meta_description": null,
            "author_id": "1",
            "created_at": "2019-05-13T08:51:18.000Z",
            "updated_at": "2019-05-19T01:38:00.000Z",
            "published_at": "2019-05-17T16:54:02.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "custom_template": null,
            "canonical_url": null
          },
          {
            "id": "5cf3b9b16e5789135f7785a0",
            "uuid": "c25ac640-34a4-468c-9ae4-01607e98268e",
            "title": "Archives",
            "slug": "archives",
            "mobiledoc": "{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[],\"sections\":[[1,\"p\",[[0,[],0,\"\"]]]]}",
            "html": null,
            "comment_id": "5cd93f7c5069402a31c053ac",
            "plaintext": null,
            "feature_image": null,
            "featured": 0,
            "page": 1,
            "status": "published",
            "locale": null,
            "visibility": "public",
            "meta_title": null,
            "meta_description": null,
            "author_id": "1",
            "created_at": "2019-05-13T09:57:16.000Z",
            "updated_at": "2019-05-13T09:57:20.000Z",
            "published_at": "2019-05-13T09:57:20.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "custom_template": null,
            "canonical_url": null
          },
          {
            "id": "5cf3b9b16e5789135f7785a1",
            "uuid": "8eb14efd-5839-4b1a-9412-835d6cb913e0",
            "title": "线性代数",
            "slug": "xian-xing-dai-shu",
            "mobiledoc": "{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"html\",{\"html\":\"先占个坑~ 这阵子想把线性代数的内容再好好整理一下，好多内容都是知其然不知其所以然，太惭愧了2333\\n\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]]}",
            "html": "<!--kg-card-begin: html-->先占个坑~ 这阵子想把线性代数的内容再好好整理一下，好多内容都是知其然不知其所以然，太惭愧了2333\n<!--kg-card-end: html-->",
            "comment_id": "5cd959b9f2f7cd51041bc959",
            "plaintext": "先占个坑~ 这阵子想把线性代数的内容再好好整理一下，好多内容都是知其然不知其所以然，太惭愧了2333",
            "feature_image": null,
            "featured": 0,
            "page": 0,
            "status": "published",
            "locale": null,
            "visibility": "public",
            "meta_title": null,
            "meta_description": null,
            "author_id": "1",
            "created_at": "2019-05-13T11:49:13.000Z",
            "updated_at": "2019-05-13T16:10:13.000Z",
            "published_at": "2019-05-13T16:10:13.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "custom_template": null,
            "canonical_url": null
          },
          {
            "id": "5cf3b9b16e5789135f7785a2",
            "uuid": "9d487864-307c-46b3-8a78-55b2cb91ae08",
            "title": "Codeforces 1154F(Round #552 Div3) - Shovels Shop",
            "slug": "codeforces-1154f-round-552-div3-shovels-shop",
            "mobiledoc": "{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"先填个坑~ 上次做div3的时候没有做出来，感觉好像不是一道特别难的题目\\n\\n题目链接：http://codeforces.com/problemset/problem/1154/F\\n\\n题目大意：\\n有n把铲子，记第i把的价格为c<sub>i</sub>。同时给你m个special offers，对于优惠j，用(x<sub>j</sub>, y<sub>j</sub>)表示选择x<sub>j</sub>把铲子购买，其中价格最便宜的y<sub>j</sub>把铲子免费，每个优惠可以被使用任意次数（包括0），但是每次购买只能使用一个优惠或不使用优惠。现在要求你买k把铲子（可以分多次购买），问最小花费。\\n\\n输入：\\n第一行输入三个整数n,m 和 k (1≤n,m≤2⋅10<sup>5</sup>,1≤k≤min(n,2000)) —— 分别表示有n把铲子、m个优惠、需要购买k把铲子。\\n第二行输入n个整数a<sub>1</sub>,a<sub>2</sub>,…,a<sub>n</sub>  (1≤a<sub>i</sub>≤2⋅10<sup>5</sup>)，表示n把铲子的价格。\\n接下来的m行每行输入两个整数x<sub>j</sub>和y<sub>j</sub> (1≤y<sub>j</sub>≤x<sub>j</sub>≤n) 表示第j个优惠。\\n     \\n输出：\\n一个整数，表示购买k把铲子的最小花费。\\n    \\n思路：\\n<del>总体思路是贪心+动态规划，明天再写，困死我了😴</del>\\n首先可以确定在最小花费的情况下，购买的k把铲子一定是n把铲子中价格最便宜的k把，可以这么理解：任意取k把铲子，先按价格排序，假设通过使用优惠，购买其中的第i1,i2,...,im (m <= k)把铲子达到最小花费c，那么对于k把价格最便宜的铲子，通过使用优惠购买其中的第i1,i2,...,im (m <= k)把铲子，花费必定小于等于c。\\n这样问题就变成对于k把铲子，怎么组合使用优惠可以使花费最小。首先明确一个优惠怎么使用是最优的：当免费的价格最大时最优，所以我们可以把k把铲子按价格从高到低排序。用dp[i]表示购买前i把铲子的最小花费，显然dp[i]可以从dp[i - 1]（不使用优惠）或dp[i - offer[j].x]得到（使用优惠j），状态转移方程就不写了。对于每个i枚举所有的优惠，时间复杂度是O(k*m)。\\n\\n代码：\\n```\\n#include <iostream>\\n#include <stdio.h>\\n#include <algorithm>\\n#include <string.h>\\n\\n#define MAXN 200005\\n#define MAXM 200005\\n#define MAXK 2001\\n\\nusing namespace std;\\n\\ntypedef struct {\\n    int x, y;\\n}Offer;\\n\\nint a[MAXN];\\nOffer o[MAXM];\\nlong long dp[MAXN];\\nlong long sum[MAXN];\\n\\nbool cmp(int a, int b)\\n{\\n    return a > b;\\n}\\n\\nint main()\\n{\\n    int n, m, k;\\n    cin>>n>>m>>k;\\n    for(int i = 1; i <= n; i++)\\n        cin>>a[i];\\n    for(int i = 0; i < m; i++)\\n        cin>>o[i].x>>o[i].y;\\n    sort(a + 1, a + 1 + n, cmp);\\n    sum[n - k] = 0;\\n    for(int i = n - k + 1; i <= n; i++)\\n    {\\n        sum[i] = sum[i - 1] + a[i];\\n        dp[i] = sum[i];\\n    }\\n    dp[n - k] = 0;\\n    for(int i = n - k; i <= n; i++)\\n    {\\n        for(int j = 0; j < m; j++)\\n        {\\n            if(i + o[j].x <= n)\\n                dp[i + o[j].x] = min(dp[i + o[j].x], dp[i] + sum[i + o[j].x - o[j].y] - sum[i]);\\n            else\\n                dp[n] = min(dp[n], dp[i] + sum[n] - sum[i]);\\n        }\\n    }\\n    cout<<dp[n]<<endl;\\n    return 0;\\n}\\n\\n```\\n\\n跑了一下1965ms，有点极限……\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]]}",
            "html": "<!--kg-card-begin: markdown--><p>先填个坑~ 上次做div3的时候没有做出来，感觉好像不是一道特别难的题目</p>\n<p>题目链接：<a href=\"http://codeforces.com/problemset/problem/1154/F\">http://codeforces.com/problemset/problem/1154/F</a></p>\n<p>题目大意：<br>\n有n把铲子，记第i把的价格为c<sub>i</sub>。同时给你m个special offers，对于优惠j，用(x<sub>j</sub>, y<sub>j</sub>)表示选择x<sub>j</sub>把铲子购买，其中价格最便宜的y<sub>j</sub>把铲子免费，每个优惠可以被使用任意次数（包括0），但是每次购买只能使用一个优惠或不使用优惠。现在要求你买k把铲子（可以分多次购买），问最小花费。</p>\n<p>输入：<br>\n第一行输入三个整数n,m 和 k (1≤n,m≤2⋅10<sup>5</sup>,1≤k≤min(n,2000)) —— 分别表示有n把铲子、m个优惠、需要购买k把铲子。<br>\n第二行输入n个整数a<sub>1</sub>,a<sub>2</sub>,…,a<sub>n</sub>  (1≤a<sub>i</sub>≤2⋅10<sup>5</sup>)，表示n把铲子的价格。<br>\n接下来的m行每行输入两个整数x<sub>j</sub>和y<sub>j</sub> (1≤y<sub>j</sub>≤x<sub>j</sub>≤n) 表示第j个优惠。</p>\n<p>输出：<br>\n一个整数，表示购买k把铲子的最小花费。</p>\n<p>思路：<br>\n<del>总体思路是贪心+动态规划，明天再写，困死我了😴</del><br>\n首先可以确定在最小花费的情况下，购买的k把铲子一定是n把铲子中价格最便宜的k把，可以这么理解：任意取k把铲子，先按价格排序，假设通过使用优惠，购买其中的第i1,i2,...,im (m &lt;= k)把铲子达到最小花费c，那么对于k把价格最便宜的铲子，通过使用优惠购买其中的第i1,i2,...,im (m &lt;= k)把铲子，花费必定小于等于c。<br>\n这样问题就变成对于k把铲子，怎么组合使用优惠可以使花费最小。首先明确一个优惠怎么使用是最优的：当免费的价格最大时最优，所以我们可以把k把铲子按价格从高到低排序。用dp[i]表示购买前i把铲子的最小花费，显然dp[i]可以从dp[i - 1]（不使用优惠）或dp[i - offer[j].x]得到（使用优惠j），状态转移方程就不写了。对于每个i枚举所有的优惠，时间复杂度是O(k*m)。</p>\n<p>代码：</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;stdio.h&gt;\n#include &lt;algorithm&gt;\n#include &lt;string.h&gt;\n\n#define MAXN 200005\n#define MAXM 200005\n#define MAXK 2001\n\nusing namespace std;\n\ntypedef struct {\n    int x, y;\n}Offer;\n\nint a[MAXN];\nOffer o[MAXM];\nlong long dp[MAXN];\nlong long sum[MAXN];\n\nbool cmp(int a, int b)\n{\n    return a &gt; b;\n}\n\nint main()\n{\n    int n, m, k;\n    cin&gt;&gt;n&gt;&gt;m&gt;&gt;k;\n    for(int i = 1; i &lt;= n; i++)\n        cin&gt;&gt;a[i];\n    for(int i = 0; i &lt; m; i++)\n        cin&gt;&gt;o[i].x&gt;&gt;o[i].y;\n    sort(a + 1, a + 1 + n, cmp);\n    sum[n - k] = 0;\n    for(int i = n - k + 1; i &lt;= n; i++)\n    {\n        sum[i] = sum[i - 1] + a[i];\n        dp[i] = sum[i];\n    }\n    dp[n - k] = 0;\n    for(int i = n - k; i &lt;= n; i++)\n    {\n        for(int j = 0; j &lt; m; j++)\n        {\n            if(i + o[j].x &lt;= n)\n                dp[i + o[j].x] = min(dp[i + o[j].x], dp[i] + sum[i + o[j].x - o[j].y] - sum[i]);\n            else\n                dp[n] = min(dp[n], dp[i] + sum[n] - sum[i]);\n        }\n    }\n    cout&lt;&lt;dp[n]&lt;&lt;endl;\n    return 0;\n}\n\n</code></pre>\n<p>跑了一下1965ms，有点极限……</p>\n<!--kg-card-end: markdown-->",
            "comment_id": "5cd99d86f2f7cd51041bc987",
            "plaintext": "先填个坑~ 上次做div3的时候没有做出来，感觉好像不是一道特别难的题目\n\n题目链接：http://codeforces.com/problemset/problem/1154/F\n\n题目大意：\n有n把铲子，记第i把的价格为ci。同时给你m个special offers，对于优惠j，用(xj, yj)表示选择xj把铲子购买，其中价格最便宜的yj\n把铲子免费，每个优惠可以被使用任意次数（包括0），但是每次购买只能使用一个优惠或不使用优惠。现在要求你买k把铲子（可以分多次购买），问最小花费。\n\n输入：\n第一行输入三个整数n,m 和 k (1≤n,m≤2⋅105,1≤k≤min(n,2000)) —— 分别表示有n把铲子、m个优惠、需要购买k把铲子。\n第二行输入n个整数a1,a2,…,an  (1≤ai≤2⋅105)，表示n把铲子的价格。\n接下来的m行每行输入两个整数xj和yj  (1≤yj≤xj≤n) 表示第j个优惠。\n\n输出：\n一个整数，表示购买k把铲子的最小花费。\n\n思路：\n总体思路是贪心+动态规划，明天再写，困死我了😴\n首先可以确定在最小花费的情况下，购买的k把铲子一定是n把铲子中价格最便宜的k把，可以这么理解：任意取k把铲子，先按价格排序，假设通过使用优惠，购买其中的第i1,i2,...,im\n(m <= k)把铲子达到最小花费c，那么对于k把价格最便宜的铲子，通过使用优惠购买其中的第i1,i2,...,im (m <=\nk)把铲子，花费必定小于等于c。\n这样问题就变成对于k把铲子，怎么组合使用优惠可以使花费最小。首先明确一个优惠怎么使用是最优的：当免费的价格最大时最优，所以我们可以把k把铲子按价格从高到低排序。用dp[i]表示购买前i把铲子的最小花费，显然dp[i]可以从dp[i\n- 1]（不使用优惠）或dp[i - offer[j].x]得到（使用优惠j），状态转移方程就不写了。对于每个i枚举所有的优惠，时间复杂度是O(k*m)。\n\n代码：\n\n#include <iostream>\n#include <stdio.h>\n#include <algorithm>\n#include <string.h>\n\n#define MAXN 200005\n#define MAXM 200005\n#define MAXK 2001\n\nusing namespace std;\n\ntypedef struct {\n    int x, y;\n}Offer;\n\nint a[MAXN];\nOffer o[MAXM];\nlong long dp[MAXN];\nlong long sum[MAXN];\n\nbool cmp(int a, int b)\n{\n    return a > b;\n}\n\nint main()\n{\n    int n, m, k;\n    cin>>n>>m>>k;\n    for(int i = 1; i <= n; i++)\n        cin>>a[i];\n    for(int i = 0; i < m; i++)\n        cin>>o[i].x>>o[i].y;\n    sort(a + 1, a + 1 + n, cmp);\n    sum[n - k] = 0;\n    for(int i = n - k + 1; i <= n; i++)\n    {\n        sum[i] = sum[i - 1] + a[i];\n        dp[i] = sum[i];\n    }\n    dp[n - k] = 0;\n    for(int i = n - k; i <= n; i++)\n    {\n        for(int j = 0; j < m; j++)\n        {\n            if(i + o[j].x <= n)\n                dp[i + o[j].x] = min(dp[i + o[j].x], dp[i] + sum[i + o[j].x - o[j].y] - sum[i]);\n            else\n                dp[n] = min(dp[n], dp[i] + sum[n] - sum[i]);\n        }\n    }\n    cout<<dp[n]<<endl;\n    return 0;\n}\n\n\n\n跑了一下1965ms，有点极限……",
            "feature_image": null,
            "featured": 0,
            "page": 0,
            "status": "published",
            "locale": null,
            "visibility": "public",
            "meta_title": null,
            "meta_description": null,
            "author_id": "1",
            "created_at": "2019-05-13T16:38:30.000Z",
            "updated_at": "2019-05-14T08:36:05.000Z",
            "published_at": "2019-05-13T20:02:18.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "custom_template": null,
            "canonical_url": null
          },
          {
            "id": "5cf3b9b16e5789135f7785a3",
            "uuid": "5fe8f299-f6b8-4141-ad9f-232f5e3c18d6",
            "title": "几道题目。。。",
            "slug": "ji-dao-ti-mu",
            "mobiledoc": "{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"### Codeforces 1153C(Round 551 Div2) Serval and Parenthesis Sequence ###\\n\\n题目链接：http://codeforces.com/problemset/problem/1153/C\\n\\n题目大意：给定一个由'(', ')', '?'组成的字符串s，要求填充'?'为'('或')'使得从s[0]开始的任意长度的前缀不是一个正确的序列（空串和s本身不算前缀），而s是一个正确的序列。\\n\\n思路：要满足任意前缀不是正确的序列，第一个括号要跟最后一个括号匹配，也就是填充'?'使s[1]~s[n-2]是一个正确的序列。记'('对平衡程度的贡献是+1，')'为-1，一个序列只要满足任意前缀的平衡程度始终大于或等于0且序列本身的平衡程度为0，那么这个序列就是正确的。为了满足条件，我们可以使前面的'('尽可能的多。\\n\\n代码比较简单就不贴了~\\n\\n### Codeforces 1151C(Round 553 Div2) Problem for Nazar ###\\n\\n题目链接：http://codeforces.com/problemset/problem/1151/C\\n\\n题目大意：将从1开始的整数按照{1},{2,4},{3,5,7,9},...的顺序排列（第n个序列的长度是2<sup>n</sup>，n从0开始，奇偶奇偶奇偶...）。现在给定l和r(1≤l≤r≤10<sup>18</sup>) ，要求第l个数到第r个数之和，结果对1000000007取余。\\n    \\n思路：简单的数学题，没啥好说的。。。就是代码写起来有点麻烦。规律比较好找，分析一下可以求出$l$到$r$上奇数的个数和偶数的个数，直接用求和公式就行了。\\n    \\n代码：代码写得素质极差就不贴了。。。\\n\\n### Codeforces 1151D(Round 553 Div2) Stas and the Queue at the Buffet ###\\n\\n题目链接：http://codeforces.com/problemset/problem/1151/D\\n\\n题目大意：有n个学生，对于第i个学生有两个属性：a<sub>i</sub>和b<sub>i</sub>。假设第i个学生排在第j个位置，他的不满程度是a<sub>i</sub> * 站在他左边的人数 + b<sub>i</sub> * 站在他右边的人数。现在要求安排每个学生的位置使总的不满程度最低。\\n\\n思路：还是数学题，设第i个学生的位置是p<sub>i</sub>，则总的不满程度：$$s = \\\\sum_{i=0}^{n-1} a_i * p_i + b_i * (n-1-p_j) = \\\\sum_{i=0}^{n-1} (a_i - b_i) * p_i + b_i * (n-1)$$\\ns只跟(a<sub>i</sub> - b<sub>i</sub>) * p<sub>i</sub>相关，所以直接把(a<sub>i</sub> - b<sub>i</sub>)按从大到小的顺序排列就行了。\\n\\n代码：\\n```\\n#include <iostream>\\n#include <stdio.h>\\n#include <algorithm>\\n#include <string.h>\\n#include <math.h>\\n\\n#define MAXN 100005\\n\\nusing namespace std;\\n\\n//long long\\n\\ntypedef struct {\\n    int a, b;\\n    int sub;\\n}S;\\n\\nS s[MAXN];\\n\\nbool cmp(S a, S b)\\n{\\n    return a.sub > b.sub;\\n}\\n\\nint main()\\n{\\n    int n;\\n    cin>>n;\\n    for(int i = 0; i < n; i++)\\n    {\\n        cin>>s[i].a>>s[i].b;\\n        s[i].sub = s[i].a - s[i].b;\\n    }\\n    sort(s, s + n, cmp);\\n    long long ret = 0;\\n    for(int i = 0; i < n; i++)\\n        ret += (long long)s[i].a * i + (long long)s[i].b * (n - i - 1);\\n    cout<<ret<<endl;\\n    return 0;\\n}\\n```\\n\\n### Codeforces 1151E(Round 553 #Div2) Number of Components ###\\n\\n题目链接：http://codeforces.com/problemset/problem/1151/E\\n\\n题目大意：一个无环无向连通图有n个顶点($1\\\\leq{n}\\\\leq10^5$)，第i个顶点与第i+1个顶点相连,每个顶点都有对应的属性值。给定$l$和$r$，用$f(l,r)$表示删去属性值不在$l$到$r$的范围内的顶点后连通块的个数。要求计算$\\\\sum_{l=1}^n\\\\sum_{r=l}^n f(l,r)$的值。\\n\\n<script src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/latest.js?config=TeX-MML-AM_CHTML' async>\\n</script>\\n<script type=\\\"text/x-mathjax-config\\\">\\n    MathJax.Hub.Config({\\n    tex2jax: {inlineMath: [['$','$'], ['\\\\\\\\(','\\\\\\\\)']]}\\n    });\\n</script>\\n\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]]}",
            "html": "<!--kg-card-begin: markdown--><h3 id=\"codeforces1153cround551div2servalandparenthesissequence\">Codeforces 1153C(Round 551 Div2) Serval and Parenthesis Sequence</h3>\n<p>题目链接：<a href=\"http://codeforces.com/problemset/problem/1153/C\">http://codeforces.com/problemset/problem/1153/C</a></p>\n<p>题目大意：给定一个由'(', ')', '?'组成的字符串s，要求填充'?'为'('或')'使得从s[0]开始的任意长度的前缀不是一个正确的序列（空串和s本身不算前缀），而s是一个正确的序列。</p>\n<p>思路：要满足任意前缀不是正确的序列，第一个括号要跟最后一个括号匹配，也就是填充'?'使s[1]~s[n-2]是一个正确的序列。记'('对平衡程度的贡献是+1，')'为-1，一个序列只要满足任意前缀的平衡程度始终大于或等于0且序列本身的平衡程度为0，那么这个序列就是正确的。为了满足条件，我们可以使前面的'('尽可能的多。</p>\n<p>代码比较简单就不贴了~</p>\n<h3 id=\"codeforces1151cround553div2problemfornazar\">Codeforces 1151C(Round 553 Div2) Problem for Nazar</h3>\n<p>题目链接：<a href=\"http://codeforces.com/problemset/problem/1151/C\">http://codeforces.com/problemset/problem/1151/C</a></p>\n<p>题目大意：将从1开始的整数按照{1},{2,4},{3,5,7,9},...的顺序排列（第n个序列的长度是2<sup>n</sup>，n从0开始，奇偶奇偶奇偶...）。现在给定l和r(1≤l≤r≤10<sup>18</sup>) ，要求第l个数到第r个数之和，结果对1000000007取余。</p>\n<p>思路：简单的数学题，没啥好说的。。。就是代码写起来有点麻烦。规律比较好找，分析一下可以求出$l$到$r$上奇数的个数和偶数的个数，直接用求和公式就行了。</p>\n<p>代码：代码写得素质极差就不贴了。。。</p>\n<h3 id=\"codeforces1151dround553div2stasandthequeueatthebuffet\">Codeforces 1151D(Round 553 Div2) Stas and the Queue at the Buffet</h3>\n<p>题目链接：<a href=\"http://codeforces.com/problemset/problem/1151/D\">http://codeforces.com/problemset/problem/1151/D</a></p>\n<p>题目大意：有n个学生，对于第i个学生有两个属性：a<sub>i</sub>和b<sub>i</sub>。假设第i个学生排在第j个位置，他的不满程度是a<sub>i</sub> * 站在他左边的人数 + b<sub>i</sub> * 站在他右边的人数。现在要求安排每个学生的位置使总的不满程度最低。</p>\n<p>思路：还是数学题，设第i个学生的位置是p<sub>i</sub>，则总的不满程度：$$s = \\sum_{i=0}^{n-1} a_i * p_i + b_i * (n-1-p_j) = \\sum_{i=0}^{n-1} (a_i - b_i) * p_i + b_i * (n-1)$$<br>\ns只跟(a<sub>i</sub> - b<sub>i</sub>) * p<sub>i</sub>相关，所以直接把(a<sub>i</sub> - b<sub>i</sub>)按从大到小的顺序排列就行了。</p>\n<p>代码：</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;stdio.h&gt;\n#include &lt;algorithm&gt;\n#include &lt;string.h&gt;\n#include &lt;math.h&gt;\n\n#define MAXN 100005\n\nusing namespace std;\n\n//long long\n\ntypedef struct {\n    int a, b;\n    int sub;\n}S;\n\nS s[MAXN];\n\nbool cmp(S a, S b)\n{\n    return a.sub &gt; b.sub;\n}\n\nint main()\n{\n    int n;\n    cin&gt;&gt;n;\n    for(int i = 0; i &lt; n; i++)\n    {\n        cin&gt;&gt;s[i].a&gt;&gt;s[i].b;\n        s[i].sub = s[i].a - s[i].b;\n    }\n    sort(s, s + n, cmp);\n    long long ret = 0;\n    for(int i = 0; i &lt; n; i++)\n        ret += (long long)s[i].a * i + (long long)s[i].b * (n - i - 1);\n    cout&lt;&lt;ret&lt;&lt;endl;\n    return 0;\n}\n</code></pre>\n<h3 id=\"codeforces1151eround553div2numberofcomponents\">Codeforces 1151E(Round 553 #Div2) Number of Components</h3>\n<p>题目链接：<a href=\"http://codeforces.com/problemset/problem/1151/E\">http://codeforces.com/problemset/problem/1151/E</a></p>\n<p>题目大意：一个无环无向连通图有n个顶点($1\\leq{n}\\leq10^5$)，第i个顶点与第i+1个顶点相连,每个顶点都有对应的属性值。给定$l$和$r$，用$f(l,r)$表示删去属性值不在$l$到$r$的范围内的顶点后连通块的个数。要求计算$\\sum_{l=1}^n\\sum_{r=l}^n f(l,r)$的值。</p>\n<script src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/latest.js?config=TeX-MML-AM_CHTML' async>\n</script>\n<script type=\"text/x-mathjax-config\">\n    MathJax.Hub.Config({\n    tex2jax: {inlineMath: [['$','$'], ['\\\\(','\\\\)']]}\n    });\n</script>\n<!--kg-card-end: markdown-->",
            "comment_id": "5cdea990f2f7cd51041bca17",
            "plaintext": "Codeforces 1153C(Round 551 Div2) Serval and Parenthesis Sequence\n题目链接：http://codeforces.com/problemset/problem/1153/C\n\n题目大意：给定一个由'(', ')',\n'?'组成的字符串s，要求填充'?'为'('或')'使得从s[0]开始的任意长度的前缀不是一个正确的序列（空串和s本身不算前缀），而s是一个正确的序列。\n\n思路：要满足任意前缀不是正确的序列，第一个括号要跟最后一个括号匹配，也就是填充'?'使s[1]~s[n-2]是一个正确的序列。记'('对平衡程度的贡献是+1，')'为-1，一个序列只要满足任意前缀的平衡程度始终大于或等于0且序列本身的平衡程度为0，那么这个序列就是正确的。为了满足条件，我们可以使前面的'('尽可能的多。\n\n代码比较简单就不贴了~\n\nCodeforces 1151C(Round 553 Div2) Problem for Nazar\n题目链接：http://codeforces.com/problemset/problem/1151/C\n\n题目大意：将从1开始的整数按照{1},{2,4},{3,5,7,9},...的顺序排列（第n个序列的长度是2n\n，n从0开始，奇偶奇偶奇偶...）。现在给定l和r(1≤l≤r≤1018) ，要求第l个数到第r个数之和，结果对1000000007取余。\n\n思路：简单的数学题，没啥好说的。。。就是代码写起来有点麻烦。规律比较好找，分析一下可以求出$l$到$r$上奇数的个数和偶数的个数，直接用求和公式就行了。\n\n代码：代码写得素质极差就不贴了。。。\n\nCodeforces 1151D(Round 553 Div2) Stas and the Queue at the Buffet\n题目链接：http://codeforces.com/problemset/problem/1151/D\n\n题目大意：有n个学生，对于第i个学生有两个属性：ai和bi。假设第i个学生排在第j个位置，他的不满程度是ai  * 站在他左边的人数 + bi  *\n站在他右边的人数。现在要求安排每个学生的位置使总的不满程度最低。\n\n思路：还是数学题，设第i个学生的位置是pi，则总的不满程度：$$s = \\sum_{i=0}^{n-1} a_i * p_i + b_i * (n-1-p_j)\n= \\sum_{i=0}^{n-1} (a_i - b_i) * p_i + b_i * (n-1)$$\ns只跟(ai  - bi) * pi相关，所以直接把(ai  - bi)按从大到小的顺序排列就行了。\n\n代码：\n\n#include <iostream>\n#include <stdio.h>\n#include <algorithm>\n#include <string.h>\n#include <math.h>\n\n#define MAXN 100005\n\nusing namespace std;\n\n//long long\n\ntypedef struct {\n    int a, b;\n    int sub;\n}S;\n\nS s[MAXN];\n\nbool cmp(S a, S b)\n{\n    return a.sub > b.sub;\n}\n\nint main()\n{\n    int n;\n    cin>>n;\n    for(int i = 0; i < n; i++)\n    {\n        cin>>s[i].a>>s[i].b;\n        s[i].sub = s[i].a - s[i].b;\n    }\n    sort(s, s + n, cmp);\n    long long ret = 0;\n    for(int i = 0; i < n; i++)\n        ret += (long long)s[i].a * i + (long long)s[i].b * (n - i - 1);\n    cout<<ret<<endl;\n    return 0;\n}\n\n\nCodeforces 1151E(Round 553 #Div2) Number of Components\n题目链接：http://codeforces.com/problemset/problem/1151/E\n\n题目大意：一个无环无向连通图有n个顶点($1\\leq{n}\\leq10^5$)，第i个顶点与第i+1个顶点相连,每个顶点都有对应的属性值。给定$l$和$r$，用$f(l,r)$表示删去属性值不在$l$到$r$的范围内的顶点后连通块的个数。要求计算$\\sum_{l=1}^n\\sum_{r=l}^n\nf(l,r)$的值。",
            "feature_image": null,
            "featured": 0,
            "page": 0,
            "status": "published",
            "locale": null,
            "visibility": "public",
            "meta_title": null,
            "meta_description": null,
            "author_id": "1",
            "created_at": "2019-05-17T12:31:12.000Z",
            "updated_at": "2019-05-19T02:57:52.000Z",
            "published_at": "2019-05-17T12:59:23.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "custom_template": null,
            "canonical_url": null
          },
          {
            "id": "5cf3b9b16e5789135f7785a4",
            "uuid": "1f38ba76-7f3c-4dbd-8e68-dee247108047",
            "title": "Go语言编写Telegram评论机器人",
            "slug": "comment-bot-go",
            "mobiledoc": "{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"----------------------------------------------------\\n2019.06.01更新\\n\\n新增几个命令：\\n/reload 重新加载功能异常的评论区\\n/recover 恢复被误删的评论区\\n/enable 手动开启评论区\\n\\n增加的内容放在dev分支\\n\\n计划更新：\\n黑名单功能\\n评论删除\\n设置非频道订阅者的评论权限\\n\\n----------------------------------------------------\\n\\n----------------------------------------------------\\n2019.05.28更新\\n\\n肝了快4天终于把第一个版本肝完了\\nGithub[项目地址](https://github.com/Just4fan/telegram_comment_bot)\\n\\n----------------------------------------------------\\n\\n前几天有人问我Telegram上的频道评论机器人有没有楼中楼和通知功能，找了一下好像没找到，突然感兴趣自己写一个，看了一下Telegram提供的Bot API，觉得应该是能实现。\\n\\n用Go语言写是因为只带了笔记本回家，笔记本上只装了Go的开发环境，懒得去折腾，就干脆用Go写吧。\\n\\n## （一）申请机器人 ##\\n\\n给 @BotFather 发送 /newbot 指令，按照指示完成机器人创建，创建成功会得到一个token，是调用Telegram API必备的，如果没有保存可以发送 /token 指令重新生成一个token，也可以发送 /revoke 指令撤销token。\\n\\n## （二）环境配置 ##\\n\\n关于Go开发环境的配置不再赘述，网上有很多教程。关于Telegram Bot API，官方提供了使用http(s)协议的API，这里为了方便使用Go语言封装好的API。\\n[API地址](https://github.com/go-telegram-bot-api/telegram-bot-api)\\n[API文档](https://godoc.org/gopkg.in/telegram-bot-api.v4)\\n\\n在项目目录输入\\n```\\ngo get -u github.com/go-telegram-bot-api/telegram-bot-api\\n```\\n或\\n```\\ngo get gopkg.in/telegram-bot-api.v4\\n```\\n\\n## （三）Bot API ##\\n\\n建议在使用前先看看官方的[API文档](https://core.telegram.org/bots/api)。\\n\\n### 1 Keyboards ###\\n\\n我们经常可以在一些频道看到消息下方显示了按钮，这种按钮是通过在消息添加InlineKeyboards实现的，InlineKeyboards的按钮有callback(发送数据给bot)、url(跳转到链接)、switch to inline(在当前会话或选择一个新的会话输入inline query)这三种。\\n\\n### 2 Update ###\\n\\nBot只有在被添加到群组、频道或者私人对话中才能接收消息。一个Update可以看做机器人接收的一个消息，当我们发送消息在群组、频道或发送消息给机器人、点击按钮产生的回调等都是一个Update。\\n\\n### 3 getUpdates ###\\n\\n官方提供两种方式获取更新，一种方式是使用长轮询向Telegram服务器拉取更新(返回一个Update数组)，使用这种方式需要不断的更新offset的值，offset代表获取的Update数组里第一个Update的update_id，如果offset设置不正确会获取到已经获取过的更新，另一种方式是通过设置Webhook指定一个接收Update的服务器，有新的Update时，Telegram服务器会自动将数据用POST的方式发送到指定的服务器，使用这种方式不会接收到已经接收过的更新，并且可以实时接收到更新，前提是指定的服务器需要有公网ip和https，本地开发我们可以借助ngrok把本地地址映射到公网地址上。这里采用第二种方式。\\n\\n## （四）实现 ##\\n\\n### 1 设置Webhook并获取更新 ###\\n\\n设置Bot Token和Webhook\\n\\n```\\ntoken := \\\"你的bot token\\\"\\nbot, err := tgbotapi.NewBotAPI(token)\\nif err != nil {\\n    panic(err)\\n}\\nbot.Debug = true\\n//地址路径加上token可以用于验证消息推送者的身份\\nret, err := bot.SetWebhook(tgbotapi.NewWebhook(\\\"https://公网地址/\\\" + bot.Token))\\nif err != nil {\\n    panic(err)\\n}\\nlog.Println(ret)\\n```\\n\\n接收更新\\n\\n```\\n//返回一个 chan Update\\nupdates := h.bot.ListenForWebhook(\\\"/\\\" + h.bot.Token)\\ngo http.ListenAndServe(\\\"0.0.0.0:80\\\", nil)\\nfor update := range updates {\\n    //处理Update\\n}\\n```\\n\\n### 2 给频道消息加上操作按钮 ###\\n\\n首先判断消息来源是不是频道\\n\\n```\\nif update.ChannelPost != nil {\\n    handleChannelMessage(update.ChannelPost)\\n}\\n```\\n\\n先转发原post，然后编辑转发消息，给转发消息加上键盘。\\n点击按钮时打开机器人对话框，把ChatID和消息的MessageID（ChatID和MessageID共同标识一条消息）作为参数传递给机器人（用Deep-linking实现）。\\n\\n![avatar](https://s2.ax1x.com/2019/05/28/VmbArF.png)\\n\\n点击按钮\\n\\n![avatar](https://s2.ax1x.com/2019/05/28/VmqVQf.png)\\n\\n```\\n\\nconfig := &tgbotapi.MessageConfig{\\n    BaseChat: tgbotapi.BaseChat{\\n        ChatID:              message.Chat.ID,\\n        ReplyToMessageID:    message.MessageID,\\n        DisableNotification: true,\\n    },\\n    Text:      \\\"暂无评论\\\",\\n}\\nmsg, err := h.bot.Send(config)\\n\\n\\nif err == nil {\\n\\n    post := &models.Post{\\n        MessageID: message.MessageID, \\n        ChatID:message.Chat.ID, \\n        AreaID: msg.MessageID,\\n    }\\n    \\n    //生成Deep-linking参数\\n    param, err := utils.EncodeParam(post)\\n    \\n    if err != nil {\\n        log.Println(err)\\n        return\\n    }\\n    \\n    url := \\\"http://t.me/comment_it_bot?start=\\\" + param\\n    \\n    keyboard := utils.NewInlineKeyboardMarkup(\\n        tgbotapi.NewInlineKeyboardRow(\\n            tgbotapi.InlineKeyboardButton{\\n                Text: \\\"查看详情️\\\", \\n                URL: &url,\\n            }))\\n            \\n    _, err = h.bot.Send(tgbotapi.NewEditMessageReplyMarkup(msg.Chat.ID, msg.MessageID, keyboard))\\n    h.commentRepo.InsertPost(post)\\n}\\n```\\n\\n### 3  ###\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]]}",
            "html": "<!--kg-card-begin: markdown--><hr>\n<p>2019.06.01更新</p>\n<p>新增几个命令：<br>\n/reload 重新加载功能异常的评论区<br>\n/recover 恢复被误删的评论区<br>\n/enable 手动开启评论区</p>\n<p>增加的内容放在dev分支</p>\n<p>计划更新：<br>\n黑名单功能<br>\n评论删除<br>\n设置非频道订阅者的评论权限</p>\n<hr>\n<hr>\n<p>2019.05.28更新</p>\n<p>肝了快4天终于把第一个版本肝完了<br>\nGithub<a href=\"https://github.com/Just4fan/telegram_comment_bot\">项目地址</a></p>\n<hr>\n<p>前几天有人问我Telegram上的频道评论机器人有没有楼中楼和通知功能，找了一下好像没找到，突然感兴趣自己写一个，看了一下Telegram提供的Bot API，觉得应该是能实现。</p>\n<p>用Go语言写是因为只带了笔记本回家，笔记本上只装了Go的开发环境，懒得去折腾，就干脆用Go写吧。</p>\n<h2 id=\"\">（一）申请机器人</h2>\n<p>给 @BotFather 发送 /newbot 指令，按照指示完成机器人创建，创建成功会得到一个token，是调用Telegram API必备的，如果没有保存可以发送 /token 指令重新生成一个token，也可以发送 /revoke 指令撤销token。</p>\n<h2 id=\"\">（二）环境配置</h2>\n<p>关于Go开发环境的配置不再赘述，网上有很多教程。关于Telegram Bot API，官方提供了使用http(s)协议的API，这里为了方便使用Go语言封装好的API。<br>\n<a href=\"https://github.com/go-telegram-bot-api/telegram-bot-api\">API地址</a><br>\n<a href=\"https://godoc.org/gopkg.in/telegram-bot-api.v4\">API文档</a></p>\n<p>在项目目录输入</p>\n<pre><code>go get -u github.com/go-telegram-bot-api/telegram-bot-api\n</code></pre>\n<p>或</p>\n<pre><code>go get gopkg.in/telegram-bot-api.v4\n</code></pre>\n<h2 id=\"botapi\">（三）Bot API</h2>\n<p>建议在使用前先看看官方的<a href=\"https://core.telegram.org/bots/api\">API文档</a>。</p>\n<h3 id=\"1keyboards\">1 Keyboards</h3>\n<p>我们经常可以在一些频道看到消息下方显示了按钮，这种按钮是通过在消息添加InlineKeyboards实现的，InlineKeyboards的按钮有callback(发送数据给bot)、url(跳转到链接)、switch to inline(在当前会话或选择一个新的会话输入inline query)这三种。</p>\n<h3 id=\"2update\">2 Update</h3>\n<p>Bot只有在被添加到群组、频道或者私人对话中才能接收消息。一个Update可以看做机器人接收的一个消息，当我们发送消息在群组、频道或发送消息给机器人、点击按钮产生的回调等都是一个Update。</p>\n<h3 id=\"3getupdates\">3 getUpdates</h3>\n<p>官方提供两种方式获取更新，一种方式是使用长轮询向Telegram服务器拉取更新(返回一个Update数组)，使用这种方式需要不断的更新offset的值，offset代表获取的Update数组里第一个Update的update_id，如果offset设置不正确会获取到已经获取过的更新，另一种方式是通过设置Webhook指定一个接收Update的服务器，有新的Update时，Telegram服务器会自动将数据用POST的方式发送到指定的服务器，使用这种方式不会接收到已经接收过的更新，并且可以实时接收到更新，前提是指定的服务器需要有公网ip和https，本地开发我们可以借助ngrok把本地地址映射到公网地址上。这里采用第二种方式。</p>\n<h2 id=\"\">（四）实现</h2>\n<h3 id=\"1webhook\">1 设置Webhook并获取更新</h3>\n<p>设置Bot Token和Webhook</p>\n<pre><code>token := &quot;你的bot token&quot;\nbot, err := tgbotapi.NewBotAPI(token)\nif err != nil {\n    panic(err)\n}\nbot.Debug = true\n//地址路径加上token可以用于验证消息推送者的身份\nret, err := bot.SetWebhook(tgbotapi.NewWebhook(&quot;https://公网地址/&quot; + bot.Token))\nif err != nil {\n    panic(err)\n}\nlog.Println(ret)\n</code></pre>\n<p>接收更新</p>\n<pre><code>//返回一个 chan Update\nupdates := h.bot.ListenForWebhook(&quot;/&quot; + h.bot.Token)\ngo http.ListenAndServe(&quot;0.0.0.0:80&quot;, nil)\nfor update := range updates {\n    //处理Update\n}\n</code></pre>\n<h3 id=\"2\">2 给频道消息加上操作按钮</h3>\n<p>首先判断消息来源是不是频道</p>\n<pre><code>if update.ChannelPost != nil {\n    handleChannelMessage(update.ChannelPost)\n}\n</code></pre>\n<p>先转发原post，然后编辑转发消息，给转发消息加上键盘。<br>\n点击按钮时打开机器人对话框，把ChatID和消息的MessageID（ChatID和MessageID共同标识一条消息）作为参数传递给机器人（用Deep-linking实现）。</p>\n<p><img src=\"https://s2.ax1x.com/2019/05/28/VmbArF.png\" alt=\"avatar\"></p>\n<p>点击按钮</p>\n<p><img src=\"https://s2.ax1x.com/2019/05/28/VmqVQf.png\" alt=\"avatar\"></p>\n<pre><code>\nconfig := &amp;tgbotapi.MessageConfig{\n    BaseChat: tgbotapi.BaseChat{\n        ChatID:              message.Chat.ID,\n        ReplyToMessageID:    message.MessageID,\n        DisableNotification: true,\n    },\n    Text:      &quot;暂无评论&quot;,\n}\nmsg, err := h.bot.Send(config)\n\n\nif err == nil {\n\n    post := &amp;models.Post{\n        MessageID: message.MessageID, \n        ChatID:message.Chat.ID, \n        AreaID: msg.MessageID,\n    }\n    \n    //生成Deep-linking参数\n    param, err := utils.EncodeParam(post)\n    \n    if err != nil {\n        log.Println(err)\n        return\n    }\n    \n    url := &quot;http://t.me/comment_it_bot?start=&quot; + param\n    \n    keyboard := utils.NewInlineKeyboardMarkup(\n        tgbotapi.NewInlineKeyboardRow(\n            tgbotapi.InlineKeyboardButton{\n                Text: &quot;查看详情️&quot;, \n                URL: &amp;url,\n            }))\n            \n    _, err = h.bot.Send(tgbotapi.NewEditMessageReplyMarkup(msg.Chat.ID, msg.MessageID, keyboard))\n    h.commentRepo.InsertPost(post)\n}\n</code></pre>\n<h3 id=\"3\">3</h3>\n<!--kg-card-end: markdown-->",
            "comment_id": "5ce78493f2f7cd51041bcb12",
            "plaintext": "\n--------------------------------------------------------------------------------\n\n2019.06.01更新\n\n新增几个命令：\n/reload 重新加载功能异常的评论区\n/recover 恢复被误删的评论区\n/enable 手动开启评论区\n\n增加的内容放在dev分支\n\n计划更新：\n黑名单功能\n评论删除\n设置非频道订阅者的评论权限\n\n\n--------------------------------------------------------------------------------\n\n\n--------------------------------------------------------------------------------\n\n2019.05.28更新\n\n肝了快4天终于把第一个版本肝完了\nGithub项目地址 [https://github.com/Just4fan/telegram_comment_bot]\n\n\n--------------------------------------------------------------------------------\n\n前几天有人问我Telegram上的频道评论机器人有没有楼中楼和通知功能，找了一下好像没找到，突然感兴趣自己写一个，看了一下Telegram提供的Bot\nAPI，觉得应该是能实现。\n\n用Go语言写是因为只带了笔记本回家，笔记本上只装了Go的开发环境，懒得去折腾，就干脆用Go写吧。\n\n（一）申请机器人\n给 @BotFather 发送 /newbot 指令，按照指示完成机器人创建，创建成功会得到一个token，是调用Telegram\nAPI必备的，如果没有保存可以发送 /token 指令重新生成一个token，也可以发送 /revoke 指令撤销token。\n\n（二）环境配置\n关于Go开发环境的配置不再赘述，网上有很多教程。关于Telegram Bot\nAPI，官方提供了使用http(s)协议的API，这里为了方便使用Go语言封装好的API。\nAPI地址 [https://github.com/go-telegram-bot-api/telegram-bot-api]\nAPI文档 [https://godoc.org/gopkg.in/telegram-bot-api.v4]\n\n在项目目录输入\n\ngo get -u github.com/go-telegram-bot-api/telegram-bot-api\n\n\n或\n\ngo get gopkg.in/telegram-bot-api.v4\n\n\n（三）Bot API\n建议在使用前先看看官方的API文档 [https://core.telegram.org/bots/api]。\n\n1 Keyboards\n我们经常可以在一些频道看到消息下方显示了按钮，这种按钮是通过在消息添加InlineKeyboards实现的，InlineKeyboards的按钮有callback(发送数据给bot)、url(跳转到链接)、switch\nto inline(在当前会话或选择一个新的会话输入inline query)这三种。\n\n2 Update\nBot只有在被添加到群组、频道或者私人对话中才能接收消息。一个Update可以看做机器人接收的一个消息，当我们发送消息在群组、频道或发送消息给机器人、点击按钮产生的回调等都是一个Update。\n\n3 getUpdates\n官方提供两种方式获取更新，一种方式是使用长轮询向Telegram服务器拉取更新(返回一个Update数组)，使用这种方式需要不断的更新offset的值，offset代表获取的Update数组里第一个Update的update_id，如果offset设置不正确会获取到已经获取过的更新，另一种方式是通过设置Webhook指定一个接收Update的服务器，有新的Update时，Telegram服务器会自动将数据用POST的方式发送到指定的服务器，使用这种方式不会接收到已经接收过的更新，并且可以实时接收到更新，前提是指定的服务器需要有公网ip和https，本地开发我们可以借助ngrok把本地地址映射到公网地址上。这里采用第二种方式。\n\n（四）实现\n1 设置Webhook并获取更新\n设置Bot Token和Webhook\n\ntoken := \"你的bot token\"\nbot, err := tgbotapi.NewBotAPI(token)\nif err != nil {\n    panic(err)\n}\nbot.Debug = true\n//地址路径加上token可以用于验证消息推送者的身份\nret, err := bot.SetWebhook(tgbotapi.NewWebhook(\"https://公网地址/\" + bot.Token))\nif err != nil {\n    panic(err)\n}\nlog.Println(ret)\n\n\n接收更新\n\n//返回一个 chan Update\nupdates := h.bot.ListenForWebhook(\"/\" + h.bot.Token)\ngo http.ListenAndServe(\"0.0.0.0:80\", nil)\nfor update := range updates {\n    //处理Update\n}\n\n\n2 给频道消息加上操作按钮\n首先判断消息来源是不是频道\n\nif update.ChannelPost != nil {\n    handleChannelMessage(update.ChannelPost)\n}\n\n\n先转发原post，然后编辑转发消息，给转发消息加上键盘。\n点击按钮时打开机器人对话框，把ChatID和消息的MessageID（ChatID和MessageID共同标识一条消息）作为参数传递给机器人（用Deep-linking实现）。\n\n\n\n点击按钮\n\n\n\n\nconfig := &tgbotapi.MessageConfig{\n    BaseChat: tgbotapi.BaseChat{\n        ChatID:              message.Chat.ID,\n        ReplyToMessageID:    message.MessageID,\n        DisableNotification: true,\n    },\n    Text:      \"暂无评论\",\n}\nmsg, err := h.bot.Send(config)\n\n\nif err == nil {\n\n    post := &models.Post{\n        MessageID: message.MessageID, \n        ChatID:message.Chat.ID, \n        AreaID: msg.MessageID,\n    }\n    \n    //生成Deep-linking参数\n    param, err := utils.EncodeParam(post)\n    \n    if err != nil {\n        log.Println(err)\n        return\n    }\n    \n    url := \"http://t.me/comment_it_bot?start=\" + param\n    \n    keyboard := utils.NewInlineKeyboardMarkup(\n        tgbotapi.NewInlineKeyboardRow(\n            tgbotapi.InlineKeyboardButton{\n                Text: \"查看详情️\", \n                URL: &url,\n            }))\n            \n    _, err = h.bot.Send(tgbotapi.NewEditMessageReplyMarkup(msg.Chat.ID, msg.MessageID, keyboard))\n    h.commentRepo.InsertPost(post)\n}\n\n\n3",
            "feature_image": null,
            "featured": 0,
            "page": 0,
            "status": "published",
            "locale": null,
            "visibility": "public",
            "meta_title": null,
            "meta_description": null,
            "author_id": "1",
            "created_at": "2019-05-24T05:43:47.000Z",
            "updated_at": "2019-06-01T10:43:50.000Z",
            "published_at": "2019-05-25T09:51:15.000Z",
            "custom_excerpt": "前几天有人问我Telegram上的频道评论机器人有没有楼中楼和通知功能，找了一下好像没找到，突然感兴趣自己写一个，看了一下Telegram提供的Bot API，觉得应该是能实现。",
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "custom_template": null,
            "canonical_url": null
          },
          {
            "id": "5cf3b9b16e5789135f7785a5",
            "uuid": "3f3f21e6-f2e3-46e3-a2f2-2e012c3332a6",
            "title": "在Ghost博客增加页面",
            "slug": "add-page-in-ghost",
            "mobiledoc": "{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"最近想在自己博客加个分享页面，根据官方文档的说明，可以在主题中新增一个page-:slug.hbs模板文件，并在后台增加一个静态页面与之匹配（例如我新增了一个page-archives.hbs文件并创建了一个新的页面，url是https://clumsy-go.ink/archives ，则访问这个链接时会根据模板文件渲染）。hbs是用Handlebars编写的，前端接触的比较少，这两天恶补一下文档就开工~\"}]],\"markups\":[],\"sections\":[[10,0]]}",
            "html": "<!--kg-card-begin: markdown--><!--kg-card-begin: markdown--><p>最近想在自己博客加个分享页面，根据官方文档的说明，可以在主题中新增一个page-:slug.hbs模板文件，并在后台增加一个静态页面与之匹配（例如我新增了一个page-archives.hbs文件并创建了一个新的页面，url是https://clumsy-go.ink/archives ，则访问这个链接时会根据模板文件渲染）。hbs是用Handlebars编写的，前端接触的比较少，这两天恶补一下文档就开工~</p>\n<!--kg-card-end: markdown--><!--kg-card-end: markdown-->",
            "comment_id": "5cf174def2f7cd51041bcc76",
            "plaintext": "最近想在自己博客加个分享页面，根据官方文档的说明，可以在主题中新增一个page-:slug.hbs模板文件，并在后台增加一个静态页面与之匹配（例如我新增了一个page-archives.hbs文件并创建了一个新的页面，url是https://clumsy-go.ink/archives\n，则访问这个链接时会根据模板文件渲染）。hbs是用Handlebars编写的，前端接触的比较少，这两天恶补一下文档就开工~",
            "feature_image": null,
            "featured": 0,
            "page": 0,
            "status": "published",
            "locale": null,
            "visibility": "public",
            "meta_title": null,
            "meta_description": null,
            "author_id": "1",
            "created_at": "2019-05-31T18:39:26.000Z",
            "updated_at": "2019-06-01T16:20:33.000Z",
            "published_at": "2019-06-01T16:20:33.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "custom_template": null,
            "canonical_url": null
          },
          {
            "id": "5cf3b9b16e5789135f7785a6",
            "uuid": "fd044807-c9fd-413c-a1dd-a636d33141fd",
            "title": "Status",
            "slug": "status",
            "mobiledoc": "{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"html\",{\"html\":\"<iframe frameborder=\\\"no\\\" border=\\\"0\\\" marginwidth=\\\"0\\\" marginheight=\\\"0\\\" width=330 height=450 src=\\\"//music.163.com/outchain/player?type=0&id=2558097223&auto=1&height=430\\\"></iframe>\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]]}",
            "html": "<!--kg-card-begin: html--><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=450 src=\"//music.163.com/outchain/player?type=0&id=2558097223&auto=1&height=430\"></iframe><!--kg-card-end: html-->",
            "comment_id": "5cf26cc7f2f7cd51041bcc7f",
            "plaintext": null,
            "feature_image": null,
            "featured": 0,
            "page": 1,
            "status": "published",
            "locale": null,
            "visibility": "public",
            "meta_title": null,
            "meta_description": null,
            "author_id": "1",
            "created_at": "2019-06-01T12:17:11.000Z",
            "updated_at": "2019-06-01T12:23:07.000Z",
            "published_at": "2019-06-01T12:20:00.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "custom_template": null,
            "canonical_url": null
          },
          {
            "id": "5cf3b9b16e5789135f7785a7",
            "uuid": "f9570a2b-5430-4e2e-b337-95cf3dc2bfc3",
            "title": "网易云音乐网页API分析",
            "slug": "netease-music-web-api",
            "mobiledoc": "{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"记得很久以前爬过评论的API，请求参数是加密过的，调用过程好像有点复杂，后来直接用PyV8调用javascript加密得到参数，但是加密的过程不是很清楚，刚好想找个理由学一学Python，这次就用纯Python写吧。\\n\\n先随便选一个接口分析一下，就选评论接口吧。\\n\\n### 1.获取评论 ###\\n\\n进入Chrome开发者模式可以看到\\n\\n![avatar](https://s2.ax1x.com/2019/06/02/VGR8Yj.png)\\n![avatar](https://s2.ax1x.com/2019/06/02/VGWc5Q.png)\\n\\n这个就是获取评论的接口，请求方式是POST，请求体有两个参数params和encSecKey，在请求的Initiator可以看到发出请求的代码在core_xxxx.js这个文件，代码肯定经过混淆，先下载到本地格式化一下。在js文件中搜索encSecKey，找到生成参数的相关代码段，可以看到参数由asrsea这个函数生成。\\n\\n```\\nvar bYc0x = window.asrsea(JSON.stringify(i8a), bkY9P([\\\"流泪\\\", \\\"强\\\"]), bkY9P(VM5R.md), bkY9P([\\\"爱心\\\", \\\"女孩\\\", \\\"惊恐\\\", \\\"大笑\\\"]));\\ne8e.data = k8c.cz9q({\\n    params: bYc0x.encText,\\n    encSecKey: bYc0x.encSecKey\\n})\\n```\\n\\n继续在js文件中搜索这个函数，可以看到生成参数的相关函数：\\n\\n```\\nfunction a(a) {\\n    var d, e, b = \\\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\\\",\\n        c = \\\"\\\";\\n    for (d = 0; a > d; d += 1) e = Math.random() * b.length,\\n    e = Math.floor(e),\\n    c += b.charAt(e);\\n    return c\\n}\\n//生成encText，即params\\nfunction b(a, b) {\\n    var c = CryptoJS.enc.Utf8.parse(b),                     //密钥\\n        d = CryptoJS.enc.Utf8.parse(\\\"0102030405060708\\\"),    //初始化向量\\n        e = CryptoJS.enc.Utf8.parse(a),                     //数据\\n        f = CryptoJS.AES.encrypt(e, c, {\\n            iv: d,\\n            mode: CryptoJS.mode.CBC\\n        });\\n    return f.toString()\\n}\\n//生成encSecKey\\nfunction c(a, b, c) {\\n    var d, e;\\n    return setMaxDigits(131),\\n    d = new RSAKeyPair(b, \\\"\\\", c),\\n    e = encryptedString(d, a)\\n}\\n//spider 加密函数\\nfunction d(d, e, f, g) {\\n    var h = {},\\n        i = a(16);  //随机生成一个由a~z,A~Z,0~9组成的长度为a的字符串（AES密钥）\\n    return h.encText = b(d, g),\\n    h.encText = b(h.encText, i),\\n    h.encSecKey = c(i, e, f),\\n    h\\n}\\nfunction e(a, b, d, e) {\\n    var f = {};\\n    return f.encText = c(a + e, b, d),\\n    f\\n}\\nwindow.asrsea = d,\\nwindow.ecnonasr = e\\n```\\n\\nparams的生成过程比较简单，在函数d中可以看到params由两次调用函数b得到：函数b是AES加密的过程，参数a是要加密的数据，参数b是密钥，params经过两次AES加密得到，通过调试可以看到第一次加密：\\n\\n```\\nh.encText = b(d, g)\\n```\\n\\n参数g是固定的：\\n\\n> 0CoJUm6Qyw8W8jud\\n\\n而参数d则是请求参数构成的json字符串，在上面的请求中是：\\n\\n> {\\\"rid\\\":\\\"R_SO_4_1361988914\\\",\\\"offset\\\":\\\"0\\\",\\\"total\\\":\\\"true\\\",\\\"limit\\\":\\\"20\\\",\\\"csrf_token\\\":\\\"\\\"}\\n\\noffset代表获取的第一条评论的偏移量，limit是获取的评论数。\\n\\n第二次加密是使用随机生成的密钥（长度为16）加密第一次加密生成的数据。为了方便测试，在原网页获取随机生成的某密钥以及用这个密钥加密得到的params和encSecKey：\\n\\nkey:\\n\\n> 6lauqIqaJelwkFKM\\n\\nparams:\\n\\n> 1NGJ2rghqo1ToCy5r27rEDqRCNEZxxKk2BvmOQoud6GTNfPZKGRJVFmqfJWeAXYQi4V/++6HKpDjFDfB+TZZ+cmDQF2ywgL9w5Ow8r+mtLG95D7rfUfRkT7GiTn4KMCt+mIM9dtgtIoKXSZ77407F/ZI/GCfslievQ0IfnBAR8SoKQmz8XaQgC1Lxo93VxQ4\\n\\nencSecKey:\\n\\n> 2d1a892a0d7b3101eb00936c4915b2541bc378b58a5ccf6ab3ca939da1fd1fcee7b7456feef0a0d9115c1b5aad8aa64674df8249597e9e74ab66cb5fa84a624f174ed59e786fef748528fff098fa749c11aa06d7d86b7a41d917277efb3f14f8b974ddb2cb5df638ec36d3de8c2f02335cb1990b150a8deafc186c2007dea21c\\n\\n其中AES加密的填充方式是pkcs#7padding，块大小是16 Bytes，加密后的数据默认使用base64编码，根据pkcs#7padding的规则，需要在数据后面添加(16 - n%16)个byte（无论n的长度是否是16的整数倍），且byte的值也为(16 - n%16)。\\n\\n```\\nfrom Crypto.Cipher import AES\\nimport base64\\n\\ndef pkcs7_padding(data):\\n\\tn = 16 - len(data) % 16\\n\\tdata += (chr(n) * n).encode()\\n\\treturn data\\n\\nkey = '0CoJUm6Qyw8W8jud'.encode('utf-8')\\nmode = AES.MODE_CBC\\niv = '0102030405060708'.encode('utf-8')\\n\\naes = AES.new(key, mode, iv)\\n\\ndata = '{\\\"rid\\\":\\\"R_SO_4_1361988914\\\",\\\"offset\\\":\\\"0\\\",\\\"total\\\":\\\"true\\\",\\\"limit\\\":\\\"20\\\",\\\"csrf_token\\\":\\\"\\\"}'.encode('utf-8')\\ndata = pkcs7_padding(data)\\n\\nendata = aes.encrypt(data)\\nendata = base64.b64encode(endata)\\n\\nkey = '6lauqIqaJelwkFKM'.encode('utf-8')\\n\\naes = AES.new(key, mode, iv)\\n\\ndata = pkcs7_padding(endata)\\n\\nendata = aes.encrypt(data)\\nendata = base64.b64encode(endata)\\n\\nprint(endata)\\n```\\n\\n得到的数据与请求中的一致。\\n\\n再分析一下encSecKey的生成过程，在函数d中可以看到encSecKey由函数c生成：函数c将随机生成的密钥（就是上面生成params时AES加密的密钥）经过RSA加密得到encSecKey。\\n关于RSA加密的过程，源代码在这里可以看到:http://www.ohdave.com/rsa\\n\\nRSAKeyPair包括encryptionExponent,decryptionExponent,modulus（分别对应代码中RSAKeyPair函数的三个参数，根据RSA加密的过程：公钥包含两个大整数，n和e，假设要加密的数据是m，则加密后的数据$c ≡ m^e \\\\ (mod \\\\ n)$,这里的e就是encryptionExponent，n就是modulus。\\n\\ne和n两个数应该是固定的（公钥应该不会频繁更换吧），在RSAKeyPair函数打断点得到e和n的值分别是：\\n\\n> 010001\\n\\n和\\n\\n> 00e0b509f6259df8642dbc35662901477df22677ec152b5ff68ace615bb7b725152b3ab17a876aea8a5aa76d2e417629ec4ee341f56135fccf695280104e0312ecbda92557c93870114af6c9d05c4f7f0c3685b7a46bee255932575cce10b424d813cfe4875d3e82047b97ddef52741d546b8e289dc6935b3ece0462db0a22b8e7\\n\\n一开始我尝试直接对数据进行加密：\\n\\n```\\nimport rsa\\nimport binascii\\n\\nrsa_n = int(\\\"00e0b509f6259df8642dbc35662901477df22677ec152b5ff68ace615bb7b725152b3ab17a876aea8a5aa76d2e417629ec4ee341f56135fccf695280104e0312ecbda92557c93870114af6c9d05c4f7f0c3685b7a46bee255932575cce10b424d813cfe4875d3e82047b97ddef52741d546b8e289dc6935b3ece0462db0a22b8e7\\\", 16)\\nrsa_e = int(\\\"010001\\\", 16)\\n\\nkey = rsa.PublicKey(rsa_n, rsa_e)\\ndata = \\\"6lauqIqaJelwkFKM\\\".encode()\\n\\nencrypted_data = rsa.encrypt(data, key)\\nhex_str = binascii.b2a_hex(encrypted_data)\\n\\nprint(hex_str)\\n```\\n\\n尝试请求接口，但是没有返回数据，猜测跟数据转换成的整数有关，回到js代码中加密的代码段看看：\\n\\n```\\nfunction encryptedString(a, b) {\\n    for (var f, g, h, i, j, k, l, c = new Array, d = b.length, e = 0; d > e;) c[e] = b.charCodeAt(e),\\n    e++;\\n    for (; 0 != c.length % a.chunkSize;) c[e++] = 0;\\n    for (f = c.length, g = \\\"\\\", e = 0; f > e; e += a.chunkSize) {\\n        for (j = new BigInt, h = 0, i = e; i < e + a.chunkSize; ++h) {\\n            j.digits[h] = c[i++]\\n            j.digits[h] += c[i++] << 8\\n        }\\n        //j是待加密数据转换后的整数\\n        k = a.barrett.powMod(j, a.e),\\n        l = 16 == a.radix ? biToHex(k) : biToString(k, a.radix),\\n        g += l + \\\" \\\"\\n    }\\n    return g.substring(0, g.length - 1)\\n}\\n```\\n\\n在本地测试输出j的值：\\n\\n```\\nconsole.log(biToHex(j))\\n```\\n\\n对这个值进行加密：\\n\\n```\\nhex_str = '4d4b466b776c654a6171497175616c36'\\nrsa_m = int(hex_str, 16)\\n\\nrsa_c = rsa.core.encrypt_int(rsa_m, rsa_e, rsa_n)\\n\\nprint(hex(rsa_c))\\n```\\n\\n这次得到的数据跟请求中的参数一致（RSA加密生成的数据可能每次都不一样，跟填充方式有关），查阅RSA相关的资料知道算法是在固定长度的块上面进行操作，如果数据长度大于块大小要分割，小于要填充，根据上面的代码，这里的填充方式是直接在后面补'\\\\0'，加密时对每块进行加密，生成的数据之间用空格隔开，至于块大小怎么确定暂时不知道，先不管。\\n为了了解数据是怎么转换成整数的，需要了解BigInt的结构，通过调试可以知道BigInt包含一个数组，观察上面的代码可以知道数据转换成BigInt的过程是把每两个的字符的ascii码值逆序存放到数组的一个元素中，例如字符串：\\\"cd\\\",写成二进制的形式是：\\n\\n> 0110 0011 / 0010 0100\\n\\n放到BigInt中是：\\n\\n> 0010 0100 0110 0011\\n\\n接下来看看BigInt是怎么转换成整数的，找到BigInt转Hex的函数（因为这个函数最简单2333）：\\n\\n```\\nfunction reverseStr(a) {\\n    var c, b = \\\"\\\";\\n    for (c = a.length - 1; c > -1; --c) b += a.charAt(c);\\n    return b\\n}\\nfunction digitToHex(a) {\\n    var b = 15,\\n        c = \\\"\\\";\\n    for (i = 0; 4 > i; ++i) c += hexToChar[a & b],\\n    a >>>= 4;\\n    return reverseStr(c)\\n}\\nfunction biToHex(a) {\\n    var d, b = \\\"\\\";\\n    for (biHighIndex(a), d = biHighIndex(a); d > -1; --d) b += digitToHex(a.digits[d]);\\n    return\\n```\\n\\n这个函数逆序对BigInt的数组元素进行如下操作：从低位开始每4个二进制位转对应的16进制，并逆序输出。\\n所以数据转整数的整个过程其实就是把数据以小端方式存储（跟直接加密的区别就在于大端和小端），例如字符串\\\"cdef\\\"：\\n\\n0110 0011 / 0010 0100 / 0110 0101 / 0110 0110\\n\\n转换成小端：\\n\\n0110 0110 / 0110 0101 / 0010 0100 / 0110 0011\\n\\n转换成16进制就是：\\n\\n0x66656463\\n\\n测试一下：\\n\\n```\\ntable = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f']\\n\\ndata = \\\"6lauqIqaJelwkFKM\\\".encode()\\nhex_str = ''\\n\\nfor i in range(len(data) - 1, -1, -1):\\n\\thex_str += table[(data[i] & 0xf0) >> 4]\\n\\thex_str += table[data[i] & 0xf]\\n\\nrsa_m = int(hex_str, 16)\\n\\nrsa_c = rsa.core.encrypt_int(rsa_m, rsa_e, rsa_n)\\n\\nprint(hex(rsa_c))\\n```\\n\\n这次得到的结果与请求参数的一致，再次发送请求已经可以获取到数据了。\\n\\n![avatar](https://s2.ax1x.com/2019/06/04/VYLrZQ.png)\\n\\n（看了文档才知道白折腾了。。。文档里面有说明是逆序的）\\n![avatar](https://s2.ax1x.com/2019/06/04/VYxdHO.png)\\n\\n经过上面的分析可以大概得出请求的流程：前端先把请求的参数包装成json字符串，使用一个固定的密钥加密得到第一次加密的数据，再使用随机生成的密钥加密第一次加密生成的数据最终得到传递给服务器的参数，接着加密随机生成的密钥传递给服务器。服务器端用私钥解密得到前端随机生成的密钥，再用这个密钥对加密过的参数解密，经过两次解密最终得到参数。\\n\\n关于csrf_token参数，这个是用户登录以后才会有的，之后可能会补充更新一下这部分的接口，另外如果用postman之类的工具请求接口好像直接把参数放在query部分才行，一开始放到post body获取不到数据。\\n\\n最后把获取评论的接口贴一下：\\n\\nurl: https://music.163.com/weapi/v1/resource/comments/ID\\nmethod: POST\\nquery: csrf_token\\nparams: ID(string), offset(int), limit(int), total(boolean), csrf_token(string)\\n\\n当请求歌曲评论时，ID的格式是R_SO_4_ + 歌曲ID。\\n歌单：A_PL_0 + 歌单ID。\\n电台：A_DJ_1 + 电台ID\\n\\n其他类型的评论ID可以在开发者模式下获取相应请求url得到。\\n\\n### 2.获取歌词 ###\\n\\n通过上面的分析已经得到参数加密的方法，所以我们只需要知道请求这个接口都有什么参数就可以了。\\n\\nexample:\\n\\n> {\\\"id\\\":\\\"1361988914\\\",\\\"lv\\\":-1,\\\"tv\\\":-1,\\\"csrf_token\\\":\\\"\\\"}\\n\\nlv,tv这几个参数暂时不知道作用是什么，有兴趣的可以自己研究研究。\\n\\nurl: https://music.163.com/weapi/song/lyric\\nmethod: POST\\nquery: csrf_token\\nparams: ID(int), lv(int), lv(int), csrf_token(string)\\n\\n### 3.获取播放列表 ###\\n\\n在网页打开播放列表得到的列表详情是在后端处理过直接返回给浏览器的，没有暴露接口，但是通过官方提供的iframe插件可以得到一个接口，例如这个歌单：https://music.163.com/outchain/player?type=0&id=2821194580&auto=1&height=430 ，加密方式跟上文一样：\\n\\nexample:\\n\\n>{\\\"id\\\":\\\"2821194580\\\",\\\"ids\\\":\\\"[\\\\\\\"2821194580\\\\\\\"]\\\",\\\"limit\\\":10000,\\\"offset\\\":0,\\\"csrf_token\\\":\\\"\\\"}\\n\\nid参数是必须的，ids参数的作用暂时不知道是什么。但是这个接口目前好像没办法正常使用，limit和offset设置是无效的，一次最多获取1000条歌曲数据，而且也无法获取订阅状态，还需要再研究研究。\\n\\nurl: https://music.163.com/weapi/playlist/detail\\nmethod: POST\\nparams: id(int), ids(array), limit(int), offset(int), csrf_token(string)\\n\\n### 4.搜索 ###\\n\\n#### 4.1 推荐 ####\\n\\nexample：\\n\\n> {\\\"s\\\":\\\"陈奕迅\\\",\\\"limit\\\":\\\"8\\\",\\\"csrf_token\\\":\\\"\\\"}\\n\\nurl: https://music.163.com/weapi/cloudsearch/get/web\\nmethod: POST\\nquery: csrf_token\\nparams: s(string), limit(int), csrf_token(string)\\n\\n#### 4.2 各种搜索 ####\\n\\nexample:\\n\\n> {\\\"hlpretag\\\":\\\"<span class=\\\\\\\"s-fc7\\\\\\\">\\\",\\\"hlposttag\\\":\\\"</span>\\\",\\\"s\\\":\\\"陈奕迅\\\",\\\"type\\\":\\\"1\\\",\\\"offset\\\":\\\"0\\\",\\\"total\\\":\\\"true\\\",\\\"limit\\\":\\\"30\\\",\\\"csrf_token\\\":\\\"\\\"}\\n\\n前面hlpretag和hlposttag暂时不知道作用是什么，可以不加进去，如果要加进去加密的时候记得要把转义符号也当成字符串的一部分，在python中可以在字符串前面加r表示raw string。\\n其中type是搜索的类型：\\n1 歌曲\\n10 专辑\\n100 歌手\\n1000 歌单\\n1002 用户\\n1006 歌词\\n1009 电台\\n1014 视频\\n其他的参数比较明显就不细说了。\\n\\nurl: https://music.163.com/weapi/cloudsearch/get/web\\nmethod: POST\\nquery: csrf_token\\nparams: s(string), type(int), offset(int), total(int), limit(int), csrf_token(string)\\n\\n### 5.用户Token ###\\n\\n先分析怎么通过手机登录获取token。\\n这个稍微复杂点，因为传递给服务器的参数中password是经过加密的，只要找出加密的方法就可以了。首先还是找到跟加密password相关的函数，这个断点多花点时间是可以找出来的。\\n\\n在pt_frame_index.js这个文件里面发现如下代码：\\n\\n```\\nvar i9b = {\\n    countrycode: gX3x.countrycode,\\n    phone:gX3x.mobile,\\n    password:k9b.lB4F(gX3x.password),\\n    rememberLogin:this.RU4Y.checked\\n}\\n```\\n\\n其中lB4F这个函数就是加密password的函数，接着找到：\\n\\n```\\np.lB4F = function(i9b) {\\n    return XC6w(LI2x(xC8u(i9b, !0), i9b.length * nA5F), !0)\\n};\\n```\\n\\n```\\nvar nA5F = 8;\\n\\nvar xC8u = function() {\\n    var GB0x = function(i) {\\n        return i % 32\\n    },\\n    Gx0x = function(i) {\\n        return 32 - nA5F - i % 32\\n    };\\n    return function(cQ2x, Gw0x) {\\n        var Xr6l = [],\\n        lI4M = (1 << nA5F) - 1,\\n        mE5J = Gw0x ? GB0x: Gx0x;\\n        for (var i = 0,\\n        l = cQ2x.length * nA5F; i < l; i += nA5F) Xr6l[i >> 5] |= (cQ2x.charCodeAt(i / nA5F) & lI4M) << mE5J(i);\\n        return Xr6l\\n    }\\n} ();\\n```\\n\\n```\\nvar LI2x = function(x, y) {\\n    x[y >> 5] |= 128 << y % 32;\\n    x[(y + 64 >>> 9 << 4) + 14] = y;\\n    var a = 1732584193,\\n    b = -271733879,\\n    c = -1732584194,\\n    d = 271733878;\\n    for (var i = 0,\\n    l = x.length,\\n    bFW5b, bFX5c, bGc5h, bGd5i; i < l; i += 16) {\\n        bFW5b = a;\\n        bFX5c = b;\\n        bGc5h = c;\\n        bGd5i = d;\\n        a = qb5g(a, b, c, d, x[i + 0], 7, -680876936);\\n        d = qb5g(d, a, b, c, x[i + 1], 12, -389564586);\\n        c = qb5g(c, d, a, b, x[i + 2], 17, 606105819);\\n        b = qb5g(b, c, d, a, x[i + 3], 22, -1044525330);\\n        a = qb5g(a, b, c, d, x[i + 4], 7, -176418897);\\n        d = qb5g(d, a, b, c, x[i + 5], 12, 1200080426);\\n        c = qb5g(c, d, a, b, x[i + 6], 17, -1473231341);\\n        b = qb5g(b, c, d, a, x[i + 7], 22, -45705983);\\n        a = qb5g(a, b, c, d, x[i + 8], 7, 1770035416);\\n        d = qb5g(d, a, b, c, x[i + 9], 12, -1958414417);\\n        c = qb5g(c, d, a, b, x[i + 10], 17, -42063);\\n        b = qb5g(b, c, d, a, x[i + 11], 22, -1990404162);\\n        a = qb5g(a, b, c, d, x[i + 12], 7, 1804603682);\\n        d = qb5g(d, a, b, c, x[i + 13], 12, -40341101);\\n        c = qb5g(c, d, a, b, x[i + 14], 17, -1502002290);\\n        b = qb5g(b, c, d, a, x[i + 15], 22, 1236535329);\\n        a = pT5Y(a, b, c, d, x[i + 1], 5, -165796510);\\n        d = pT5Y(d, a, b, c, x[i + 6], 9, -1069501632);\\n        c = pT5Y(c, d, a, b, x[i + 11], 14, 643717713);\\n        b = pT5Y(b, c, d, a, x[i + 0], 20, -373897302);\\n        a = pT5Y(a, b, c, d, x[i + 5], 5, -701558691);\\n        d = pT5Y(d, a, b, c, x[i + 10], 9, 38016083);\\n        c = pT5Y(c, d, a, b, x[i + 15], 14, -660478335);\\n        b = pT5Y(b, c, d, a, x[i + 4], 20, -405537848);\\n        a = pT5Y(a, b, c, d, x[i + 9], 5, 568446438);\\n        d = pT5Y(d, a, b, c, x[i + 14], 9, -1019803690);\\n        c = pT5Y(c, d, a, b, x[i + 3], 14, -187363961);\\n        b = pT5Y(b, c, d, a, x[i + 8], 20, 1163531501);\\n        a = pT5Y(a, b, c, d, x[i + 13], 5, -1444681467);\\n        d = pT5Y(d, a, b, c, x[i + 2], 9, -51403784);\\n        c = pT5Y(c, d, a, b, x[i + 7], 14, 1735328473);\\n        b = pT5Y(b, c, d, a, x[i + 12], 20, -1926607734);\\n        a = pQ5V(a, b, c, d, x[i + 5], 4, -378558);\\n        d = pQ5V(d, a, b, c, x[i + 8], 11, -2022574463);\\n        c = pQ5V(c, d, a, b, x[i + 11], 16, 1839030562);\\n        b = pQ5V(b, c, d, a, x[i + 14], 23, -35309556);\\n        a = pQ5V(a, b, c, d, x[i + 1], 4, -1530992060);\\n        d = pQ5V(d, a, b, c, x[i + 4], 11, 1272893353);\\n        c = pQ5V(c, d, a, b, x[i + 7], 16, -155497632);\\n        b = pQ5V(b, c, d, a, x[i + 10], 23, -1094730640);\\n        a = pQ5V(a, b, c, d, x[i + 13], 4, 681279174);\\n        d = pQ5V(d, a, b, c, x[i + 0], 11, -358537222);\\n        c = pQ5V(c, d, a, b, x[i + 3], 16, -722521979);\\n        b = pQ5V(b, c, d, a, x[i + 6], 23, 76029189);\\n        a = pQ5V(a, b, c, d, x[i + 9], 4, -640364487);\\n        d = pQ5V(d, a, b, c, x[i + 12], 11, -421815835);\\n        c = pQ5V(c, d, a, b, x[i + 15], 16, 530742520);\\n        b = pQ5V(b, c, d, a, x[i + 2], 23, -995338651);\\n        a = pA5F(a, b, c, d, x[i + 0], 6, -198630844);\\n        d = pA5F(d, a, b, c, x[i + 7], 10, 1126891415);\\n        c = pA5F(c, d, a, b, x[i + 14], 15, -1416354905);\\n        b = pA5F(b, c, d, a, x[i + 5], 21, -57434055);\\n        a = pA5F(a, b, c, d, x[i + 12], 6, 1700485571);\\n        d = pA5F(d, a, b, c, x[i + 3], 10, -1894986606);\\n        c = pA5F(c, d, a, b, x[i + 10], 15, -1051523);\\n        b = pA5F(b, c, d, a, x[i + 1], 21, -2054922799);\\n        a = pA5F(a, b, c, d, x[i + 8], 6, 1873313359);\\n        d = pA5F(d, a, b, c, x[i + 15], 10, -30611744);\\n        c = pA5F(c, d, a, b, x[i + 6], 15, -1560198380);\\n        b = pA5F(b, c, d, a, x[i + 13], 21, 1309151649);\\n        a = pA5F(a, b, c, d, x[i + 4], 6, -145523070);\\n        d = pA5F(d, a, b, c, x[i + 11], 10, -1120210379);\\n        c = pA5F(c, d, a, b, x[i + 2], 15, 718787259);\\n        b = pA5F(b, c, d, a, x[i + 9], 21, -343485551);\\n        a = mG5L(a, bFW5b);\\n        b = mG5L(b, bFX5c);\\n        c = mG5L(c, bGc5h);\\n        d = mG5L(d, bGd5i)\\n    }\\n    return [a, b, c, d]\\n};\\n```\\n\\n```\\nvar mG5L = function(x, y) {\\n    var bFc4g = (x & 65535) + (y & 65535),\\n    cwl5q = (x >> 16) + (y >> 16) + (bFc4g >> 16);\\n    return cwl5q << 16 | bFc4g & 65535\\n};\\nvar bem8e = function(q, a, b, x, s, t) {\\n    return mG5L(beu8m(mG5L(mG5L(a, q), mG5L(x, t)), s), b)\\n};\\nvar qb5g = function(a, b, c, d, x, s, t) {\\n    return bem8e(b & c | ~b & d, a, b, x, s, t)\\n};\\nvar pT5Y = function(a, b, c, d, x, s, t) {\\n    return bem8e(b & d | c & ~d, a, b, x, s, t)\\n};\\nvar pQ5V = function(a, b, c, d, x, s, t) {\\n    return bem8e(b ^ c ^ d, a, b, x, s, t)\\n};\\nvar pA5F = function(a, b, c, d, x, s, t) {\\n    return bem8e(c ^ (b | ~d), a, b, x, s, t)\\n};\\n```\\n\\n```\\nvar XC6w = function() {\\n    var bFG5L = \\\"0123456789abcdef\\\",\\n    GB0x = function(i) {\\n        return i % 4\\n    },\\n    Gx0x = function(i) {\\n        return 3 - i % 4\\n    };\\n    return function(iL3x, Gw0x) {\\n        var bu0x = [],\\n        mE5J = Gw0x ? GB0x: Gx0x;\\n        for (var i = 0,\\n        l = iL3x.length * 4; i < l; i++) {\\n            bu0x.push(bFG5L.charAt(iL3x[i >> 2] >> mE5J(i) * 8 + 4 & 15) + bFG5L.charAt(iL3x[i >> 2] >> mE5J(i) * 8 & 15))\\n        }\\n        return bu0x.join(\\\"\\\")\\n    }\\n} ();\\n```\\n\\n看起来眼花缭乱，但是我们并不需要知道各个函数的作用，直接用python的语法转换一下：\\n\\n\\n\\n<script src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/latest.js?config=TeX-MML-AM_CHTML' async>\\n</script>\\n<script type=\\\"text/x-mathjax-config\\\">\\n    MathJax.Hub.Config({\\n    tex2jax: {inlineMath: [['$','$'], ['\\\\\\\\(','\\\\\\\\)']]}\\n    });\\n</script>\\n\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]]}",
            "html": "<!--kg-card-begin: markdown--><p>记得很久以前爬过评论的API，请求参数是加密过的，调用过程好像有点复杂，后来直接用PyV8调用javascript加密得到参数，但是加密的过程不是很清楚，刚好想找个理由学一学Python，这次就用纯Python写吧。</p>\n<p>先随便选一个接口分析一下，就选评论接口吧。</p>\n<h3 id=\"1\">1.获取评论</h3>\n<p>进入Chrome开发者模式可以看到</p>\n<p><img src=\"https://s2.ax1x.com/2019/06/02/VGR8Yj.png\" alt=\"avatar\"><br>\n<img src=\"https://s2.ax1x.com/2019/06/02/VGWc5Q.png\" alt=\"avatar\"></p>\n<p>这个就是获取评论的接口，请求方式是POST，请求体有两个参数params和encSecKey，在请求的Initiator可以看到发出请求的代码在core_xxxx.js这个文件，代码肯定经过混淆，先下载到本地格式化一下。在js文件中搜索encSecKey，找到生成参数的相关代码段，可以看到参数由asrsea这个函数生成。</p>\n<pre><code>var bYc0x = window.asrsea(JSON.stringify(i8a), bkY9P([&quot;流泪&quot;, &quot;强&quot;]), bkY9P(VM5R.md), bkY9P([&quot;爱心&quot;, &quot;女孩&quot;, &quot;惊恐&quot;, &quot;大笑&quot;]));\ne8e.data = k8c.cz9q({\n    params: bYc0x.encText,\n    encSecKey: bYc0x.encSecKey\n})\n</code></pre>\n<p>继续在js文件中搜索这个函数，可以看到生成参数的相关函数：</p>\n<pre><code>function a(a) {\n    var d, e, b = &quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;,\n        c = &quot;&quot;;\n    for (d = 0; a &gt; d; d += 1) e = Math.random() * b.length,\n    e = Math.floor(e),\n    c += b.charAt(e);\n    return c\n}\n//生成encText，即params\nfunction b(a, b) {\n    var c = CryptoJS.enc.Utf8.parse(b),                     //密钥\n        d = CryptoJS.enc.Utf8.parse(&quot;0102030405060708&quot;),    //初始化向量\n        e = CryptoJS.enc.Utf8.parse(a),                     //数据\n        f = CryptoJS.AES.encrypt(e, c, {\n            iv: d,\n            mode: CryptoJS.mode.CBC\n        });\n    return f.toString()\n}\n//生成encSecKey\nfunction c(a, b, c) {\n    var d, e;\n    return setMaxDigits(131),\n    d = new RSAKeyPair(b, &quot;&quot;, c),\n    e = encryptedString(d, a)\n}\n//spider 加密函数\nfunction d(d, e, f, g) {\n    var h = {},\n        i = a(16);  //随机生成一个由a~z,A~Z,0~9组成的长度为a的字符串（AES密钥）\n    return h.encText = b(d, g),\n    h.encText = b(h.encText, i),\n    h.encSecKey = c(i, e, f),\n    h\n}\nfunction e(a, b, d, e) {\n    var f = {};\n    return f.encText = c(a + e, b, d),\n    f\n}\nwindow.asrsea = d,\nwindow.ecnonasr = e\n</code></pre>\n<p>params的生成过程比较简单，在函数d中可以看到params由两次调用函数b得到：函数b是AES加密的过程，参数a是要加密的数据，参数b是密钥，params经过两次AES加密得到，通过调试可以看到第一次加密：</p>\n<pre><code>h.encText = b(d, g)\n</code></pre>\n<p>参数g是固定的：</p>\n<blockquote>\n<p>0CoJUm6Qyw8W8jud</p>\n</blockquote>\n<p>而参数d则是请求参数构成的json字符串，在上面的请求中是：</p>\n<blockquote>\n<p>{&quot;rid&quot;:&quot;R_SO_4_1361988914&quot;,&quot;offset&quot;:&quot;0&quot;,&quot;total&quot;:&quot;true&quot;,&quot;limit&quot;:&quot;20&quot;,&quot;csrf_token&quot;:&quot;&quot;}</p>\n</blockquote>\n<p>offset代表获取的第一条评论的偏移量，limit是获取的评论数。</p>\n<p>第二次加密是使用随机生成的密钥（长度为16）加密第一次加密生成的数据。为了方便测试，在原网页获取随机生成的某密钥以及用这个密钥加密得到的params和encSecKey：</p>\n<p>key:</p>\n<blockquote>\n<p>6lauqIqaJelwkFKM</p>\n</blockquote>\n<p>params:</p>\n<blockquote>\n<p>1NGJ2rghqo1ToCy5r27rEDqRCNEZxxKk2BvmOQoud6GTNfPZKGRJVFmqfJWeAXYQi4V/++6HKpDjFDfB+TZZ+cmDQF2ywgL9w5Ow8r+mtLG95D7rfUfRkT7GiTn4KMCt+mIM9dtgtIoKXSZ77407F/ZI/GCfslievQ0IfnBAR8SoKQmz8XaQgC1Lxo93VxQ4</p>\n</blockquote>\n<p>encSecKey:</p>\n<blockquote>\n<p>2d1a892a0d7b3101eb00936c4915b2541bc378b58a5ccf6ab3ca939da1fd1fcee7b7456feef0a0d9115c1b5aad8aa64674df8249597e9e74ab66cb5fa84a624f174ed59e786fef748528fff098fa749c11aa06d7d86b7a41d917277efb3f14f8b974ddb2cb5df638ec36d3de8c2f02335cb1990b150a8deafc186c2007dea21c</p>\n</blockquote>\n<p>其中AES加密的填充方式是pkcs#7padding，块大小是16 Bytes，加密后的数据默认使用base64编码，根据pkcs#7padding的规则，需要在数据后面添加(16 - n%16)个byte（无论n的长度是否是16的整数倍），且byte的值也为(16 - n%16)。</p>\n<pre><code>from Crypto.Cipher import AES\nimport base64\n\ndef pkcs7_padding(data):\n\tn = 16 - len(data) % 16\n\tdata += (chr(n) * n).encode()\n\treturn data\n\nkey = '0CoJUm6Qyw8W8jud'.encode('utf-8')\nmode = AES.MODE_CBC\niv = '0102030405060708'.encode('utf-8')\n\naes = AES.new(key, mode, iv)\n\ndata = '{&quot;rid&quot;:&quot;R_SO_4_1361988914&quot;,&quot;offset&quot;:&quot;0&quot;,&quot;total&quot;:&quot;true&quot;,&quot;limit&quot;:&quot;20&quot;,&quot;csrf_token&quot;:&quot;&quot;}'.encode('utf-8')\ndata = pkcs7_padding(data)\n\nendata = aes.encrypt(data)\nendata = base64.b64encode(endata)\n\nkey = '6lauqIqaJelwkFKM'.encode('utf-8')\n\naes = AES.new(key, mode, iv)\n\ndata = pkcs7_padding(endata)\n\nendata = aes.encrypt(data)\nendata = base64.b64encode(endata)\n\nprint(endata)\n</code></pre>\n<p>得到的数据与请求中的一致。</p>\n<p>再分析一下encSecKey的生成过程，在函数d中可以看到encSecKey由函数c生成：函数c将随机生成的密钥（就是上面生成params时AES加密的密钥）经过RSA加密得到encSecKey。<br>\n关于RSA加密的过程，源代码在这里可以看到:<a href=\"http://www.ohdave.com/rsa\">http://www.ohdave.com/rsa</a></p>\n<p>RSAKeyPair包括encryptionExponent,decryptionExponent,modulus（分别对应代码中RSAKeyPair函数的三个参数，根据RSA加密的过程：公钥包含两个大整数，n和e，假设要加密的数据是m，则加密后的数据$c ≡ m^e \\ (mod \\ n)$,这里的e就是encryptionExponent，n就是modulus。</p>\n<p>e和n两个数应该是固定的（公钥应该不会频繁更换吧），在RSAKeyPair函数打断点得到e和n的值分别是：</p>\n<blockquote>\n<p>010001</p>\n</blockquote>\n<p>和</p>\n<blockquote>\n<p>00e0b509f6259df8642dbc35662901477df22677ec152b5ff68ace615bb7b725152b3ab17a876aea8a5aa76d2e417629ec4ee341f56135fccf695280104e0312ecbda92557c93870114af6c9d05c4f7f0c3685b7a46bee255932575cce10b424d813cfe4875d3e82047b97ddef52741d546b8e289dc6935b3ece0462db0a22b8e7</p>\n</blockquote>\n<p>一开始我尝试直接对数据进行加密：</p>\n<pre><code>import rsa\nimport binascii\n\nrsa_n = int(&quot;00e0b509f6259df8642dbc35662901477df22677ec152b5ff68ace615bb7b725152b3ab17a876aea8a5aa76d2e417629ec4ee341f56135fccf695280104e0312ecbda92557c93870114af6c9d05c4f7f0c3685b7a46bee255932575cce10b424d813cfe4875d3e82047b97ddef52741d546b8e289dc6935b3ece0462db0a22b8e7&quot;, 16)\nrsa_e = int(&quot;010001&quot;, 16)\n\nkey = rsa.PublicKey(rsa_n, rsa_e)\ndata = &quot;6lauqIqaJelwkFKM&quot;.encode()\n\nencrypted_data = rsa.encrypt(data, key)\nhex_str = binascii.b2a_hex(encrypted_data)\n\nprint(hex_str)\n</code></pre>\n<p>尝试请求接口，但是没有返回数据，猜测跟数据转换成的整数有关，回到js代码中加密的代码段看看：</p>\n<pre><code>function encryptedString(a, b) {\n    for (var f, g, h, i, j, k, l, c = new Array, d = b.length, e = 0; d &gt; e;) c[e] = b.charCodeAt(e),\n    e++;\n    for (; 0 != c.length % a.chunkSize;) c[e++] = 0;\n    for (f = c.length, g = &quot;&quot;, e = 0; f &gt; e; e += a.chunkSize) {\n        for (j = new BigInt, h = 0, i = e; i &lt; e + a.chunkSize; ++h) {\n            j.digits[h] = c[i++]\n            j.digits[h] += c[i++] &lt;&lt; 8\n        }\n        //j是待加密数据转换后的整数\n        k = a.barrett.powMod(j, a.e),\n        l = 16 == a.radix ? biToHex(k) : biToString(k, a.radix),\n        g += l + &quot; &quot;\n    }\n    return g.substring(0, g.length - 1)\n}\n</code></pre>\n<p>在本地测试输出j的值：</p>\n<pre><code>console.log(biToHex(j))\n</code></pre>\n<p>对这个值进行加密：</p>\n<pre><code>hex_str = '4d4b466b776c654a6171497175616c36'\nrsa_m = int(hex_str, 16)\n\nrsa_c = rsa.core.encrypt_int(rsa_m, rsa_e, rsa_n)\n\nprint(hex(rsa_c))\n</code></pre>\n<p>这次得到的数据跟请求中的参数一致（RSA加密生成的数据可能每次都不一样，跟填充方式有关），查阅RSA相关的资料知道算法是在固定长度的块上面进行操作，如果数据长度大于块大小要分割，小于要填充，根据上面的代码，这里的填充方式是直接在后面补'\\0'，加密时对每块进行加密，生成的数据之间用空格隔开，至于块大小怎么确定暂时不知道，先不管。<br>\n为了了解数据是怎么转换成整数的，需要了解BigInt的结构，通过调试可以知道BigInt包含一个数组，观察上面的代码可以知道数据转换成BigInt的过程是把每两个的字符的ascii码值逆序存放到数组的一个元素中，例如字符串：&quot;cd&quot;,写成二进制的形式是：</p>\n<blockquote>\n<p>0110 0011 / 0010 0100</p>\n</blockquote>\n<p>放到BigInt中是：</p>\n<blockquote>\n<p>0010 0100 0110 0011</p>\n</blockquote>\n<p>接下来看看BigInt是怎么转换成整数的，找到BigInt转Hex的函数（因为这个函数最简单2333）：</p>\n<pre><code>function reverseStr(a) {\n    var c, b = &quot;&quot;;\n    for (c = a.length - 1; c &gt; -1; --c) b += a.charAt(c);\n    return b\n}\nfunction digitToHex(a) {\n    var b = 15,\n        c = &quot;&quot;;\n    for (i = 0; 4 &gt; i; ++i) c += hexToChar[a &amp; b],\n    a &gt;&gt;&gt;= 4;\n    return reverseStr(c)\n}\nfunction biToHex(a) {\n    var d, b = &quot;&quot;;\n    for (biHighIndex(a), d = biHighIndex(a); d &gt; -1; --d) b += digitToHex(a.digits[d]);\n    return\n</code></pre>\n<p>这个函数逆序对BigInt的数组元素进行如下操作：从低位开始每4个二进制位转对应的16进制，并逆序输出。<br>\n所以数据转整数的整个过程其实就是把数据以小端方式存储（跟直接加密的区别就在于大端和小端），例如字符串&quot;cdef&quot;：</p>\n<p>0110 0011 / 0010 0100 / 0110 0101 / 0110 0110</p>\n<p>转换成小端：</p>\n<p>0110 0110 / 0110 0101 / 0010 0100 / 0110 0011</p>\n<p>转换成16进制就是：</p>\n<p>0x66656463</p>\n<p>测试一下：</p>\n<pre><code>table = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f']\n\ndata = &quot;6lauqIqaJelwkFKM&quot;.encode()\nhex_str = ''\n\nfor i in range(len(data) - 1, -1, -1):\n\thex_str += table[(data[i] &amp; 0xf0) &gt;&gt; 4]\n\thex_str += table[data[i] &amp; 0xf]\n\nrsa_m = int(hex_str, 16)\n\nrsa_c = rsa.core.encrypt_int(rsa_m, rsa_e, rsa_n)\n\nprint(hex(rsa_c))\n</code></pre>\n<p>这次得到的结果与请求参数的一致，再次发送请求已经可以获取到数据了。</p>\n<p><img src=\"https://s2.ax1x.com/2019/06/04/VYLrZQ.png\" alt=\"avatar\"></p>\n<p>（看了文档才知道白折腾了。。。文档里面有说明是逆序的）<br>\n<img src=\"https://s2.ax1x.com/2019/06/04/VYxdHO.png\" alt=\"avatar\"></p>\n<p>经过上面的分析可以大概得出请求的流程：前端先把请求的参数包装成json字符串，使用一个固定的密钥加密得到第一次加密的数据，再使用随机生成的密钥加密第一次加密生成的数据最终得到传递给服务器的参数，接着加密随机生成的密钥传递给服务器。服务器端用私钥解密得到前端随机生成的密钥，再用这个密钥对加密过的参数解密，经过两次解密最终得到参数。</p>\n<p>关于csrf_token参数，这个是用户登录以后才会有的，之后可能会补充更新一下这部分的接口，另外如果用postman之类的工具请求接口好像直接把参数放在query部分才行，一开始放到post body获取不到数据。</p>\n<p>最后把获取评论的接口贴一下：</p>\n<p>url: <a href=\"https://music.163.com/weapi/v1/resource/comments/ID\">https://music.163.com/weapi/v1/resource/comments/ID</a><br>\nmethod: POST<br>\nquery: csrf_token<br>\nparams: ID(string), offset(int), limit(int), total(boolean), csrf_token(string)</p>\n<p>当请求歌曲评论时，ID的格式是R_SO_4_ + 歌曲ID。<br>\n歌单：A_PL_0 + 歌单ID。<br>\n电台：A_DJ_1 + 电台ID</p>\n<p>其他类型的评论ID可以在开发者模式下获取相应请求url得到。</p>\n<h3 id=\"2\">2.获取歌词</h3>\n<p>通过上面的分析已经得到参数加密的方法，所以我们只需要知道请求这个接口都有什么参数就可以了。</p>\n<p>example:</p>\n<blockquote>\n<p>{&quot;id&quot;:&quot;1361988914&quot;,&quot;lv&quot;:-1,&quot;tv&quot;:-1,&quot;csrf_token&quot;:&quot;&quot;}</p>\n</blockquote>\n<p>lv,tv这几个参数暂时不知道作用是什么，有兴趣的可以自己研究研究。</p>\n<p>url: <a href=\"https://music.163.com/weapi/song/lyric\">https://music.163.com/weapi/song/lyric</a><br>\nmethod: POST<br>\nquery: csrf_token<br>\nparams: ID(int), lv(int), lv(int), csrf_token(string)</p>\n<h3 id=\"3\">3.获取播放列表</h3>\n<p>在网页打开播放列表得到的列表详情是在后端处理过直接返回给浏览器的，没有暴露接口，但是通过官方提供的iframe插件可以得到一个接口，例如这个歌单：<a href=\"https://music.163.com/outchain/player?type=0&amp;id=2821194580&amp;auto=1&amp;height=430\">https://music.163.com/outchain/player?type=0&amp;id=2821194580&amp;auto=1&amp;height=430</a> ，加密方式跟上文一样：</p>\n<p>example:</p>\n<blockquote>\n<p>{&quot;id&quot;:&quot;2821194580&quot;,&quot;ids&quot;:&quot;[&quot;2821194580&quot;]&quot;,&quot;limit&quot;:10000,&quot;offset&quot;:0,&quot;csrf_token&quot;:&quot;&quot;}</p>\n</blockquote>\n<p>id参数是必须的，ids参数的作用暂时不知道是什么。但是这个接口目前好像没办法正常使用，limit和offset设置是无效的，一次最多获取1000条歌曲数据，而且也无法获取订阅状态，还需要再研究研究。</p>\n<p>url: <a href=\"https://music.163.com/weapi/playlist/detail\">https://music.163.com/weapi/playlist/detail</a><br>\nmethod: POST<br>\nparams: id(int), ids(array), limit(int), offset(int), csrf_token(string)</p>\n<h3 id=\"4\">4.搜索</h3>\n<h4 id=\"41\">4.1 推荐</h4>\n<p>example：</p>\n<blockquote>\n<p>{&quot;s&quot;:&quot;陈奕迅&quot;,&quot;limit&quot;:&quot;8&quot;,&quot;csrf_token&quot;:&quot;&quot;}</p>\n</blockquote>\n<p>url: <a href=\"https://music.163.com/weapi/cloudsearch/get/web\">https://music.163.com/weapi/cloudsearch/get/web</a><br>\nmethod: POST<br>\nquery: csrf_token<br>\nparams: s(string), limit(int), csrf_token(string)</p>\n<h4 id=\"42\">4.2 各种搜索</h4>\n<p>example:</p>\n<blockquote>\n<p>{&quot;hlpretag&quot;:&quot;&lt;span class=&quot;s-fc7&quot;&gt;&quot;,&quot;hlposttag&quot;:&quot;</span>&quot;,&quot;s&quot;:&quot;陈奕迅&quot;,&quot;type&quot;:&quot;1&quot;,&quot;offset&quot;:&quot;0&quot;,&quot;total&quot;:&quot;true&quot;,&quot;limit&quot;:&quot;30&quot;,&quot;csrf_token&quot;:&quot;&quot;}</p>\n</blockquote>\n<p>前面hlpretag和hlposttag暂时不知道作用是什么，可以不加进去，如果要加进去加密的时候记得要把转义符号也当成字符串的一部分，在python中可以在字符串前面加r表示raw string。<br>\n其中type是搜索的类型：<br>\n1 歌曲<br>\n10 专辑<br>\n100 歌手<br>\n1000 歌单<br>\n1002 用户<br>\n1006 歌词<br>\n1009 电台<br>\n1014 视频<br>\n其他的参数比较明显就不细说了。</p>\n<p>url: <a href=\"https://music.163.com/weapi/cloudsearch/get/web\">https://music.163.com/weapi/cloudsearch/get/web</a><br>\nmethod: POST<br>\nquery: csrf_token<br>\nparams: s(string), type(int), offset(int), total(int), limit(int), csrf_token(string)</p>\n<h3 id=\"5token\">5.用户Token</h3>\n<p>先分析怎么通过手机登录获取token。<br>\n这个稍微复杂点，因为传递给服务器的参数中password是经过加密的，只要找出加密的方法就可以了。首先还是找到跟加密password相关的函数，这个断点多花点时间是可以找出来的。</p>\n<p>在pt_frame_index.js这个文件里面发现如下代码：</p>\n<pre><code>var i9b = {\n    countrycode: gX3x.countrycode,\n    phone:gX3x.mobile,\n    password:k9b.lB4F(gX3x.password),\n    rememberLogin:this.RU4Y.checked\n}\n</code></pre>\n<p>其中lB4F这个函数就是加密password的函数，接着找到：</p>\n<pre><code>p.lB4F = function(i9b) {\n    return XC6w(LI2x(xC8u(i9b, !0), i9b.length * nA5F), !0)\n};\n</code></pre>\n<pre><code>var nA5F = 8;\n\nvar xC8u = function() {\n    var GB0x = function(i) {\n        return i % 32\n    },\n    Gx0x = function(i) {\n        return 32 - nA5F - i % 32\n    };\n    return function(cQ2x, Gw0x) {\n        var Xr6l = [],\n        lI4M = (1 &lt;&lt; nA5F) - 1,\n        mE5J = Gw0x ? GB0x: Gx0x;\n        for (var i = 0,\n        l = cQ2x.length * nA5F; i &lt; l; i += nA5F) Xr6l[i &gt;&gt; 5] |= (cQ2x.charCodeAt(i / nA5F) &amp; lI4M) &lt;&lt; mE5J(i);\n        return Xr6l\n    }\n} ();\n</code></pre>\n<pre><code>var LI2x = function(x, y) {\n    x[y &gt;&gt; 5] |= 128 &lt;&lt; y % 32;\n    x[(y + 64 &gt;&gt;&gt; 9 &lt;&lt; 4) + 14] = y;\n    var a = 1732584193,\n    b = -271733879,\n    c = -1732584194,\n    d = 271733878;\n    for (var i = 0,\n    l = x.length,\n    bFW5b, bFX5c, bGc5h, bGd5i; i &lt; l; i += 16) {\n        bFW5b = a;\n        bFX5c = b;\n        bGc5h = c;\n        bGd5i = d;\n        a = qb5g(a, b, c, d, x[i + 0], 7, -680876936);\n        d = qb5g(d, a, b, c, x[i + 1], 12, -389564586);\n        c = qb5g(c, d, a, b, x[i + 2], 17, 606105819);\n        b = qb5g(b, c, d, a, x[i + 3], 22, -1044525330);\n        a = qb5g(a, b, c, d, x[i + 4], 7, -176418897);\n        d = qb5g(d, a, b, c, x[i + 5], 12, 1200080426);\n        c = qb5g(c, d, a, b, x[i + 6], 17, -1473231341);\n        b = qb5g(b, c, d, a, x[i + 7], 22, -45705983);\n        a = qb5g(a, b, c, d, x[i + 8], 7, 1770035416);\n        d = qb5g(d, a, b, c, x[i + 9], 12, -1958414417);\n        c = qb5g(c, d, a, b, x[i + 10], 17, -42063);\n        b = qb5g(b, c, d, a, x[i + 11], 22, -1990404162);\n        a = qb5g(a, b, c, d, x[i + 12], 7, 1804603682);\n        d = qb5g(d, a, b, c, x[i + 13], 12, -40341101);\n        c = qb5g(c, d, a, b, x[i + 14], 17, -1502002290);\n        b = qb5g(b, c, d, a, x[i + 15], 22, 1236535329);\n        a = pT5Y(a, b, c, d, x[i + 1], 5, -165796510);\n        d = pT5Y(d, a, b, c, x[i + 6], 9, -1069501632);\n        c = pT5Y(c, d, a, b, x[i + 11], 14, 643717713);\n        b = pT5Y(b, c, d, a, x[i + 0], 20, -373897302);\n        a = pT5Y(a, b, c, d, x[i + 5], 5, -701558691);\n        d = pT5Y(d, a, b, c, x[i + 10], 9, 38016083);\n        c = pT5Y(c, d, a, b, x[i + 15], 14, -660478335);\n        b = pT5Y(b, c, d, a, x[i + 4], 20, -405537848);\n        a = pT5Y(a, b, c, d, x[i + 9], 5, 568446438);\n        d = pT5Y(d, a, b, c, x[i + 14], 9, -1019803690);\n        c = pT5Y(c, d, a, b, x[i + 3], 14, -187363961);\n        b = pT5Y(b, c, d, a, x[i + 8], 20, 1163531501);\n        a = pT5Y(a, b, c, d, x[i + 13], 5, -1444681467);\n        d = pT5Y(d, a, b, c, x[i + 2], 9, -51403784);\n        c = pT5Y(c, d, a, b, x[i + 7], 14, 1735328473);\n        b = pT5Y(b, c, d, a, x[i + 12], 20, -1926607734);\n        a = pQ5V(a, b, c, d, x[i + 5], 4, -378558);\n        d = pQ5V(d, a, b, c, x[i + 8], 11, -2022574463);\n        c = pQ5V(c, d, a, b, x[i + 11], 16, 1839030562);\n        b = pQ5V(b, c, d, a, x[i + 14], 23, -35309556);\n        a = pQ5V(a, b, c, d, x[i + 1], 4, -1530992060);\n        d = pQ5V(d, a, b, c, x[i + 4], 11, 1272893353);\n        c = pQ5V(c, d, a, b, x[i + 7], 16, -155497632);\n        b = pQ5V(b, c, d, a, x[i + 10], 23, -1094730640);\n        a = pQ5V(a, b, c, d, x[i + 13], 4, 681279174);\n        d = pQ5V(d, a, b, c, x[i + 0], 11, -358537222);\n        c = pQ5V(c, d, a, b, x[i + 3], 16, -722521979);\n        b = pQ5V(b, c, d, a, x[i + 6], 23, 76029189);\n        a = pQ5V(a, b, c, d, x[i + 9], 4, -640364487);\n        d = pQ5V(d, a, b, c, x[i + 12], 11, -421815835);\n        c = pQ5V(c, d, a, b, x[i + 15], 16, 530742520);\n        b = pQ5V(b, c, d, a, x[i + 2], 23, -995338651);\n        a = pA5F(a, b, c, d, x[i + 0], 6, -198630844);\n        d = pA5F(d, a, b, c, x[i + 7], 10, 1126891415);\n        c = pA5F(c, d, a, b, x[i + 14], 15, -1416354905);\n        b = pA5F(b, c, d, a, x[i + 5], 21, -57434055);\n        a = pA5F(a, b, c, d, x[i + 12], 6, 1700485571);\n        d = pA5F(d, a, b, c, x[i + 3], 10, -1894986606);\n        c = pA5F(c, d, a, b, x[i + 10], 15, -1051523);\n        b = pA5F(b, c, d, a, x[i + 1], 21, -2054922799);\n        a = pA5F(a, b, c, d, x[i + 8], 6, 1873313359);\n        d = pA5F(d, a, b, c, x[i + 15], 10, -30611744);\n        c = pA5F(c, d, a, b, x[i + 6], 15, -1560198380);\n        b = pA5F(b, c, d, a, x[i + 13], 21, 1309151649);\n        a = pA5F(a, b, c, d, x[i + 4], 6, -145523070);\n        d = pA5F(d, a, b, c, x[i + 11], 10, -1120210379);\n        c = pA5F(c, d, a, b, x[i + 2], 15, 718787259);\n        b = pA5F(b, c, d, a, x[i + 9], 21, -343485551);\n        a = mG5L(a, bFW5b);\n        b = mG5L(b, bFX5c);\n        c = mG5L(c, bGc5h);\n        d = mG5L(d, bGd5i)\n    }\n    return [a, b, c, d]\n};\n</code></pre>\n<pre><code>var mG5L = function(x, y) {\n    var bFc4g = (x &amp; 65535) + (y &amp; 65535),\n    cwl5q = (x &gt;&gt; 16) + (y &gt;&gt; 16) + (bFc4g &gt;&gt; 16);\n    return cwl5q &lt;&lt; 16 | bFc4g &amp; 65535\n};\nvar bem8e = function(q, a, b, x, s, t) {\n    return mG5L(beu8m(mG5L(mG5L(a, q), mG5L(x, t)), s), b)\n};\nvar qb5g = function(a, b, c, d, x, s, t) {\n    return bem8e(b &amp; c | ~b &amp; d, a, b, x, s, t)\n};\nvar pT5Y = function(a, b, c, d, x, s, t) {\n    return bem8e(b &amp; d | c &amp; ~d, a, b, x, s, t)\n};\nvar pQ5V = function(a, b, c, d, x, s, t) {\n    return bem8e(b ^ c ^ d, a, b, x, s, t)\n};\nvar pA5F = function(a, b, c, d, x, s, t) {\n    return bem8e(c ^ (b | ~d), a, b, x, s, t)\n};\n</code></pre>\n<pre><code>var XC6w = function() {\n    var bFG5L = &quot;0123456789abcdef&quot;,\n    GB0x = function(i) {\n        return i % 4\n    },\n    Gx0x = function(i) {\n        return 3 - i % 4\n    };\n    return function(iL3x, Gw0x) {\n        var bu0x = [],\n        mE5J = Gw0x ? GB0x: Gx0x;\n        for (var i = 0,\n        l = iL3x.length * 4; i &lt; l; i++) {\n            bu0x.push(bFG5L.charAt(iL3x[i &gt;&gt; 2] &gt;&gt; mE5J(i) * 8 + 4 &amp; 15) + bFG5L.charAt(iL3x[i &gt;&gt; 2] &gt;&gt; mE5J(i) * 8 &amp; 15))\n        }\n        return bu0x.join(&quot;&quot;)\n    }\n} ();\n</code></pre>\n<p>看起来眼花缭乱，但是我们并不需要知道各个函数的作用，直接用python的语法转换一下：</p>\n<script src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/latest.js?config=TeX-MML-AM_CHTML' async>\n</script>\n<script type=\"text/x-mathjax-config\">\n    MathJax.Hub.Config({\n    tex2jax: {inlineMath: [['$','$'], ['\\\\(','\\\\)']]}\n    });\n</script>\n<!--kg-card-end: markdown-->",
            "comment_id": "5cf33d81f2f7cd51041bccc2",
            "plaintext": "记得很久以前爬过评论的API，请求参数是加密过的，调用过程好像有点复杂，后来直接用PyV8调用javascript加密得到参数，但是加密的过程不是很清楚，刚好想找个理由学一学Python，这次就用纯Python写吧。\n\n先随便选一个接口分析一下，就选评论接口吧。\n\n1.获取评论\n进入Chrome开发者模式可以看到\n\n\n\n\n这个就是获取评论的接口，请求方式是POST，请求体有两个参数params和encSecKey，在请求的Initiator可以看到发出请求的代码在core_xxxx.js这个文件，代码肯定经过混淆，先下载到本地格式化一下。在js文件中搜索encSecKey，找到生成参数的相关代码段，可以看到参数由asrsea这个函数生成。\n\nvar bYc0x = window.asrsea(JSON.stringify(i8a), bkY9P([\"流泪\", \"强\"]), bkY9P(VM5R.md), bkY9P([\"爱心\", \"女孩\", \"惊恐\", \"大笑\"]));\ne8e.data = k8c.cz9q({\n    params: bYc0x.encText,\n    encSecKey: bYc0x.encSecKey\n})\n\n\n继续在js文件中搜索这个函数，可以看到生成参数的相关函数：\n\nfunction a(a) {\n    var d, e, b = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\",\n        c = \"\";\n    for (d = 0; a > d; d += 1) e = Math.random() * b.length,\n    e = Math.floor(e),\n    c += b.charAt(e);\n    return c\n}\n//生成encText，即params\nfunction b(a, b) {\n    var c = CryptoJS.enc.Utf8.parse(b),                     //密钥\n        d = CryptoJS.enc.Utf8.parse(\"0102030405060708\"),    //初始化向量\n        e = CryptoJS.enc.Utf8.parse(a),                     //数据\n        f = CryptoJS.AES.encrypt(e, c, {\n            iv: d,\n            mode: CryptoJS.mode.CBC\n        });\n    return f.toString()\n}\n//生成encSecKey\nfunction c(a, b, c) {\n    var d, e;\n    return setMaxDigits(131),\n    d = new RSAKeyPair(b, \"\", c),\n    e = encryptedString(d, a)\n}\n//spider 加密函数\nfunction d(d, e, f, g) {\n    var h = {},\n        i = a(16);  //随机生成一个由a~z,A~Z,0~9组成的长度为a的字符串（AES密钥）\n    return h.encText = b(d, g),\n    h.encText = b(h.encText, i),\n    h.encSecKey = c(i, e, f),\n    h\n}\nfunction e(a, b, d, e) {\n    var f = {};\n    return f.encText = c(a + e, b, d),\n    f\n}\nwindow.asrsea = d,\nwindow.ecnonasr = e\n\n\nparams的生成过程比较简单，在函数d中可以看到params由两次调用函数b得到：函数b是AES加密的过程，参数a是要加密的数据，参数b是密钥，params经过两次AES加密得到，通过调试可以看到第一次加密：\n\nh.encText = b(d, g)\n\n\n参数g是固定的：\n\n> 0CoJUm6Qyw8W8jud\n\n\n而参数d则是请求参数构成的json字符串，在上面的请求中是：\n\n> {\"rid\":\"R_SO_4_1361988914\",\"offset\":\"0\",\"total\":\"true\",\"limit\":\"20\",\"csrf_token\":\"\"}\n\n\noffset代表获取的第一条评论的偏移量，limit是获取的评论数。\n\n第二次加密是使用随机生成的密钥（长度为16）加密第一次加密生成的数据。为了方便测试，在原网页获取随机生成的某密钥以及用这个密钥加密得到的params和encSecKey：\n\nkey:\n\n> 6lauqIqaJelwkFKM\n\n\nparams:\n\n> 1NGJ2rghqo1ToCy5r27rEDqRCNEZxxKk2BvmOQoud6GTNfPZKGRJVFmqfJWeAXYQi4V/++6HKpDjFDfB+TZZ+cmDQF2ywgL9w5Ow8r+mtLG95D7rfUfRkT7GiTn4KMCt+mIM9dtgtIoKXSZ77407F/ZI/GCfslievQ0IfnBAR8SoKQmz8XaQgC1Lxo93VxQ4\n\n\nencSecKey:\n\n> 2d1a892a0d7b3101eb00936c4915b2541bc378b58a5ccf6ab3ca939da1fd1fcee7b7456feef0a0d9115c1b5aad8aa64674df8249597e9e74ab66cb5fa84a624f174ed59e786fef748528fff098fa749c11aa06d7d86b7a41d917277efb3f14f8b974ddb2cb5df638ec36d3de8c2f02335cb1990b150a8deafc186c2007dea21c\n\n\n其中AES加密的填充方式是pkcs#7padding，块大小是16\nBytes，加密后的数据默认使用base64编码，根据pkcs#7padding的规则，需要在数据后面添加(16 -\nn%16)个byte（无论n的长度是否是16的整数倍），且byte的值也为(16 - n%16)。\n\nfrom Crypto.Cipher import AES\nimport base64\n\ndef pkcs7_padding(data):\n\tn = 16 - len(data) % 16\n\tdata += (chr(n) * n).encode()\n\treturn data\n\nkey = '0CoJUm6Qyw8W8jud'.encode('utf-8')\nmode = AES.MODE_CBC\niv = '0102030405060708'.encode('utf-8')\n\naes = AES.new(key, mode, iv)\n\ndata = '{\"rid\":\"R_SO_4_1361988914\",\"offset\":\"0\",\"total\":\"true\",\"limit\":\"20\",\"csrf_token\":\"\"}'.encode('utf-8')\ndata = pkcs7_padding(data)\n\nendata = aes.encrypt(data)\nendata = base64.b64encode(endata)\n\nkey = '6lauqIqaJelwkFKM'.encode('utf-8')\n\naes = AES.new(key, mode, iv)\n\ndata = pkcs7_padding(endata)\n\nendata = aes.encrypt(data)\nendata = base64.b64encode(endata)\n\nprint(endata)\n\n\n得到的数据与请求中的一致。\n\n再分析一下encSecKey的生成过程，在函数d中可以看到encSecKey由函数c生成：函数c将随机生成的密钥（就是上面生成params时AES加密的密钥）经过RSA加密得到encSecKey。\n关于RSA加密的过程，源代码在这里可以看到:http://www.ohdave.com/rsa\n\nRSAKeyPair包括encryptionExponent,decryptionExponent,modulus（分别对应代码中RSAKeyPair函数的三个参数，根据RSA加密的过程：公钥包含两个大整数，n和e，假设要加密的数据是m，则加密后的数据$c\n≡ m^e \\ (mod \\ n)$,这里的e就是encryptionExponent，n就是modulus。\n\ne和n两个数应该是固定的（公钥应该不会频繁更换吧），在RSAKeyPair函数打断点得到e和n的值分别是：\n\n> 010001\n\n\n和\n\n> 00e0b509f6259df8642dbc35662901477df22677ec152b5ff68ace615bb7b725152b3ab17a876aea8a5aa76d2e417629ec4ee341f56135fccf695280104e0312ecbda92557c93870114af6c9d05c4f7f0c3685b7a46bee255932575cce10b424d813cfe4875d3e82047b97ddef52741d546b8e289dc6935b3ece0462db0a22b8e7\n\n\n一开始我尝试直接对数据进行加密：\n\nimport rsa\nimport binascii\n\nrsa_n = int(\"00e0b509f6259df8642dbc35662901477df22677ec152b5ff68ace615bb7b725152b3ab17a876aea8a5aa76d2e417629ec4ee341f56135fccf695280104e0312ecbda92557c93870114af6c9d05c4f7f0c3685b7a46bee255932575cce10b424d813cfe4875d3e82047b97ddef52741d546b8e289dc6935b3ece0462db0a22b8e7\", 16)\nrsa_e = int(\"010001\", 16)\n\nkey = rsa.PublicKey(rsa_n, rsa_e)\ndata = \"6lauqIqaJelwkFKM\".encode()\n\nencrypted_data = rsa.encrypt(data, key)\nhex_str = binascii.b2a_hex(encrypted_data)\n\nprint(hex_str)\n\n\n尝试请求接口，但是没有返回数据，猜测跟数据转换成的整数有关，回到js代码中加密的代码段看看：\n\nfunction encryptedString(a, b) {\n    for (var f, g, h, i, j, k, l, c = new Array, d = b.length, e = 0; d > e;) c[e] = b.charCodeAt(e),\n    e++;\n    for (; 0 != c.length % a.chunkSize;) c[e++] = 0;\n    for (f = c.length, g = \"\", e = 0; f > e; e += a.chunkSize) {\n        for (j = new BigInt, h = 0, i = e; i < e + a.chunkSize; ++h) {\n            j.digits[h] = c[i++]\n            j.digits[h] += c[i++] << 8\n        }\n        //j是待加密数据转换后的整数\n        k = a.barrett.powMod(j, a.e),\n        l = 16 == a.radix ? biToHex(k) : biToString(k, a.radix),\n        g += l + \" \"\n    }\n    return g.substring(0, g.length - 1)\n}\n\n\n在本地测试输出j的值：\n\nconsole.log(biToHex(j))\n\n\n对这个值进行加密：\n\nhex_str = '4d4b466b776c654a6171497175616c36'\nrsa_m = int(hex_str, 16)\n\nrsa_c = rsa.core.encrypt_int(rsa_m, rsa_e, rsa_n)\n\nprint(hex(rsa_c))\n\n\n这次得到的数据跟请求中的参数一致（RSA加密生成的数据可能每次都不一样，跟填充方式有关），查阅RSA相关的资料知道算法是在固定长度的块上面进行操作，如果数据长度大于块大小要分割，小于要填充，根据上面的代码，这里的填充方式是直接在后面补'\\0'，加密时对每块进行加密，生成的数据之间用空格隔开，至于块大小怎么确定暂时不知道，先不管。\n为了了解数据是怎么转换成整数的，需要了解BigInt的结构，通过调试可以知道BigInt包含一个数组，观察上面的代码可以知道数据转换成BigInt的过程是把每两个的字符的ascii码值逆序存放到数组的一个元素中，例如字符串：\"cd\",写成二进制的形式是：\n\n> 0110 0011 / 0010 0100\n\n\n放到BigInt中是：\n\n> 0010 0100 0110 0011\n\n\n接下来看看BigInt是怎么转换成整数的，找到BigInt转Hex的函数（因为这个函数最简单2333）：\n\nfunction reverseStr(a) {\n    var c, b = \"\";\n    for (c = a.length - 1; c > -1; --c) b += a.charAt(c);\n    return b\n}\nfunction digitToHex(a) {\n    var b = 15,\n        c = \"\";\n    for (i = 0; 4 > i; ++i) c += hexToChar[a & b],\n    a >>>= 4;\n    return reverseStr(c)\n}\nfunction biToHex(a) {\n    var d, b = \"\";\n    for (biHighIndex(a), d = biHighIndex(a); d > -1; --d) b += digitToHex(a.digits[d]);\n    return\n\n\n这个函数逆序对BigInt的数组元素进行如下操作：从低位开始每4个二进制位转对应的16进制，并逆序输出。\n所以数据转整数的整个过程其实就是把数据以小端方式存储（跟直接加密的区别就在于大端和小端），例如字符串\"cdef\"：\n\n0110 0011 / 0010 0100 / 0110 0101 / 0110 0110\n\n转换成小端：\n\n0110 0110 / 0110 0101 / 0010 0100 / 0110 0011\n\n转换成16进制就是：\n\n0x66656463\n\n测试一下：\n\ntable = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f']\n\ndata = \"6lauqIqaJelwkFKM\".encode()\nhex_str = ''\n\nfor i in range(len(data) - 1, -1, -1):\n\thex_str += table[(data[i] & 0xf0) >> 4]\n\thex_str += table[data[i] & 0xf]\n\nrsa_m = int(hex_str, 16)\n\nrsa_c = rsa.core.encrypt_int(rsa_m, rsa_e, rsa_n)\n\nprint(hex(rsa_c))\n\n\n这次得到的结果与请求参数的一致，再次发送请求已经可以获取到数据了。\n\n\n\n（看了文档才知道白折腾了。。。文档里面有说明是逆序的）\n\n\n经过上面的分析可以大概得出请求的流程：前端先把请求的参数包装成json字符串，使用一个固定的密钥加密得到第一次加密的数据，再使用随机生成的密钥加密第一次加密生成的数据最终得到传递给服务器的参数，接着加密随机生成的密钥传递给服务器。服务器端用私钥解密得到前端随机生成的密钥，再用这个密钥对加密过的参数解密，经过两次解密最终得到参数。\n\n关于csrf_token参数，这个是用户登录以后才会有的，之后可能会补充更新一下这部分的接口，另外如果用postman之类的工具请求接口好像直接把参数放在query部分才行，一开始放到post\nbody获取不到数据。\n\n最后把获取评论的接口贴一下：\n\nurl: https://music.163.com/weapi/v1/resource/comments/ID\nmethod: POST\nquery: csrf_token\nparams: ID(string), offset(int), limit(int), total(boolean), csrf_token(string)\n\n当请求歌曲评论时，ID的格式是R_SO_4_ + 歌曲ID。\n歌单：A_PL_0 + 歌单ID。\n电台：A_DJ_1 + 电台ID\n\n其他类型的评论ID可以在开发者模式下获取相应请求url得到。\n\n2.获取歌词\n通过上面的分析已经得到参数加密的方法，所以我们只需要知道请求这个接口都有什么参数就可以了。\n\nexample:\n\n> {\"id\":\"1361988914\",\"lv\":-1,\"tv\":-1,\"csrf_token\":\"\"}\n\n\nlv,tv这几个参数暂时不知道作用是什么，有兴趣的可以自己研究研究。\n\nurl: https://music.163.com/weapi/song/lyric\nmethod: POST\nquery: csrf_token\nparams: ID(int), lv(int), lv(int), csrf_token(string)\n\n3.获取播放列表\n在网页打开播放列表得到的列表详情是在后端处理过直接返回给浏览器的，没有暴露接口，但是通过官方提供的iframe插件可以得到一个接口，例如这个歌单：\nhttps://music.163.com/outchain/player?type=0&id=2821194580&auto=1&height=430\n[https://music.163.com/outchain/player?type=0&id=2821194580&auto=1&height=430] \n，加密方式跟上文一样：\n\nexample:\n\n> {\"id\":\"2821194580\",\"ids\":\"[\"2821194580\"]\",\"limit\":10000,\"offset\":0,\"csrf_token\":\"\"}\n\n\nid参数是必须的，ids参数的作用暂时不知道是什么。但是这个接口目前好像没办法正常使用，limit和offset设置是无效的，一次最多获取1000条歌曲数据，而且也无法获取订阅状态，还需要再研究研究。\n\nurl: https://music.163.com/weapi/playlist/detail\nmethod: POST\nparams: id(int), ids(array), limit(int), offset(int), csrf_token(string)\n\n4.搜索\n4.1 推荐\nexample：\n\n> {\"s\":\"陈奕迅\",\"limit\":\"8\",\"csrf_token\":\"\"}\n\n\nurl: https://music.163.com/weapi/cloudsearch/get/web\nmethod: POST\nquery: csrf_token\nparams: s(string), limit(int), csrf_token(string)\n\n4.2 各种搜索\nexample:\n\n> {\"hlpretag\":\"<span\nclass=\"s-fc7\">\",\"hlposttag\":\"\",\"s\":\"陈奕迅\",\"type\":\"1\",\"offset\":\"0\",\"total\":\"true\",\"limit\":\"30\",\"csrf_token\":\"\"}\n\n\n前面hlpretag和hlposttag暂时不知道作用是什么，可以不加进去，如果要加进去加密的时候记得要把转义符号也当成字符串的一部分，在python中可以在字符串前面加r表示raw\nstring。\n其中type是搜索的类型：\n1 歌曲\n10 专辑\n100 歌手\n1000 歌单\n1002 用户\n1006 歌词\n1009 电台\n1014 视频\n其他的参数比较明显就不细说了。\n\nurl: https://music.163.com/weapi/cloudsearch/get/web\nmethod: POST\nquery: csrf_token\nparams: s(string), type(int), offset(int), total(int), limit(int),\ncsrf_token(string)\n\n5.用户Token\n先分析怎么通过手机登录获取token。\n这个稍微复杂点，因为传递给服务器的参数中password是经过加密的，只要找出加密的方法就可以了。首先还是找到跟加密password相关的函数，这个断点多花点时间是可以找出来的。\n\n在pt_frame_index.js这个文件里面发现如下代码：\n\nvar i9b = {\n    countrycode: gX3x.countrycode,\n    phone:gX3x.mobile,\n    password:k9b.lB4F(gX3x.password),\n    rememberLogin:this.RU4Y.checked\n}\n\n\n其中lB4F这个函数就是加密password的函数，接着找到：\n\np.lB4F = function(i9b) {\n    return XC6w(LI2x(xC8u(i9b, !0), i9b.length * nA5F), !0)\n};\n\n\nvar nA5F = 8;\n\nvar xC8u = function() {\n    var GB0x = function(i) {\n        return i % 32\n    },\n    Gx0x = function(i) {\n        return 32 - nA5F - i % 32\n    };\n    return function(cQ2x, Gw0x) {\n        var Xr6l = [],\n        lI4M = (1 << nA5F) - 1,\n        mE5J = Gw0x ? GB0x: Gx0x;\n        for (var i = 0,\n        l = cQ2x.length * nA5F; i < l; i += nA5F) Xr6l[i >> 5] |= (cQ2x.charCodeAt(i / nA5F) & lI4M) << mE5J(i);\n        return Xr6l\n    }\n} ();\n\n\nvar LI2x = function(x, y) {\n    x[y >> 5] |= 128 << y % 32;\n    x[(y + 64 >>> 9 << 4) + 14] = y;\n    var a = 1732584193,\n    b = -271733879,\n    c = -1732584194,\n    d = 271733878;\n    for (var i = 0,\n    l = x.length,\n    bFW5b, bFX5c, bGc5h, bGd5i; i < l; i += 16) {\n        bFW5b = a;\n        bFX5c = b;\n        bGc5h = c;\n        bGd5i = d;\n        a = qb5g(a, b, c, d, x[i + 0], 7, -680876936);\n        d = qb5g(d, a, b, c, x[i + 1], 12, -389564586);\n        c = qb5g(c, d, a, b, x[i + 2], 17, 606105819);\n        b = qb5g(b, c, d, a, x[i + 3], 22, -1044525330);\n        a = qb5g(a, b, c, d, x[i + 4], 7, -176418897);\n        d = qb5g(d, a, b, c, x[i + 5], 12, 1200080426);\n        c = qb5g(c, d, a, b, x[i + 6], 17, -1473231341);\n        b = qb5g(b, c, d, a, x[i + 7], 22, -45705983);\n        a = qb5g(a, b, c, d, x[i + 8], 7, 1770035416);\n        d = qb5g(d, a, b, c, x[i + 9], 12, -1958414417);\n        c = qb5g(c, d, a, b, x[i + 10], 17, -42063);\n        b = qb5g(b, c, d, a, x[i + 11], 22, -1990404162);\n        a = qb5g(a, b, c, d, x[i + 12], 7, 1804603682);\n        d = qb5g(d, a, b, c, x[i + 13], 12, -40341101);\n        c = qb5g(c, d, a, b, x[i + 14], 17, -1502002290);\n        b = qb5g(b, c, d, a, x[i + 15], 22, 1236535329);\n        a = pT5Y(a, b, c, d, x[i + 1], 5, -165796510);\n        d = pT5Y(d, a, b, c, x[i + 6], 9, -1069501632);\n        c = pT5Y(c, d, a, b, x[i + 11], 14, 643717713);\n        b = pT5Y(b, c, d, a, x[i + 0], 20, -373897302);\n        a = pT5Y(a, b, c, d, x[i + 5], 5, -701558691);\n        d = pT5Y(d, a, b, c, x[i + 10], 9, 38016083);\n        c = pT5Y(c, d, a, b, x[i + 15], 14, -660478335);\n        b = pT5Y(b, c, d, a, x[i + 4], 20, -405537848);\n        a = pT5Y(a, b, c, d, x[i + 9], 5, 568446438);\n        d = pT5Y(d, a, b, c, x[i + 14], 9, -1019803690);\n        c = pT5Y(c, d, a, b, x[i + 3], 14, -187363961);\n        b = pT5Y(b, c, d, a, x[i + 8], 20, 1163531501);\n        a = pT5Y(a, b, c, d, x[i + 13], 5, -1444681467);\n        d = pT5Y(d, a, b, c, x[i + 2], 9, -51403784);\n        c = pT5Y(c, d, a, b, x[i + 7], 14, 1735328473);\n        b = pT5Y(b, c, d, a, x[i + 12], 20, -1926607734);\n        a = pQ5V(a, b, c, d, x[i + 5], 4, -378558);\n        d = pQ5V(d, a, b, c, x[i + 8], 11, -2022574463);\n        c = pQ5V(c, d, a, b, x[i + 11], 16, 1839030562);\n        b = pQ5V(b, c, d, a, x[i + 14], 23, -35309556);\n        a = pQ5V(a, b, c, d, x[i + 1], 4, -1530992060);\n        d = pQ5V(d, a, b, c, x[i + 4], 11, 1272893353);\n        c = pQ5V(c, d, a, b, x[i + 7], 16, -155497632);\n        b = pQ5V(b, c, d, a, x[i + 10], 23, -1094730640);\n        a = pQ5V(a, b, c, d, x[i + 13], 4, 681279174);\n        d = pQ5V(d, a, b, c, x[i + 0], 11, -358537222);\n        c = pQ5V(c, d, a, b, x[i + 3], 16, -722521979);\n        b = pQ5V(b, c, d, a, x[i + 6], 23, 76029189);\n        a = pQ5V(a, b, c, d, x[i + 9], 4, -640364487);\n        d = pQ5V(d, a, b, c, x[i + 12], 11, -421815835);\n        c = pQ5V(c, d, a, b, x[i + 15], 16, 530742520);\n        b = pQ5V(b, c, d, a, x[i + 2], 23, -995338651);\n        a = pA5F(a, b, c, d, x[i + 0], 6, -198630844);\n        d = pA5F(d, a, b, c, x[i + 7], 10, 1126891415);\n        c = pA5F(c, d, a, b, x[i + 14], 15, -1416354905);\n        b = pA5F(b, c, d, a, x[i + 5], 21, -57434055);\n        a = pA5F(a, b, c, d, x[i + 12], 6, 1700485571);\n        d = pA5F(d, a, b, c, x[i + 3], 10, -1894986606);\n        c = pA5F(c, d, a, b, x[i + 10], 15, -1051523);\n        b = pA5F(b, c, d, a, x[i + 1], 21, -2054922799);\n        a = pA5F(a, b, c, d, x[i + 8], 6, 1873313359);\n        d = pA5F(d, a, b, c, x[i + 15], 10, -30611744);\n        c = pA5F(c, d, a, b, x[i + 6], 15, -1560198380);\n        b = pA5F(b, c, d, a, x[i + 13], 21, 1309151649);\n        a = pA5F(a, b, c, d, x[i + 4], 6, -145523070);\n        d = pA5F(d, a, b, c, x[i + 11], 10, -1120210379);\n        c = pA5F(c, d, a, b, x[i + 2], 15, 718787259);\n        b = pA5F(b, c, d, a, x[i + 9], 21, -343485551);\n        a = mG5L(a, bFW5b);\n        b = mG5L(b, bFX5c);\n        c = mG5L(c, bGc5h);\n        d = mG5L(d, bGd5i)\n    }\n    return [a, b, c, d]\n};\n\n\nvar mG5L = function(x, y) {\n    var bFc4g = (x & 65535) + (y & 65535),\n    cwl5q = (x >> 16) + (y >> 16) + (bFc4g >> 16);\n    return cwl5q << 16 | bFc4g & 65535\n};\nvar bem8e = function(q, a, b, x, s, t) {\n    return mG5L(beu8m(mG5L(mG5L(a, q), mG5L(x, t)), s), b)\n};\nvar qb5g = function(a, b, c, d, x, s, t) {\n    return bem8e(b & c | ~b & d, a, b, x, s, t)\n};\nvar pT5Y = function(a, b, c, d, x, s, t) {\n    return bem8e(b & d | c & ~d, a, b, x, s, t)\n};\nvar pQ5V = function(a, b, c, d, x, s, t) {\n    return bem8e(b ^ c ^ d, a, b, x, s, t)\n};\nvar pA5F = function(a, b, c, d, x, s, t) {\n    return bem8e(c ^ (b | ~d), a, b, x, s, t)\n};\n\n\nvar XC6w = function() {\n    var bFG5L = \"0123456789abcdef\",\n    GB0x = function(i) {\n        return i % 4\n    },\n    Gx0x = function(i) {\n        return 3 - i % 4\n    };\n    return function(iL3x, Gw0x) {\n        var bu0x = [],\n        mE5J = Gw0x ? GB0x: Gx0x;\n        for (var i = 0,\n        l = iL3x.length * 4; i < l; i++) {\n            bu0x.push(bFG5L.charAt(iL3x[i >> 2] >> mE5J(i) * 8 + 4 & 15) + bFG5L.charAt(iL3x[i >> 2] >> mE5J(i) * 8 & 15))\n        }\n        return bu0x.join(\"\")\n    }\n} ();\n\n\n看起来眼花缭乱，但是我们并不需要知道各个函数的作用，直接用python的语法转换一下：",
            "feature_image": null,
            "featured": 0,
            "page": 0,
            "status": "published",
            "locale": null,
            "visibility": "public",
            "meta_title": null,
            "meta_description": null,
            "author_id": "1",
            "created_at": "2019-06-02T03:07:45.000Z",
            "updated_at": "2019-06-07T12:19:10.000Z",
            "published_at": "2019-06-02T03:36:06.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "custom_template": null,
            "canonical_url": null
          },
          {
            "id": "5cfb9783c199180df866a24e",
            "uuid": "25614d90-7743-44e7-8001-63b11b552e2d",
            "title": "快活的日子到头咯，搬砖去了",
            "slug": "publish-paused",
            "mobiledoc": "{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"还没更新完的暂时弃更~\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]]}",
            "html": "<!--kg-card-begin: markdown--><p>还没更新完的暂时弃更~</p>\n<!--kg-card-end: markdown-->",
            "comment_id": "5cfb9783c199180df866a24e",
            "plaintext": "还没更新完的暂时弃更~",
            "feature_image": null,
            "featured": 1,
            "page": 0,
            "status": "published",
            "locale": null,
            "visibility": "public",
            "meta_title": null,
            "meta_description": null,
            "author_id": "1",
            "created_at": "2019-06-08T11:09:55.000Z",
            "updated_at": "2019-06-08T11:10:55.000Z",
            "published_at": "2019-06-08T11:10:55.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "custom_template": null,
            "canonical_url": null
          },
          {
            "id": "5d38474ec199180df866a265",
            "uuid": "f676aa80-dd95-4425-9de2-2519e99300f6",
            "title": "VSCode + Anaconda 虚拟环境pylint报错",
            "slug": "vscode",
            "mobiledoc": "{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[],\"markups\":[],\"sections\":[[1,\"p\",[[0,[],0,\"导入\"]]]]}",
            "html": "<p>导入</p>",
            "comment_id": "5d38474ec199180df866a265",
            "plaintext": "导入",
            "feature_image": null,
            "featured": 0,
            "page": 0,
            "status": "draft",
            "locale": null,
            "visibility": "public",
            "meta_title": null,
            "meta_description": null,
            "author_id": "1",
            "created_at": "2019-07-24T11:55:58.000Z",
            "updated_at": "2019-07-24T11:58:46.000Z",
            "published_at": null,
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "custom_template": null,
            "canonical_url": null
          }
        ],
        "posts_authors": [
          {
            "id": "5cf3b9b16e5789135f7785a9",
            "post_id": "5cf3b9b16e5789135f77859e",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "5cf3b9b16e5789135f7785ab",
            "post_id": "5cf3b9b16e5789135f77859f",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "5cf3b9b16e5789135f7785ac",
            "post_id": "5cf3b9b16e5789135f7785a0",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "5cf3b9b16e5789135f7785ae",
            "post_id": "5cf3b9b16e5789135f7785a1",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "5cf3b9b16e5789135f7785b0",
            "post_id": "5cf3b9b16e5789135f7785a2",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "5cf3b9b16e5789135f7785b2",
            "post_id": "5cf3b9b16e5789135f7785a3",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "5cf3b9b16e5789135f7785b4",
            "post_id": "5cf3b9b16e5789135f7785a4",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "5cf3b9b16e5789135f7785b5",
            "post_id": "5cf3b9b16e5789135f7785a5",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "5cf3b9b16e5789135f7785b6",
            "post_id": "5cf3b9b16e5789135f7785a6",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "5cf3b9b16e5789135f7785b9",
            "post_id": "5cf3b9b16e5789135f7785a7",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "5cfb9783c199180df866a24f",
            "post_id": "5cfb9783c199180df866a24e",
            "author_id": "1",
            "sort_order": 0
          },
          {
            "id": "5d38474ec199180df866a266",
            "post_id": "5d38474ec199180df866a265",
            "author_id": "1",
            "sort_order": 0
          }
        ],
        "posts_tags": [
          {
            "id": "5cf3b9b16e5789135f7785a8",
            "post_id": "5cf3b9b16e5789135f77859e",
            "tag_id": "5cf3b9b16e5789135f778596",
            "sort_order": 0
          },
          {
            "id": "5cf3b9b16e5789135f7785aa",
            "post_id": "5cf3b9b16e5789135f77859f",
            "tag_id": "5cf3b9b16e5789135f778596",
            "sort_order": 0
          },
          {
            "id": "5cf3b9b16e5789135f7785ad",
            "post_id": "5cf3b9b16e5789135f7785a1",
            "tag_id": "5cf3b9b16e5789135f778598",
            "sort_order": 0
          },
          {
            "id": "5cf3b9b16e5789135f7785af",
            "post_id": "5cf3b9b16e5789135f7785a2",
            "tag_id": "5cf3b9b16e5789135f778599",
            "sort_order": 0
          },
          {
            "id": "5cf3b9b16e5789135f7785b1",
            "post_id": "5cf3b9b16e5789135f7785a3",
            "tag_id": "5cf3b9b16e5789135f778599",
            "sort_order": 0
          },
          {
            "id": "5cf3b9b16e5789135f7785b3",
            "post_id": "5cf3b9b16e5789135f7785a4",
            "tag_id": "5cf3b9b16e5789135f77859b",
            "sort_order": 0
          },
          {
            "id": "5cf3b9b16e5789135f7785b7",
            "post_id": "5cf3b9b16e5789135f7785a7",
            "tag_id": "5cf3b9b16e5789135f77859c",
            "sort_order": 0
          },
          {
            "id": "5cf3b9b16e5789135f7785b8",
            "post_id": "5cf3b9b16e5789135f7785a7",
            "tag_id": "5cf3b9b16e5789135f77859d",
            "sort_order": 1
          }
        ],
        "roles": [
          {
            "id": "5cf3b8ed6e5789135f778443",
            "name": "Administrator",
            "description": "Administrators",
            "created_at": "2019-06-02T11:54:21.000Z",
            "updated_at": "2019-06-02T11:54:21.000Z"
          },
          {
            "id": "5cf3b8ed6e5789135f778444",
            "name": "Editor",
            "description": "Editors",
            "created_at": "2019-06-02T11:54:21.000Z",
            "updated_at": "2019-06-02T11:54:21.000Z"
          },
          {
            "id": "5cf3b8ed6e5789135f778445",
            "name": "Author",
            "description": "Authors",
            "created_at": "2019-06-02T11:54:21.000Z",
            "updated_at": "2019-06-02T11:54:21.000Z"
          },
          {
            "id": "5cf3b8ed6e5789135f778446",
            "name": "Contributor",
            "description": "Contributors",
            "created_at": "2019-06-02T11:54:21.000Z",
            "updated_at": "2019-06-02T11:54:21.000Z"
          },
          {
            "id": "5cf3b8ed6e5789135f778447",
            "name": "Owner",
            "description": "Blog Owner",
            "created_at": "2019-06-02T11:54:21.000Z",
            "updated_at": "2019-06-02T11:54:21.000Z"
          },
          {
            "id": "5cf3b8ed6e5789135f778448",
            "name": "Admin Integration",
            "description": "External Apps",
            "created_at": "2019-06-02T11:54:21.000Z",
            "updated_at": "2019-06-02T11:54:21.000Z"
          }
        ],
        "roles_users": [
          {
            "id": "5cf3b8ee6e5789135f77848f",
            "role_id": "5cf3b8ed6e5789135f778445",
            "user_id": "5951f5fca366002ebd5dbef7"
          },
          {
            "id": "5cf3b8ef6e5789135f77856e",
            "role_id": "5cf3b8ed6e5789135f778447",
            "user_id": "1"
          }
        ],
        "settings": [
          {
            "id": "5cf3b8f06e5789135f77856f",
            "key": "db_hash",
            "value": "65b8aa32-e03d-4518-a58c-02eb242d5cf0",
            "type": "core",
            "created_at": "2019-06-02T11:54:24.000Z",
            "updated_at": "2019-06-02T11:54:24.000Z"
          },
          {
            "id": "5cf3b8f06e5789135f778570",
            "key": "next_update_check",
            "value": "1567396767",
            "type": "core",
            "created_at": "2019-06-02T11:54:24.000Z",
            "updated_at": "2019-09-01T03:59:27.000Z"
          },
          {
            "id": "5cf3b8f06e5789135f778571",
            "key": "notifications",
            "value": "[{\"dismissible\":true,\"location\":\"bottom\",\"status\":\"alert\",\"id\":\"99b26fc0-c99c-11e9-b812-bf40fe557e67\",\"custom\":false,\"createdAt\":\"2019-08-28T13:03:24.000Z\",\"type\":\"info\",\"top\":false,\"message\":\"Ghost <a href=\\\"https://github.com/TryGhost/Ghost/releases\\\">2.30.2</a> has been released, <a href=\\\"https://ghost.org/update/?v=2.23.1\\\">click here</a> to upgrade.\",\"seen\":false,\"addedAt\":\"2019-09-01T03:59:27.650Z\"}]",
            "type": "core",
            "created_at": "2019-06-02T11:54:24.000Z",
            "updated_at": "2019-09-01T03:59:27.000Z"
          },
          {
            "id": "5cf3b8f06e5789135f778572",
            "key": "session_secret",
            "value": "b09356d1e81d2a84e0378b99308d965e4722ab76254224c13e79489072f8962b",
            "type": "core",
            "created_at": "2019-06-02T11:54:24.000Z",
            "updated_at": "2019-06-02T11:54:24.000Z"
          },
          {
            "id": "5cf3b8f06e5789135f778573",
            "key": "theme_session_secret",
            "value": "7390aa1afc3d2972e6b11187674050331424635068249c1b834911b5055d8edc",
            "type": "core",
            "created_at": "2019-06-02T11:54:24.000Z",
            "updated_at": "2019-06-02T11:54:24.000Z"
          },
          {
            "id": "5cf3b8f06e5789135f778574",
            "key": "title",
            "value": "两脚书橱的逃亡",
            "type": "blog",
            "created_at": "2019-05-12T17:27:36.000Z",
            "updated_at": "2019-05-12T17:30:20.000Z"
          },
          {
            "id": "5cf3b8f06e5789135f778575",
            "key": "description",
            "value": "我怎么就这么蠢！",
            "type": "blog",
            "created_at": "2019-05-12T17:27:36.000Z",
            "updated_at": "2019-06-05T15:45:33.000Z"
          },
          {
            "id": "5cf3b8f06e5789135f778576",
            "key": "logo",
            "value": "/content/images/2019/07/2019-04-03.jpg",
            "type": "blog",
            "created_at": "2019-05-12T17:27:36.000Z",
            "updated_at": "2019-07-13T02:42:55.000Z"
          },
          {
            "id": "5cf3b8f06e5789135f778577",
            "key": "cover_image",
            "value": "/content/images/2019/07/samurai_champloo-008.jpg",
            "type": "blog",
            "created_at": "2019-05-12T17:27:36.000Z",
            "updated_at": "2019-07-13T02:42:55.000Z"
          },
          {
            "id": "5cf3b8f06e5789135f778578",
            "key": "icon",
            "value": null,
            "type": "blog",
            "created_at": "2019-05-12T17:27:36.000Z",
            "updated_at": "2019-05-12T17:27:36.000Z"
          },
          {
            "id": "5cf3b8f06e5789135f778579",
            "key": "default_locale",
            "value": "zh",
            "type": "blog",
            "created_at": "2019-05-12T17:27:36.000Z",
            "updated_at": "2019-05-13T09:57:44.000Z"
          },
          {
            "id": "5cf3b8f06e5789135f77857a",
            "key": "active_timezone",
            "value": "Asia/Hong_Kong",
            "type": "blog",
            "created_at": "2019-05-12T17:27:36.000Z",
            "updated_at": "2019-05-12T17:33:34.000Z"
          },
          {
            "id": "5cf3b8f06e5789135f77857b",
            "key": "force_i18n",
            "value": "true",
            "type": "blog",
            "created_at": "2019-05-12T17:27:36.000Z",
            "updated_at": "2019-05-12T17:27:36.000Z"
          },
          {
            "id": "5cf3b8f06e5789135f77857d",
            "key": "amp",
            "value": "true",
            "type": "blog",
            "created_at": "2019-05-12T17:27:36.000Z",
            "updated_at": "2019-05-12T17:27:36.000Z"
          },
          {
            "id": "5cf3b8f06e5789135f77857e",
            "key": "ghost_head",
            "value": "<!-- Global site tag (gtag.js) - Google Analytics -->\n<script async src=\"https://www.googletagmanager.com/gtag/js?id=UA-140023654-1\"></script>\n<script>\n  window.dataLayer = window.dataLayer || [];\n  function gtag(){dataLayer.push(arguments);}\n  gtag('js', new Date());\n  gtag('config', 'UA-140023654-1');\n</script>\n<script>\n    var disqus_shortname = 'https-clumsy-go-ink';\n</script>\n<script>\n  var searchSettings = {\n    key: '68be4d1f19454d3e5ab9fa696e',  // Your custom integration Content API Key\n    host: 'https://clumsy-go.ink',  // Your custom integration API URL\n  };\n</script>\n\n<link rel=\"stylesheet\" type=\"text/css\" href=\"/assets/plugins/highlight-latest/styles/qtcreator_dark.css\" />\n<!--<style>\n    \n:root {\n  /* Colours */\n  --primary-color: #009a61;\n  --primary-light-hover: #017e66;\n  --primary-dark-hover: #004e31;\n  --font-color: #2c3f51;\n  --background-color: #F5F7F9;\n  --border-color: #ebf2f6;\n  --selection-color: #16a085;\n  --post-meta: #9EABB3;\n\n\n  --darkgrey: #15171A;\n  --midgrey: #738a94;\n  --lightgrey: #c5d2d9;\n  --whitegrey: #e5eff5;\n\n  /* font-family */\n  --sans-serif: \"Chinese Quote\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"PingFang SC\", \"Hiragino Sans GB\", \"Microsoft YaHei\", \"Helvetica Neue\", Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n  --serif: \"Mercury SSm A\", \"Mercury SSm B\", Georgia, serif;\n}\n</style>\n-->",
            "type": "blog",
            "created_at": "2019-05-12T17:27:36.000Z",
            "updated_at": "2019-06-04T06:12:47.000Z"
          },
          {
            "id": "5cf3b8f06e5789135f77857f",
            "key": "ghost_foot",
            "value": null,
            "type": "blog",
            "created_at": "2019-05-12T17:27:36.000Z",
            "updated_at": "2019-05-12T17:27:36.000Z"
          },
          {
            "id": "5cf3b8f06e5789135f778580",
            "key": "facebook",
            "value": "ghost",
            "type": "blog",
            "created_at": "2019-05-12T17:27:36.000Z",
            "updated_at": "2019-05-12T17:27:36.000Z"
          },
          {
            "id": "5cf3b8f06e5789135f778581",
            "key": "twitter",
            "value": "@tryghost",
            "type": "blog",
            "created_at": "2019-05-12T17:27:36.000Z",
            "updated_at": "2019-05-12T17:33:34.000Z"
          },
          {
            "id": "5cf3b8f06e5789135f778582",
            "key": "labs",
            "value": "{\"subscribers\":true}",
            "type": "blog",
            "created_at": "2019-05-12T17:27:36.000Z",
            "updated_at": "2019-06-01T12:13:38.000Z"
          },
          {
            "id": "5cf3b8f06e5789135f778583",
            "key": "navigation",
            "value": "[{\"label\":\"主页\",\"url\":\"/\"},{\"label\":\"归档\",\"url\":\"/archives/\"},{\"label\":\"关于\",\"url\":\"/author/\"}]",
            "type": "blog",
            "created_at": "2019-05-12T17:27:36.000Z",
            "updated_at": "2019-05-14T04:09:37.000Z"
          },
          {
            "id": "5cf3b8f06e5789135f778584",
            "key": "slack",
            "value": "[]",
            "type": "blog",
            "created_at": "2019-05-12T17:27:36.000Z",
            "updated_at": "2019-06-02T12:02:30.000Z"
          },
          {
            "id": "5cf3b8f06e5789135f778585",
            "key": "unsplash",
            "value": "{\"isActive\":true}",
            "type": "blog",
            "created_at": "2019-05-12T17:27:36.000Z",
            "updated_at": "2019-05-12T17:33:34.000Z"
          },
          {
            "id": "5cf3b8f06e5789135f778586",
            "key": "active_theme",
            "value": "ghost-theme-kaldorei",
            "type": "theme",
            "created_at": "2019-06-02T11:54:24.000Z",
            "updated_at": "2019-06-02T11:57:25.000Z"
          },
          {
            "id": "5cf3b8f06e5789135f778587",
            "key": "is_private",
            "value": "false",
            "type": "private",
            "created_at": "2019-05-12T17:27:36.000Z",
            "updated_at": "2019-05-12T17:27:36.000Z"
          },
          {
            "id": "5cf3b8f06e5789135f778588",
            "key": "password",
            "value": null,
            "type": "private",
            "created_at": "2019-05-12T17:27:36.000Z",
            "updated_at": "2019-05-12T17:27:36.000Z"
          },
          {
            "id": "5cf3b8f06e5789135f778589",
            "key": "public_hash",
            "value": "c11e767ff1c3d422089e39ea39af84",
            "type": "private",
            "created_at": "2019-05-12T17:27:36.000Z",
            "updated_at": "2019-05-12T17:27:36.000Z"
          },
          {
            "id": "5cf3b8f06e5789135f77858a",
            "key": "members_public_key",
            "value": "-----BEGIN RSA PUBLIC KEY-----\nMIGJAoGBAJHl083YTcGS5HI/yZ2rWBlYh8OhXSLHvFt6A6mb4cihkebu/o+8oKHClCAAGiht\nXwbfMY6DPdEE6SKCKp33zDxf2GihE+9NtaHH+0Kde6Hbcci9iGHtZC6wasHy3oFNxrAFiaSU\nUVOnwwcnMHlDkfl9Cx7B9GwxEb1VIfKUaq0pAgMBAAE=\n-----END RSA PUBLIC KEY-----\n",
            "type": "members",
            "created_at": "2019-05-12T17:27:36.000Z",
            "updated_at": "2019-05-12T17:27:36.000Z"
          },
          {
            "id": "5cf3b8f06e5789135f77858b",
            "key": "members_private_key",
            "value": "-----BEGIN RSA PRIVATE KEY-----\nMIICXQIBAAKBgQCR5dPN2E3BkuRyP8mdq1gZWIfDoV0ix7xbegOpm+HIoZHm7v6PvKChwpQg\nABoobV8G3zGOgz3RBOkigiqd98w8X9hooRPvTbWhx/tCnXuh23HIvYhh7WQusGrB8t6BTcaw\nBYmklFFTp8MHJzB5Q5H5fQsewfRsMRG9VSHylGqtKQIDAQABAoGANelgN8s7CFGYWuNZRArh\nthPxrwd8m/KElqTin5T7fKC/gj9ED6cbEEsPYzfGcrPfjnGBJXE3sXoID/lbeB3t+L5uwcxN\n9DLbE4jOdx4Xi8AlUO+r3X1Gm39vlXS8hpOW8MG6hiABrNSleTeG8EEw7iUnPCQM7OsGPOfr\nbBpUYCUCQQDGGIf6314pLig97pHUEyOHa4cFOpNrdJpjqG6CwB3JgkhXZtY/rl7386IQeN/v\nkkwS+Z7tHIKOO1nL1WLHM1XzAkEAvItTg5ZweC+VJvTKRz/8mmU8sC/740NIltnZBXpPxMbu\n4Jlvrpvy6wFIAfbpVtyOg6AO0tAkqmIxMfUQiffrcwJBAJq6DHQaRdzabZo6HnNMY6LhjPu7\njewPjouqwm6kCmAbv89sxonE8+6twHcnQppIZd0oVkcTzrGzj+bTDC1VXpsCQQCJccvErkN4\n6b8CMgrPW+7qIojWK3SlHGRrS42wN5S07wwugMvwbtDrzfhPLk61unzNqT2FIqTH7GLOd0bC\nPQ/PAkBNNeFlB3LzOgHZ/ItUmEyfPdxeJljDoDU0r30vXShaFg9S/gIkJNBm6sYM9Y1grHJc\nLRt9+6djFh1v8iG5EAkV\n-----END RSA PRIVATE KEY-----\n",
            "type": "members",
            "created_at": "2019-05-12T17:27:36.000Z",
            "updated_at": "2019-05-12T17:27:36.000Z"
          },
          {
            "id": "5cf3b8f06e5789135f77858c",
            "key": "members_session_secret",
            "value": "ad4d28d7e72badbfbdb7577d06dd38fbed6e5e909d1d993a1ccefd4dbc2c4c16",
            "type": "members",
            "created_at": "2019-05-12T17:27:36.000Z",
            "updated_at": "2019-05-12T17:27:36.000Z"
          },
          {
            "id": "5cf3b8f06e5789135f77858d",
            "key": "members_subscription_settings",
            "value": "{\"isPaid\":false,\"paymentProcessors\":[{\"adapter\":\"stripe\",\"config\":{\"secret_token\":\"\",\"public_token\":\"\",\"product\":{\"name\":\"Ghost Subscription\"},\"plans\":[{\"name\":\"Monthly\",\"currency\":\"usd\",\"interval\":\"month\",\"amount\":\"\"},{\"name\":\"Yearly\",\"currency\":\"usd\",\"interval\":\"year\",\"amount\":\"\"}]}}]}",
            "type": "members",
            "created_at": "2019-05-12T17:27:36.000Z",
            "updated_at": "2019-05-12T17:27:36.000Z"
          }
        ],
        "subscribers": [],
        "tags": [
          {
            "id": "5cf3b9b16e5789135f778596",
            "name": "博客更新",
            "slug": "changelog",
            "description": "博客更改记录",
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "meta_title": null,
            "meta_description": null,
            "created_at": "2019-05-12T17:27:23.000Z",
            "updated_at": "2019-06-02T11:59:52.000Z"
          },
          {
            "id": "5cf3b9b16e5789135f778597",
            "name": "机器学习",
            "slug": "machine-learning",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "meta_title": null,
            "meta_description": null,
            "created_at": "2019-05-13T06:22:19.000Z",
            "updated_at": "2019-05-13T06:22:19.000Z"
          },
          {
            "id": "5cf3b9b16e5789135f778598",
            "name": "线性代数",
            "slug": "linear-algebra",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "meta_title": null,
            "meta_description": null,
            "created_at": "2019-05-13T16:00:50.000Z",
            "updated_at": "2019-05-13T16:01:25.000Z"
          },
          {
            "id": "5cf3b9b16e5789135f778599",
            "name": "Codeforces",
            "slug": "codeforces",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "meta_title": null,
            "meta_description": null,
            "created_at": "2019-05-13T16:14:34.000Z",
            "updated_at": "2019-05-13T16:14:34.000Z"
          },
          {
            "id": "5cf3b9b16e5789135f77859a",
            "name": "读书",
            "slug": "read",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "meta_title": null,
            "meta_description": null,
            "created_at": "2019-05-14T17:09:13.000Z",
            "updated_at": "2019-05-14T17:09:42.000Z"
          },
          {
            "id": "5cf3b9b16e5789135f77859b",
            "name": "Go语言",
            "slug": "golang",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "meta_title": null,
            "meta_description": null,
            "created_at": "2019-05-24T03:16:25.000Z",
            "updated_at": "2019-05-24T03:16:45.000Z"
          },
          {
            "id": "5cf3b9b16e5789135f77859c",
            "name": "Python",
            "slug": "python",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "meta_title": null,
            "meta_description": null,
            "created_at": "2019-06-02T03:34:32.000Z",
            "updated_at": "2019-06-02T03:34:32.000Z"
          },
          {
            "id": "5cf3b9b16e5789135f77859d",
            "name": "爬虫",
            "slug": "spider",
            "description": null,
            "feature_image": null,
            "parent_id": null,
            "visibility": "public",
            "meta_title": null,
            "meta_description": null,
            "created_at": "2019-06-02T03:34:45.000Z",
            "updated_at": "2019-06-02T03:35:22.000Z"
          }
        ],
        "users": [
          {
            "id": "1",
            "name": "Goooooonite",
            "slug": "goooooonite",
            "ghost_auth_access_token": null,
            "ghost_auth_id": null,
            "password": "$2a$10$qCKM4mREWD1xqbEp1zhE4O94Hmeso47iaTnUss/5X0gOpja.IZQSu",
            "email": "just4fan1998@126.com",
            "profile_image": null,
            "cover_image": null,
            "bio": null,
            "website": null,
            "location": null,
            "facebook": null,
            "twitter": null,
            "accessibility": "{\"nightShift\":false}",
            "status": "active",
            "locale": null,
            "visibility": "public",
            "meta_title": null,
            "meta_description": null,
            "tour": "[\"getting-started\"]",
            "last_seen": "2019-09-01T03:59:30.000Z",
            "created_at": "2019-06-02T11:54:22.000Z",
            "updated_at": "2019-09-01T03:59:30.000Z"
          },
          {
            "id": "5951f5fca366002ebd5dbef7",
            "name": "Ghost",
            "slug": "ghost",
            "ghost_auth_access_token": null,
            "ghost_auth_id": null,
            "password": "$2a$10$1iiq53v1xg1JiaRhJzBAOunzbZj1Ruu.z4rwmcb/DgtjDRkRnM1Km",
            "email": "ghost-author@example.com",
            "profile_image": "https://static.ghost.org/v2.0.0/images/ghost.png",
            "cover_image": null,
            "bio": "You can delete this user to remove all the welcome posts",
            "website": "https://ghost.org",
            "location": "The Internet",
            "facebook": "ghost",
            "twitter": "tryghost",
            "accessibility": null,
            "status": "active",
            "locale": null,
            "visibility": "public",
            "meta_title": null,
            "meta_description": null,
            "tour": null,
            "last_seen": null,
            "created_at": "2019-06-02T11:54:22.000Z",
            "updated_at": "2019-06-02T11:54:22.000Z"
          }
        ],
        "webhooks": []
      }
    }
  ]
}
